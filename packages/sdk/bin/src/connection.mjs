// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities.mjs";
export class Connection extends pulumi.CustomResource {
    /**
     * Get an existing Connection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Connection(name, state, { ...opts, id: id });
    }
    /**
     * Returns true if the given object is an instance of Connection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Connection.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["configurations"] = state ? state.configurations : undefined;
            resourceInputs["connectionId"] = state ? state.connectionId : undefined;
            resourceInputs["dataResidency"] = state ? state.dataResidency : undefined;
            resourceInputs["destinationId"] = state ? state.destinationId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespaceDefinition"] = state ? state.namespaceDefinition : undefined;
            resourceInputs["namespaceFormat"] = state ? state.namespaceFormat : undefined;
            resourceInputs["nonBreakingSchemaUpdatesBehavior"] = state ? state.nonBreakingSchemaUpdatesBehavior : undefined;
            resourceInputs["prefix"] = state ? state.prefix : undefined;
            resourceInputs["schedule"] = state ? state.schedule : undefined;
            resourceInputs["sourceId"] = state ? state.sourceId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["workspaceId"] = state ? state.workspaceId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.destinationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destinationId'");
            }
            if ((!args || args.sourceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceId'");
            }
            resourceInputs["configurations"] = args ? args.configurations : undefined;
            resourceInputs["dataResidency"] = args ? args.dataResidency : undefined;
            resourceInputs["destinationId"] = args ? args.destinationId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespaceDefinition"] = args ? args.namespaceDefinition : undefined;
            resourceInputs["namespaceFormat"] = args ? args.namespaceFormat : undefined;
            resourceInputs["nonBreakingSchemaUpdatesBehavior"] = args ? args.nonBreakingSchemaUpdatesBehavior : undefined;
            resourceInputs["prefix"] = args ? args.prefix : undefined;
            resourceInputs["schedule"] = args ? args.schedule : undefined;
            resourceInputs["sourceId"] = args ? args.sourceId : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["connectionId"] = undefined /*out*/;
            resourceInputs["workspaceId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Connection.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}
/** @internal */
Connection.__pulumiType = 'airbyte:index/connection:Connection';
//# sourceMappingURL=connection.js.map