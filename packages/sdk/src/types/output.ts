// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface ConnectionConfigurations {
    streams: outputs.ConnectionConfigurationsStream[];
}

export interface ConnectionConfigurationsStream {
    /**
     * Path to the field that will be used to determine if a record is new or modified since the last sync. This field is REQUIRED if `sync_mode` is `incremental` unless there is a default.
     */
    cursorFields: string[];
    /**
     * Mappers that should be applied to the stream before writing to the destination.
     */
    mappers: outputs.ConnectionConfigurationsStreamMapper[];
    /**
     * Not Null
     */
    name: string;
    /**
     * Paths to the fields that will be used as primary key. This field is REQUIRED if `destination_sync_mode` is `*_dedup` unless it is already supplied by the source schema.
     */
    primaryKeys: string[][];
    /**
     * Paths to the fields that will be included in the configured catalog.
     */
    selectedFields: outputs.ConnectionConfigurationsStreamSelectedField[];
    /**
     * must be one of ["full_refresh_overwrite", "full_refresh_overwrite_deduped", "full_refresh_append", "incremental_append", "incremental_deduped_history"]
     */
    syncMode: string;
}

export interface ConnectionConfigurationsStreamMapper {
    id: string;
    /**
     * The values required to configure the mapper. Not Null
     */
    mapperConfiguration: outputs.ConnectionConfigurationsStreamMapperMapperConfiguration;
    /**
     * Not Null; must be one of ["hashing", "field-renaming", "row-filtering", "encryption"]
     */
    type: string;
}

export interface ConnectionConfigurationsStreamMapperMapperConfiguration {
    encryption: outputs.ConnectionConfigurationsStreamMapperMapperConfigurationEncryption;
    fieldRenaming: outputs.ConnectionConfigurationsStreamMapperMapperConfigurationFieldRenaming;
    hashing: outputs.ConnectionConfigurationsStreamMapperMapperConfigurationHashing;
    rowFiltering: outputs.ConnectionConfigurationsStreamMapperMapperConfigurationRowFiltering;
}

export interface ConnectionConfigurationsStreamMapperMapperConfigurationEncryption {
    aes: outputs.ConnectionConfigurationsStreamMapperMapperConfigurationEncryptionAes;
    rsa: outputs.ConnectionConfigurationsStreamMapperMapperConfigurationEncryptionRsa;
}

export interface ConnectionConfigurationsStreamMapperMapperConfigurationEncryptionAes {
    /**
     * Not Null; must be one of ["RSA", "AES"]
     */
    algorithm: string;
    /**
     * Not Null
     */
    fieldNameSuffix: string;
    /**
     * Not Null
     */
    key: string;
    /**
     * Not Null; must be one of ["CBC", "CFB", "OFB", "CTR", "GCM", "ECB"]
     */
    mode: string;
    /**
     * Not Null; must be one of ["NoPadding", "PKCS5Padding"]
     */
    padding: string;
    /**
     * Not Null
     */
    targetField: string;
}

export interface ConnectionConfigurationsStreamMapperMapperConfigurationEncryptionRsa {
    /**
     * Not Null; must be one of ["RSA", "AES"]
     */
    algorithm: string;
    /**
     * Not Null
     */
    fieldNameSuffix: string;
    /**
     * Not Null
     */
    publicKey: string;
    /**
     * Not Null
     */
    targetField: string;
}

export interface ConnectionConfigurationsStreamMapperMapperConfigurationFieldRenaming {
    /**
     * The new name for the field after renaming. Not Null
     */
    newFieldName: string;
    /**
     * The current name of the field to rename. Not Null
     */
    originalFieldName: string;
}

export interface ConnectionConfigurationsStreamMapperMapperConfigurationHashing {
    /**
     * The suffix to append to the field name after hashing. Not Null
     */
    fieldNameSuffix: string;
    /**
     * The hashing algorithm to use. Not Null; must be one of ["MD2", "MD5", "SHA-1", "SHA-224", "SHA-256", "SHA-384", "SHA-512"]
     */
    method: string;
    /**
     * The name of the field to be hashed. Not Null
     */
    targetField: string;
}

export interface ConnectionConfigurationsStreamMapperMapperConfigurationRowFiltering {
    /**
     * Not Null; Parsed as JSON.
     */
    conditions: string;
}

export interface ConnectionConfigurationsStreamSelectedField {
    fieldPaths: string[];
}

export interface ConnectionSchedule {
    basicTiming: string;
    cronExpression: string;
    /**
     * Not Null; must be one of ["manual", "cron"]
     */
    scheduleType: string;
}

export interface ConnectionTag {
    /**
     * Not Null
     */
    color: string;
    /**
     * Not Null
     */
    name: string;
    /**
     * Not Null
     */
    tagId: string;
    /**
     * Not Null
     */
    workspaceId: string;
}

export interface DestinationAstraConfiguration {
    /**
     * Embedding configuration
     */
    embedding: outputs.DestinationAstraConfigurationEmbedding;
    /**
     * Astra DB gives developers the APIs, real-time data and ecosystem integrations to put accurate RAG and Gen AI apps with fewer hallucinations in production.
     */
    indexing: outputs.DestinationAstraConfigurationIndexing;
    /**
     * Do not store the text that gets embedded along with the vector and the metadata in the destination. If set to true, only the vector and the metadata will be stored - in this case raw text for LLM use cases needs to be retrieved from another source. Default: false
     */
    omitRawText: boolean;
    processing: outputs.DestinationAstraConfigurationProcessing;
}

export interface DestinationAstraConfigurationEmbedding {
    /**
     * Use the Azure-hosted OpenAI API to embed text. This option is using the text-embedding-ada-002 model with 1536 embedding dimensions.
     */
    azureOpenAi?: outputs.DestinationAstraConfigurationEmbeddingAzureOpenAi;
    /**
     * Use the Cohere API to embed text.
     */
    cohere?: outputs.DestinationAstraConfigurationEmbeddingCohere;
    /**
     * Use a fake embedding made out of random vectors with 1536 embedding dimensions. This is useful for testing the data pipeline without incurring any costs.
     */
    fake?: outputs.DestinationAstraConfigurationEmbeddingFake;
    /**
     * Use the OpenAI API to embed text. This option is using the text-embedding-ada-002 model with 1536 embedding dimensions.
     */
    openAi?: outputs.DestinationAstraConfigurationEmbeddingOpenAi;
    /**
     * Use a service that's compatible with the OpenAI API to embed text.
     */
    openAiCompatible?: outputs.DestinationAstraConfigurationEmbeddingOpenAiCompatible;
}

export interface DestinationAstraConfigurationEmbeddingAzureOpenAi {
    /**
     * The base URL for your Azure OpenAI resource.  You can find this in the Azure portal under your Azure OpenAI resource
     */
    apiBase: string;
    /**
     * The deployment for your Azure OpenAI resource.  You can find this in the Azure portal under your Azure OpenAI resource
     */
    deployment: string;
    /**
     * The API key for your Azure OpenAI resource.  You can find this in the Azure portal under your Azure OpenAI resource
     */
    openaiKey: string;
}

export interface DestinationAstraConfigurationEmbeddingCohere {
    cohereKey: string;
}

export interface DestinationAstraConfigurationEmbeddingFake {
}

export interface DestinationAstraConfigurationEmbeddingOpenAi {
    openaiKey: string;
}

export interface DestinationAstraConfigurationEmbeddingOpenAiCompatible {
    /**
     * Default: ""
     */
    apiKey: string;
    /**
     * The base URL for your OpenAI-compatible service
     */
    baseUrl: string;
    /**
     * The number of dimensions the embedding model is generating
     */
    dimensions: number;
    /**
     * The name of the model to use for embedding. Default: "text-embedding-ada-002"
     */
    modelName: string;
}

export interface DestinationAstraConfigurationIndexing {
    /**
     * The application token authorizes a user to connect to a specific Astra DB database. It is created when the user clicks the Generate Token button on the Overview tab of the Database page in the Astra UI.
     */
    astraDbAppToken: string;
    /**
     * The endpoint specifies which Astra DB database queries are sent to. It can be copied from the Database Details section of the Overview tab of the Database page in the Astra UI.
     */
    astraDbEndpoint: string;
    /**
     * Keyspaces (or Namespaces) serve as containers for organizing data within a database. You can create a new keyspace uisng the Data Explorer tab in the Astra UI. The keyspace default_keyspace is created for you when you create a Vector Database in Astra DB.
     */
    astraDbKeyspace: string;
    /**
     * Collections hold data. They are analagous to tables in traditional Cassandra terminology. This tool will create the collection with the provided name automatically if it does not already exist. Alternatively, you can create one thorugh the Data Explorer tab in the Astra UI.
     */
    collection: string;
}

export interface DestinationAstraConfigurationProcessing {
    /**
     * Size of overlap between chunks in tokens to store in vector store to better capture relevant context. Default: 0
     */
    chunkOverlap: number;
    /**
     * Size of chunks in tokens to store in vector store (make sure it is not too big for the context if your LLM)
     */
    chunkSize: number;
    /**
     * List of fields to rename. Not applicable for nested fields, but can be used to rename fields already flattened via dot notation.
     */
    fieldNameMappings?: outputs.DestinationAstraConfigurationProcessingFieldNameMapping[];
    /**
     * List of fields in the record that should be stored as metadata. The field list is applied to all streams in the same way and non-existing fields are ignored. If none are defined, all fields are considered metadata fields. When specifying text fields, you can access nested fields in the record by using dot notation, e.g. `user.name` will access the `name` field in the `user` object. It's also possible to use wildcards to access all fields in an object, e.g. `users.*.name` will access all `names` fields in all entries of the `users` array. When specifying nested paths, all matching values are flattened into an array set to a field named by the path.
     */
    metadataFields: string[];
    /**
     * List of fields in the record that should be used to calculate the embedding. The field list is applied to all streams in the same way and non-existing fields are ignored. If none are defined, all fields are considered text fields. When specifying text fields, you can access nested fields in the record by using dot notation, e.g. `user.name` will access the `name` field in the `user` object. It's also possible to use wildcards to access all fields in an object, e.g. `users.*.name` will access all `names` fields in all entries of the `users` array.
     */
    textFields: string[];
    /**
     * Split text fields into chunks based on the specified method.
     */
    textSplitter?: outputs.DestinationAstraConfigurationProcessingTextSplitter;
}

export interface DestinationAstraConfigurationProcessingFieldNameMapping {
    /**
     * The field name in the source
     */
    fromField: string;
    /**
     * The field name to use in the destination
     */
    toField: string;
}

export interface DestinationAstraConfigurationProcessingTextSplitter {
    /**
     * Split the text by Markdown headers down to the specified header level. If the chunk size fits multiple sections, they will be combined into a single chunk.
     */
    byMarkdownHeader?: outputs.DestinationAstraConfigurationProcessingTextSplitterByMarkdownHeader;
    /**
     * Split the text by suitable delimiters based on the programming language. This is useful for splitting code into chunks.
     */
    byProgrammingLanguage?: outputs.DestinationAstraConfigurationProcessingTextSplitterByProgrammingLanguage;
    /**
     * Split the text by the list of separators until the chunk size is reached, using the earlier mentioned separators where possible. This is useful for splitting text fields by paragraphs, sentences, words, etc.
     */
    bySeparator?: outputs.DestinationAstraConfigurationProcessingTextSplitterBySeparator;
}

export interface DestinationAstraConfigurationProcessingTextSplitterByMarkdownHeader {
    /**
     * Level of markdown headers to split text fields by. Headings down to the specified level will be used as split points. Default: 1
     */
    splitLevel: number;
}

export interface DestinationAstraConfigurationProcessingTextSplitterByProgrammingLanguage {
    /**
     * Split code in suitable places based on the programming language. must be one of ["cpp", "go", "java", "js", "php", "proto", "python", "rst", "ruby", "rust", "scala", "swift", "markdown", "latex", "html", "sol"]
     */
    language: string;
}

export interface DestinationAstraConfigurationProcessingTextSplitterBySeparator {
    /**
     * Whether to keep the separator in the resulting chunks. Default: false
     */
    keepSeparator: boolean;
    /**
     * List of separator strings to split text fields by. The separator itself needs to be wrapped in double quotes, e.g. to split by the dot character, use ".". To split by a newline, use "\n".
     */
    separators?: string[];
}

export interface DestinationAstraResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.DestinationAstraResourceAllocationDefault;
    jobSpecifics: outputs.DestinationAstraResourceAllocationJobSpecific[];
}

export interface DestinationAstraResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationAstraResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.DestinationAstraResourceAllocationJobSpecificResourceRequirements;
}

export interface DestinationAstraResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationAwsDatalakeConfiguration {
    /**
     * target aws account id
     */
    awsAccountId?: string;
    /**
     * The name of the S3 bucket. Read more <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/create-bucket-overview.html">here</a>.
     */
    bucketName: string;
    /**
     * S3 prefix
     */
    bucketPrefix?: string;
    /**
     * Choose How to Authenticate to AWS.
     */
    credentials: outputs.DestinationAwsDatalakeConfigurationCredentials;
    /**
     * Format of the data output.
     */
    format?: outputs.DestinationAwsDatalakeConfigurationFormat;
    /**
     * Cast float/double as decimal(38,18). This can help achieve higher accuracy and represent numbers correctly as received from the source. Default: false
     */
    glueCatalogFloatAsDecimal: boolean;
    /**
     * Add a default tag key to databases created by this destination
     */
    lakeformationDatabaseDefaultTagKey?: string;
    /**
     * Add default values for the `Tag Key` to databases created by this destination. Comma separate for multiple values.
     */
    lakeformationDatabaseDefaultTagValues?: string;
    /**
     * The default database this destination will use to create tables in per stream. Can be changed per connection by customizing the namespace.
     */
    lakeformationDatabaseName: string;
    /**
     * Whether to create tables as LF governed tables. Default: false
     */
    lakeformationGovernedTables: boolean;
    /**
     * Partition data by cursor fields when a cursor field is a date. Default: "NO PARTITIONING"; must be one of ["NO PARTITIONING", "DATE", "YEAR", "MONTH", "DAY", "YEAR/MONTH", "YEAR/MONTH/DAY"]
     */
    partitioning: string;
    /**
     * The region of the S3 bucket. See <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-available-regions">here</a> for all region codes. Default: ""; must be one of ["", "af-south-1", "ap-east-1", "ap-northeast-1", "ap-northeast-2", "ap-northeast-3", "ap-south-1", "ap-south-2", "ap-southeast-1", "ap-southeast-2", "ap-southeast-3", "ap-southeast-4", "ca-central-1", "ca-west-1", "cn-north-1", "cn-northwest-1", "eu-central-1", "eu-central-2", "eu-north-1", "eu-south-1", "eu-south-2", "eu-west-1", "eu-west-2", "eu-west-3", "il-central-1", "me-central-1", "me-south-1", "sa-east-1", "us-east-1", "us-east-2", "us-gov-east-1", "us-gov-west-1", "us-west-1", "us-west-2"]
     */
    region: string;
}

export interface DestinationAwsDatalakeConfigurationCredentials {
    iamRole?: outputs.DestinationAwsDatalakeConfigurationCredentialsIamRole;
    iamUser?: outputs.DestinationAwsDatalakeConfigurationCredentialsIamUser;
}

export interface DestinationAwsDatalakeConfigurationCredentialsIamRole {
    /**
     * Will assume this role to write data to s3
     */
    roleArn: string;
}

export interface DestinationAwsDatalakeConfigurationCredentialsIamUser {
    /**
     * AWS User Access Key Id
     */
    awsAccessKeyId: string;
    /**
     * Secret Access Key
     */
    awsSecretAccessKey: string;
}

export interface DestinationAwsDatalakeConfigurationFormat {
    jsonLinesNewlineDelimitedJson?: outputs.DestinationAwsDatalakeConfigurationFormatJsonLinesNewlineDelimitedJson;
    parquetColumnarStorage?: outputs.DestinationAwsDatalakeConfigurationFormatParquetColumnarStorage;
}

export interface DestinationAwsDatalakeConfigurationFormatJsonLinesNewlineDelimitedJson {
    /**
     * The compression algorithm used to compress data. Default: "UNCOMPRESSED"; must be one of ["UNCOMPRESSED", "GZIP"]
     */
    compressionCodec: string;
    /**
     * Default: "JSONL"; must be "JSONL"
     */
    formatType: string;
}

export interface DestinationAwsDatalakeConfigurationFormatParquetColumnarStorage {
    /**
     * The compression algorithm used to compress data. Default: "SNAPPY"; must be one of ["UNCOMPRESSED", "SNAPPY", "GZIP", "ZSTD"]
     */
    compressionCodec: string;
    /**
     * Default: "Parquet"; must be "Parquet"
     */
    formatType: string;
}

export interface DestinationAwsDatalakeResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.DestinationAwsDatalakeResourceAllocationDefault;
    jobSpecifics: outputs.DestinationAwsDatalakeResourceAllocationJobSpecific[];
}

export interface DestinationAwsDatalakeResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationAwsDatalakeResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.DestinationAwsDatalakeResourceAllocationJobSpecificResourceRequirements;
}

export interface DestinationAwsDatalakeResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationAzureBlobStorageConfiguration {
    /**
     * The Azure blob storage account key.
     */
    azureBlobStorageAccountKey: string;
    /**
     * The account's name of the Azure Blob Storage.
     */
    azureBlobStorageAccountName: string;
    /**
     * The name of the Azure blob storage container. If not exists - will be created automatically. May be empty, then will be created automatically airbytecontainer+timestamp
     */
    azureBlobStorageContainerName?: string;
    /**
     * This is Azure Blob Storage endpoint domain name. Leave default value (or leave it empty if run container from command line) to use Microsoft native from example. Default: "blob.core.windows.net"
     */
    azureBlobStorageEndpointDomainName: string;
    /**
     * The amount of megabytes to buffer for the output stream to Azure. This will impact memory footprint on workers, but may need adjustment for performance and appropriate block size in Azure. Default: 5
     */
    azureBlobStorageOutputBufferSize: number;
    /**
     * The amount of megabytes after which the connector should spill the records in a new blob object. Make sure to configure size greater than individual records. Enter 0 if not applicable. Default: 500
     */
    azureBlobStorageSpillSize: number;
    /**
     * Output data format
     */
    format: outputs.DestinationAzureBlobStorageConfigurationFormat;
}

export interface DestinationAzureBlobStorageConfigurationFormat {
    csvCommaSeparatedValues?: outputs.DestinationAzureBlobStorageConfigurationFormatCsvCommaSeparatedValues;
    jsonLinesNewlineDelimitedJson?: outputs.DestinationAzureBlobStorageConfigurationFormatJsonLinesNewlineDelimitedJson;
}

export interface DestinationAzureBlobStorageConfigurationFormatCsvCommaSeparatedValues {
    /**
     * Add file extensions to the output file. Default: false
     */
    fileExtension: boolean;
    /**
     * Whether the input json data should be normalized (flattened) in the output CSV. Please refer to docs for details. Default: "No flattening"; must be one of ["No flattening", "Root level flattening"]
     */
    flattening: string;
}

export interface DestinationAzureBlobStorageConfigurationFormatJsonLinesNewlineDelimitedJson {
    /**
     * Add file extensions to the output file. Default: false
     */
    fileExtension: boolean;
}

export interface DestinationAzureBlobStorageResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.DestinationAzureBlobStorageResourceAllocationDefault;
    jobSpecifics: outputs.DestinationAzureBlobStorageResourceAllocationJobSpecific[];
}

export interface DestinationAzureBlobStorageResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationAzureBlobStorageResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.DestinationAzureBlobStorageResourceAllocationJobSpecificResourceRequirements;
}

export interface DestinationAzureBlobStorageResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationBigqueryConfiguration {
    /**
     * Google BigQuery client's chunk (buffer) size (MIN=1, MAX = 15) for each table. The size that will be written by a single RPC. Written data will be buffered and only flushed upon reaching this size or closing the channel. The default 15MB value is used if not set explicitly. Read more <a href="https://googleapis.dev/python/bigquery/latest/generated/google.cloud.bigquery.client.Client.html">here</a>. Default: 15
     */
    bigQueryClientBufferSizeMb: number;
    /**
     * The contents of the JSON service account key. Check out the <a href="https://docs.airbyte.com/integrations/destinations/bigquery#service-account-key">docs</a> if you need help generating this key. Default credentials will be used if this field is left empty.
     */
    credentialsJson?: string;
    /**
     * The default BigQuery Dataset ID that tables are replicated to if the source does not specify a namespace. Read more <a href="https://cloud.google.com/bigquery/docs/datasets#create-dataset">here</a>.
     */
    datasetId: string;
    /**
     * The location of the dataset. Warning: Changes made after creation will not be applied. Read more <a href="https://cloud.google.com/bigquery/docs/locations">here</a>. must be one of ["US", "EU", "asia-east1", "asia-east2", "asia-northeast1", "asia-northeast2", "asia-northeast3", "asia-south1", "asia-south2", "asia-southeast1", "asia-southeast2", "australia-southeast1", "australia-southeast2", "europe-central1", "europe-central2", "europe-north1", "europe-southwest1", "europe-west1", "europe-west2", "europe-west3", "europe-west4", "europe-west6", "europe-west7", "europe-west8", "europe-west9", "europe-west12", "me-central1", "me-central2", "me-west1", "northamerica-northeast1", "northamerica-northeast2", "southamerica-east1", "southamerica-west1", "us-central1", "us-east1", "us-east2", "us-east3", "us-east4", "us-east5", "us-south1", "us-west1", "us-west2", "us-west3", "us-west4"]
     */
    datasetLocation: string;
    /**
     * Disable Writing Final Tables. WARNING! The data format in _airbyte_data is likely stable but there are no guarantees that other metadata columns will remain the same in future versions. Default: false
     */
    disableTypeDedupe: boolean;
    /**
     * The way data will be uploaded to BigQuery.
     */
    loadingMethod?: outputs.DestinationBigqueryConfigurationLoadingMethod;
    /**
     * The GCP project ID for the project containing the target BigQuery dataset. Read more <a href="https://cloud.google.com/resource-manager/docs/creating-managing-projects#identifying_projects">here</a>.
     */
    projectId: string;
    /**
     * The dataset to write raw tables into (default: airbyte_internal)
     */
    rawDataDataset?: string;
    /**
     * Interactive run type means that the query is executed as soon as possible, and these queries count towards concurrent rate limit and daily limit. Read more about interactive run type <a href="https://cloud.google.com/bigquery/docs/running-queries#queries">here</a>. Batch queries are queued and started as soon as idle resources are available in the BigQuery shared resource pool, which usually occurs within a few minutes. Batch queries don’t count towards your concurrent rate limit. Read more about batch queries <a href="https://cloud.google.com/bigquery/docs/running-queries#batch">here</a>. The default "interactive" value is used if not set explicitly. Default: "interactive"; must be one of ["interactive", "batch"]
     */
    transformationPriority: string;
}

export interface DestinationBigqueryConfigurationLoadingMethod {
    /**
     * Direct loading using batched SQL INSERT statements. This method uses the BigQuery driver to convert large INSERT statements into file uploads automatically.
     */
    batchedStandardInserts?: outputs.DestinationBigqueryConfigurationLoadingMethodBatchedStandardInserts;
    /**
     * Writes large batches of records to a file, uploads the file to GCS, then uses COPY INTO to load your data into BigQuery.
     */
    gcsStaging?: outputs.DestinationBigqueryConfigurationLoadingMethodGcsStaging;
}

export interface DestinationBigqueryConfigurationLoadingMethodBatchedStandardInserts {
}

export interface DestinationBigqueryConfigurationLoadingMethodGcsStaging {
    /**
     * An HMAC key is a type of credential and can be associated with a service account or a user account in Cloud Storage. Read more <a href="https://cloud.google.com/storage/docs/authentication/hmackeys">here</a>.
     */
    credential: outputs.DestinationBigqueryConfigurationLoadingMethodGcsStagingCredential;
    /**
     * The name of the GCS bucket. Read more <a href="https://cloud.google.com/storage/docs/naming-buckets">here</a>.
     */
    gcsBucketName: string;
    /**
     * Directory under the GCS bucket where data will be written.
     */
    gcsBucketPath: string;
    /**
     * This upload method is supposed to temporary store records in GCS bucket. By this select you can chose if these records should be removed from GCS when migration has finished. The default "Delete all tmp files from GCS" value is used if not set explicitly. Default: "Delete all tmp files from GCS"; must be one of ["Delete all tmp files from GCS", "Keep all tmp files in GCS"]
     */
    keepFilesInGcsBucket: string;
}

export interface DestinationBigqueryConfigurationLoadingMethodGcsStagingCredential {
    hmacKey?: outputs.DestinationBigqueryConfigurationLoadingMethodGcsStagingCredentialHmacKey;
}

export interface DestinationBigqueryConfigurationLoadingMethodGcsStagingCredentialHmacKey {
    /**
     * HMAC key access ID. When linked to a service account, this ID is 61 characters long; when linked to a user account, it is 24 characters long.
     */
    hmacKeyAccessId: string;
    /**
     * The corresponding secret for the access ID. It is a 40-character base-64 encoded string.
     */
    hmacKeySecret: string;
}

export interface DestinationBigqueryResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.DestinationBigqueryResourceAllocationDefault;
    jobSpecifics: outputs.DestinationBigqueryResourceAllocationJobSpecific[];
}

export interface DestinationBigqueryResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationBigqueryResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.DestinationBigqueryResourceAllocationJobSpecificResourceRequirements;
}

export interface DestinationBigqueryResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationClickhouseConfiguration {
    /**
     * Name of the database.
     */
    database: string;
    /**
     * Hostname of the database.
     */
    host: string;
    /**
     * Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '&'. (example: key1=value1&key2=value2&key3=value3).
     */
    jdbcUrlParams?: string;
    /**
     * Password associated with the username.
     */
    password?: string;
    /**
     * HTTP port of the database. Default: 8123
     */
    port: number;
    /**
     * The schema to write raw tables into (default: airbyte_internal)
     */
    rawDataSchema?: string;
    /**
     * Encrypt data using SSL. Default: false
     */
    ssl: boolean;
    /**
     * Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
     */
    tunnelMethod?: outputs.DestinationClickhouseConfigurationTunnelMethod;
    /**
     * Username to use to access the database.
     */
    username: string;
}

export interface DestinationClickhouseConfigurationTunnelMethod {
    noTunnel?: outputs.DestinationClickhouseConfigurationTunnelMethodNoTunnel;
    passwordAuthentication?: outputs.DestinationClickhouseConfigurationTunnelMethodPasswordAuthentication;
    sshKeyAuthentication?: outputs.DestinationClickhouseConfigurationTunnelMethodSshKeyAuthentication;
}

export interface DestinationClickhouseConfigurationTunnelMethodNoTunnel {
}

export interface DestinationClickhouseConfigurationTunnelMethodPasswordAuthentication {
    /**
     * Hostname of the jump server host that allows inbound ssh tunnel.
     */
    tunnelHost: string;
    /**
     * Port on the proxy/jump server that accepts inbound ssh connections. Default: 22
     */
    tunnelPort: number;
    /**
     * OS-level username for logging into the jump server host
     */
    tunnelUser: string;
    /**
     * OS-level password for logging into the jump server host
     */
    tunnelUserPassword: string;
}

export interface DestinationClickhouseConfigurationTunnelMethodSshKeyAuthentication {
    /**
     * OS-level user account ssh key credentials in RSA PEM format ( created with ssh-keygen -t rsa -m PEM -f myuser_rsa )
     */
    sshKey: string;
    /**
     * Hostname of the jump server host that allows inbound ssh tunnel.
     */
    tunnelHost: string;
    /**
     * Port on the proxy/jump server that accepts inbound ssh connections. Default: 22
     */
    tunnelPort: number;
    /**
     * OS-level username for logging into the jump server host.
     */
    tunnelUser: string;
}

export interface DestinationClickhouseResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.DestinationClickhouseResourceAllocationDefault;
    jobSpecifics: outputs.DestinationClickhouseResourceAllocationJobSpecific[];
}

export interface DestinationClickhouseResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationClickhouseResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.DestinationClickhouseResourceAllocationJobSpecificResourceRequirements;
}

export interface DestinationClickhouseResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationCobraConfiguration {
    /**
     * Enter your Salesforce developer application's <a href="https://developer.salesforce.com/forums/?id=9062I000000DLgbQAG">Client ID</a>
     */
    clientId: string;
    /**
     * Enter your Salesforce developer application's <a href="https://developer.salesforce.com/forums/?id=9062I000000DLgbQAG">Client secret</a>
     */
    clientSecret: string;
    /**
     * Toggle if you're using a <a href="https://help.salesforce.com/s/articleView?id=sf.deploy_sandboxes_parent.htm&type=5">Salesforce Sandbox</a>. Default: false
     */
    isSandbox: boolean;
    /**
     * If enabled, the records content will be printed as part of the log in case of failure which allows for easier debugging. Default: false
     */
    printRecordContentOnError: boolean;
    /**
     * Enter your application's <a href="https://developer.salesforce.com/docs/atlas.en-us.mobile_sdk.meta/mobile_sdk/oauth_refresh_token_flow.htm">Salesforce Refresh Token</a> used for Airbyte to access your Salesforce account.
     */
    refreshToken: string;
    streamMappings?: outputs.DestinationCobraConfigurationStreamMapping[];
    /**
     * The order in which the streams should be synced. Streams are synced in the order they are listed. Only those streams will be synced so make sure all the input streams are configured here.
     */
    streamOrders: string[];
}

export interface DestinationCobraConfigurationStreamMapping {
    /**
     * The name for the table to update the data in the destination.
     */
    destinationTable: string;
    /**
     * The name for the input stream.
     */
    sourceStream: string;
    /**
     * How to update the data in the destination. must be one of ["INSERT", "UPDATE", "UPSERT", "DELETE"]
     */
    updateMode: string;
    /**
     * Given the operation is an upsert, a field representing an external ID needs to be provided
     */
    upsertKey?: string;
}

export interface DestinationCobraResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.DestinationCobraResourceAllocationDefault;
    jobSpecifics: outputs.DestinationCobraResourceAllocationJobSpecific[];
}

export interface DestinationCobraResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationCobraResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.DestinationCobraResourceAllocationJobSpecificResourceRequirements;
}

export interface DestinationCobraResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationConvexConfiguration {
    /**
     * API access key used to send data to a Convex deployment.
     */
    accessKey: string;
    /**
     * URL of the Convex deployment that is the destination
     */
    deploymentUrl: string;
}

export interface DestinationConvexResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.DestinationConvexResourceAllocationDefault;
    jobSpecifics: outputs.DestinationConvexResourceAllocationJobSpecific[];
}

export interface DestinationConvexResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationConvexResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.DestinationConvexResourceAllocationJobSpecificResourceRequirements;
}

export interface DestinationConvexResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationCustomResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.DestinationCustomResourceAllocationDefault;
    jobSpecifics: outputs.DestinationCustomResourceAllocationJobSpecific[];
}

export interface DestinationCustomResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationCustomResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.DestinationCustomResourceAllocationJobSpecificResourceRequirements;
}

export interface DestinationCustomResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationDatabricksConfiguration {
    /**
     * You must agree to the Databricks JDBC Driver <a href="https://databricks.com/jdbc-odbc-driver-license">Terms & Conditions</a> to use this connector. Default: false
     */
    acceptTerms: boolean;
    /**
     * Authentication mechanism for Staging files and running queries
     */
    authentication: outputs.DestinationDatabricksConfigurationAuthentication;
    /**
     * The name of the unity catalog for the database
     */
    database: string;
    /**
     * Databricks Cluster Server Hostname.
     */
    hostname: string;
    /**
     * Databricks Cluster HTTP Path.
     */
    httpPath: string;
    /**
     * Databricks Cluster Port. Default: "443"
     */
    port: string;
    /**
     * Default to 'true'. Switch it to 'false' for debugging purpose. Default: true
     */
    purgeStagingData: boolean;
    /**
     * The schema to write raw tables into (default: airbyte_internal). Default: "airbyte_internal"
     */
    rawSchemaOverride: string;
    /**
     * The default schema tables are written. If not specified otherwise, the "default" will be used. Default: "default"
     */
    schema: string;
}

export interface DestinationDatabricksConfigurationAuthentication {
    oAuth2Recommended?: outputs.DestinationDatabricksConfigurationAuthenticationOAuth2Recommended;
    personalAccessToken?: outputs.DestinationDatabricksConfigurationAuthenticationPersonalAccessToken;
}

export interface DestinationDatabricksConfigurationAuthenticationOAuth2Recommended {
    clientId: string;
    secret: string;
}

export interface DestinationDatabricksConfigurationAuthenticationPersonalAccessToken {
    personalAccessToken: string;
}

export interface DestinationDatabricksResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.DestinationDatabricksResourceAllocationDefault;
    jobSpecifics: outputs.DestinationDatabricksResourceAllocationJobSpecific[];
}

export interface DestinationDatabricksResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationDatabricksResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.DestinationDatabricksResourceAllocationJobSpecificResourceRequirements;
}

export interface DestinationDatabricksResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationDeepsetConfiguration {
    /**
     * Your deepset cloud API key
     */
    apiKey: string;
    /**
     * URL of deepset Cloud API (e.g. https://api.cloud.deepset.ai, https://api.us.deepset.ai, etc). Defaults to https://api.cloud.deepset.ai. Default: "https://api.cloud.deepset.ai"
     */
    baseUrl: string;
    /**
     * Number of times to retry an action before giving up. Default: 5
     */
    retries: number;
    /**
     * Name of workspace to which to sync the data.
     */
    workspace: string;
}

export interface DestinationDeepsetResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.DestinationDeepsetResourceAllocationDefault;
    jobSpecifics: outputs.DestinationDeepsetResourceAllocationJobSpecific[];
}

export interface DestinationDeepsetResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationDeepsetResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.DestinationDeepsetResourceAllocationJobSpecificResourceRequirements;
}

export interface DestinationDeepsetResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationDevNullConfiguration {
    /**
     * The type of destination to be used
     */
    testDestination: outputs.DestinationDevNullConfigurationTestDestination;
}

export interface DestinationDevNullConfigurationTestDestination {
    failing?: outputs.DestinationDevNullConfigurationTestDestinationFailing;
    logging?: outputs.DestinationDevNullConfigurationTestDestinationLogging;
    silent?: outputs.DestinationDevNullConfigurationTestDestinationSilent;
    throttled?: outputs.DestinationDevNullConfigurationTestDestinationThrottled;
}

export interface DestinationDevNullConfigurationTestDestinationFailing {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * Number of messages after which to fail.
     */
    numMessages: number;
    /**
     * Default: "FAILING"; must be "FAILING"
     */
    testDestinationType: string;
}

export interface DestinationDevNullConfigurationTestDestinationLogging {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * Configurate how the messages are logged.
     */
    loggingConfig: outputs.DestinationDevNullConfigurationTestDestinationLoggingLoggingConfig;
    /**
     * Default: "LOGGING"; must be "LOGGING"
     */
    testDestinationType: string;
}

export interface DestinationDevNullConfigurationTestDestinationLoggingLoggingConfig {
    /**
     * For each stream, log every N-th entry with a maximum cap.
     */
    everyNThEntry?: outputs.DestinationDevNullConfigurationTestDestinationLoggingLoggingConfigEveryNThEntry;
    /**
     * Log first N entries per stream.
     */
    firstNEntries?: outputs.DestinationDevNullConfigurationTestDestinationLoggingLoggingConfigFirstNEntries;
    /**
     * For each stream, randomly log a percentage of the entries with a maximum cap.
     */
    randomSampling?: outputs.DestinationDevNullConfigurationTestDestinationLoggingLoggingConfigRandomSampling;
}

export interface DestinationDevNullConfigurationTestDestinationLoggingLoggingConfigEveryNThEntry {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * Default: "EveryNth"; must be "EveryNth"
     */
    loggingType: string;
    /**
     * Number of entries to log. This destination is for testing only. So it won't make sense to log infinitely. The maximum is 1,000 entries. Default: 100
     */
    maxEntryCount: number;
    /**
     * The N-th entry to log for each stream. N starts from 1. For example, when N = 1, every entry is logged; when N = 2, every other entry is logged; when N = 3, one out of three entries is logged.
     */
    nthEntryToLog: number;
}

export interface DestinationDevNullConfigurationTestDestinationLoggingLoggingConfigFirstNEntries {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * Default: "FirstN"; must be "FirstN"
     */
    loggingType: string;
    /**
     * Number of entries to log. This destination is for testing only. So it won't make sense to log infinitely. The maximum is 1,000 entries. Default: 100
     */
    maxEntryCount: number;
}

export interface DestinationDevNullConfigurationTestDestinationLoggingLoggingConfigRandomSampling {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * Default: "RandomSampling"; must be "RandomSampling"
     */
    loggingType: string;
    /**
     * Number of entries to log. This destination is for testing only. So it won't make sense to log infinitely. The maximum is 1,000 entries. Default: 100
     */
    maxEntryCount: number;
    /**
     * A positive floating number smaller than 1. Default: 0.001
     */
    samplingRatio: number;
    /**
     * When the seed is unspecified, the current time millis will be used as the seed.
     */
    seed?: number;
}

export interface DestinationDevNullConfigurationTestDestinationSilent {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * Default: "SILENT"; must be "SILENT"
     */
    testDestinationType: string;
}

export interface DestinationDevNullConfigurationTestDestinationThrottled {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * The number of milliseconds to wait between each record.
     */
    millisPerRecord: number;
    /**
     * Default: "THROTTLED"; must be "THROTTLED"
     */
    testDestinationType: string;
}

export interface DestinationDevNullResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.DestinationDevNullResourceAllocationDefault;
    jobSpecifics: outputs.DestinationDevNullResourceAllocationJobSpecific[];
}

export interface DestinationDevNullResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationDevNullResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.DestinationDevNullResourceAllocationJobSpecificResourceRequirements;
}

export interface DestinationDevNullResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationDuckdbConfiguration {
    /**
     * Path to the .duckdb file, or the text 'md:' to connect to MotherDuck. The file will be placed inside that local mount. For more information check out our <a href="https://docs.airbyte.io/integrations/destinations/duckdb">docs</a>
     */
    destinationPath: string;
    /**
     * API key to use for authentication to a MotherDuck database.
     */
    motherduckApiKey?: string;
    /**
     * Database schema name, default for duckdb is 'main'.
     */
    schema?: string;
}

export interface DestinationDuckdbResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.DestinationDuckdbResourceAllocationDefault;
    jobSpecifics: outputs.DestinationDuckdbResourceAllocationJobSpecific[];
}

export interface DestinationDuckdbResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationDuckdbResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.DestinationDuckdbResourceAllocationJobSpecificResourceRequirements;
}

export interface DestinationDuckdbResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationDynamodbConfiguration {
    /**
     * The access key id to access the DynamoDB. Airbyte requires Read and Write permissions to the DynamoDB.
     */
    accessKeyId: string;
    /**
     * This is your DynamoDB endpoint url.(if you are working with AWS DynamoDB, just leave empty). Default: ""
     */
    dynamodbEndpoint: string;
    /**
     * The region of the DynamoDB. Default: ""; must be one of ["", "af-south-1", "ap-east-1", "ap-northeast-1", "ap-northeast-2", "ap-northeast-3", "ap-south-1", "ap-south-2", "ap-southeast-1", "ap-southeast-2", "ap-southeast-3", "ap-southeast-4", "ca-central-1", "ca-west-1", "cn-north-1", "cn-northwest-1", "eu-central-1", "eu-central-2", "eu-north-1", "eu-south-1", "eu-south-2", "eu-west-1", "eu-west-2", "eu-west-3", "il-central-1", "me-central-1", "me-south-1", "sa-east-1", "us-east-1", "us-east-2", "us-gov-east-1", "us-gov-west-1", "us-west-1", "us-west-2"]
     */
    dynamodbRegion: string;
    /**
     * The prefix to use when naming DynamoDB tables.
     */
    dynamodbTableNamePrefix: string;
    /**
     * The corresponding secret to the access key id.
     */
    secretAccessKey: string;
}

export interface DestinationDynamodbResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.DestinationDynamodbResourceAllocationDefault;
    jobSpecifics: outputs.DestinationDynamodbResourceAllocationJobSpecific[];
}

export interface DestinationDynamodbResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationDynamodbResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.DestinationDynamodbResourceAllocationJobSpecificResourceRequirements;
}

export interface DestinationDynamodbResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationElasticsearchConfiguration {
    /**
     * The type of authentication to be used
     */
    authenticationMethod?: outputs.DestinationElasticsearchConfigurationAuthenticationMethod;
    /**
     * CA certificate
     */
    caCertificate?: string;
    /**
     * The full url of the Elasticsearch server
     */
    endpoint: string;
    /**
     * Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
     */
    tunnelMethod?: outputs.DestinationElasticsearchConfigurationTunnelMethod;
    /**
     * If a primary key identifier is defined in the source, an upsert will be performed using the primary key value as the elasticsearch doc id. Does not support composite primary keys. Default: true
     */
    upsert: boolean;
}

export interface DestinationElasticsearchConfigurationAuthenticationMethod {
    /**
     * Use a api key and secret combination to authenticate
     */
    apiKeySecret?: outputs.DestinationElasticsearchConfigurationAuthenticationMethodApiKeySecret;
    /**
     * No authentication will be used
     */
    none?: outputs.DestinationElasticsearchConfigurationAuthenticationMethodNone;
    /**
     * Basic auth header with a username and password
     */
    usernamePassword?: outputs.DestinationElasticsearchConfigurationAuthenticationMethodUsernamePassword;
}

export interface DestinationElasticsearchConfigurationAuthenticationMethodApiKeySecret {
    /**
     * The Key ID to used when accessing an enterprise Elasticsearch instance.
     */
    apiKeyId: string;
    /**
     * The secret associated with the API Key ID.
     */
    apiKeySecret: string;
}

export interface DestinationElasticsearchConfigurationAuthenticationMethodNone {
}

export interface DestinationElasticsearchConfigurationAuthenticationMethodUsernamePassword {
    /**
     * Basic auth password to access a secure Elasticsearch server
     */
    password: string;
    /**
     * Basic auth username to access a secure Elasticsearch server
     */
    username: string;
}

export interface DestinationElasticsearchConfigurationTunnelMethod {
    noTunnel?: outputs.DestinationElasticsearchConfigurationTunnelMethodNoTunnel;
    passwordAuthentication?: outputs.DestinationElasticsearchConfigurationTunnelMethodPasswordAuthentication;
    sshKeyAuthentication?: outputs.DestinationElasticsearchConfigurationTunnelMethodSshKeyAuthentication;
}

export interface DestinationElasticsearchConfigurationTunnelMethodNoTunnel {
}

export interface DestinationElasticsearchConfigurationTunnelMethodPasswordAuthentication {
    /**
     * Hostname of the jump server host that allows inbound ssh tunnel.
     */
    tunnelHost: string;
    /**
     * Port on the proxy/jump server that accepts inbound ssh connections. Default: 22
     */
    tunnelPort: number;
    /**
     * OS-level username for logging into the jump server host
     */
    tunnelUser: string;
    /**
     * OS-level password for logging into the jump server host
     */
    tunnelUserPassword: string;
}

export interface DestinationElasticsearchConfigurationTunnelMethodSshKeyAuthentication {
    /**
     * OS-level user account ssh key credentials in RSA PEM format ( created with ssh-keygen -t rsa -m PEM -f myuser_rsa )
     */
    sshKey: string;
    /**
     * Hostname of the jump server host that allows inbound ssh tunnel.
     */
    tunnelHost: string;
    /**
     * Port on the proxy/jump server that accepts inbound ssh connections. Default: 22
     */
    tunnelPort: number;
    /**
     * OS-level username for logging into the jump server host.
     */
    tunnelUser: string;
}

export interface DestinationElasticsearchResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.DestinationElasticsearchResourceAllocationDefault;
    jobSpecifics: outputs.DestinationElasticsearchResourceAllocationJobSpecific[];
}

export interface DestinationElasticsearchResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationElasticsearchResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.DestinationElasticsearchResourceAllocationJobSpecificResourceRequirements;
}

export interface DestinationElasticsearchResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationFireboltConfiguration {
    /**
     * Firebolt account to login.
     */
    account: string;
    /**
     * Firebolt service account ID.
     */
    clientId: string;
    /**
     * Firebolt secret, corresponding to the service account ID.
     */
    clientSecret: string;
    /**
     * The database to connect to.
     */
    database: string;
    /**
     * Engine name to connect to.
     */
    engine: string;
    /**
     * The host name of your Firebolt database.
     */
    host?: string;
    /**
     * Loading method used to select the way data will be uploaded to Firebolt
     */
    loadingMethod?: outputs.DestinationFireboltConfigurationLoadingMethod;
}

export interface DestinationFireboltConfigurationLoadingMethod {
    externalTableViaS3?: outputs.DestinationFireboltConfigurationLoadingMethodExternalTableViaS3;
    sqlInserts?: outputs.DestinationFireboltConfigurationLoadingMethodSqlInserts;
}

export interface DestinationFireboltConfigurationLoadingMethodExternalTableViaS3 {
    /**
     * AWS access key granting read and write access to S3.
     */
    awsKeyId: string;
    /**
     * Corresponding secret part of the AWS Key
     */
    awsKeySecret: string;
    /**
     * The name of the S3 bucket.
     */
    s3Bucket: string;
    /**
     * Region name of the S3 bucket.
     */
    s3Region: string;
}

export interface DestinationFireboltConfigurationLoadingMethodSqlInserts {
}

export interface DestinationFireboltResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.DestinationFireboltResourceAllocationDefault;
    jobSpecifics: outputs.DestinationFireboltResourceAllocationJobSpecific[];
}

export interface DestinationFireboltResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationFireboltResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.DestinationFireboltResourceAllocationJobSpecificResourceRequirements;
}

export interface DestinationFireboltResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationFirestoreConfiguration {
    /**
     * The contents of the JSON service account key. Check out the <a href="https://docs.airbyte.com/integrations/destinations/firestore">docs</a> if you need help generating this key. Default credentials will be used if this field is left empty.
     */
    credentialsJson?: string;
    /**
     * The GCP project ID for the project containing the target BigQuery dataset.
     */
    projectId: string;
}

export interface DestinationFirestoreResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.DestinationFirestoreResourceAllocationDefault;
    jobSpecifics: outputs.DestinationFirestoreResourceAllocationJobSpecific[];
}

export interface DestinationFirestoreResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationFirestoreResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.DestinationFirestoreResourceAllocationJobSpecificResourceRequirements;
}

export interface DestinationFirestoreResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationGcsConfiguration {
    /**
     * An HMAC key is a type of credential and can be associated with a service account or a user account in Cloud Storage. Read more <a href="https://cloud.google.com/storage/docs/authentication/hmackeys">here</a>.
     */
    credential: outputs.DestinationGcsConfigurationCredential;
    /**
     * Output data format. One of the following formats must be selected - <a href="https://cloud.google.com/bigquery/docs/loading-data-cloud-storage-avro#advantages_of_avro">AVRO</a> format, <a href="https://cloud.google.com/bigquery/docs/loading-data-cloud-storage-parquet#parquet_schemas">PARQUET</a> format, <a href="https://cloud.google.com/bigquery/docs/loading-data-cloud-storage-csv#loading_csv_data_into_a_table">CSV</a> format, or <a href="https://cloud.google.com/bigquery/docs/loading-data-cloud-storage-json#loading_json_data_into_a_new_table">JSONL</a> format.
     */
    format: outputs.DestinationGcsConfigurationFormat;
    /**
     * You can find the bucket name in the App Engine Admin console Application Settings page, under the label Google Cloud Storage Bucket. Read more <a href="https://cloud.google.com/storage/docs/naming-buckets">here</a>.
     */
    gcsBucketName: string;
    /**
     * GCS Bucket Path string Subdirectory under the above bucket to sync the data into.
     */
    gcsBucketPath: string;
    /**
     * Select a Region of the GCS Bucket. Read more <a href="https://cloud.google.com/storage/docs/locations">here</a>. Default: "us"; must be one of ["northamerica-northeast1", "northamerica-northeast2", "us-central1", "us-east1", "us-east4", "us-west1", "us-west2", "us-west3", "us-west4", "southamerica-east1", "southamerica-west1", "europe-central2", "europe-north1", "europe-west1", "europe-west2", "europe-west3", "europe-west4", "europe-west6", "asia-east1", "asia-east2", "asia-northeast1", "asia-northeast2", "asia-northeast3", "asia-south1", "asia-south2", "asia-southeast1", "asia-southeast2", "australia-southeast1", "australia-southeast2", "asia", "eu", "us", "asia1", "eur4", "nam4"]
     */
    gcsBucketRegion: string;
}

export interface DestinationGcsConfigurationCredential {
    hmacKey?: outputs.DestinationGcsConfigurationCredentialHmacKey;
}

export interface DestinationGcsConfigurationCredentialHmacKey {
    /**
     * Default: "HMAC_KEY"; must be "HMAC_KEY"
     */
    credentialType: string;
    /**
     * When linked to a service account, this ID is 61 characters long; when linked to a user account, it is 24 characters long. Read more <a href="https://cloud.google.com/storage/docs/authentication/hmackeys#overview">here</a>.
     */
    hmacKeyAccessId: string;
    /**
     * The corresponding secret for the access ID. It is a 40-character base-64 encoded string.  Read more <a href="https://cloud.google.com/storage/docs/authentication/hmackeys#secrets">here</a>.
     */
    hmacKeySecret: string;
}

export interface DestinationGcsConfigurationFormat {
    avroApacheAvro?: outputs.DestinationGcsConfigurationFormatAvroApacheAvro;
    csvCommaSeparatedValues?: outputs.DestinationGcsConfigurationFormatCsvCommaSeparatedValues;
    jsonLinesNewlineDelimitedJson?: outputs.DestinationGcsConfigurationFormatJsonLinesNewlineDelimitedJson;
    parquetColumnarStorage?: outputs.DestinationGcsConfigurationFormatParquetColumnarStorage;
}

export interface DestinationGcsConfigurationFormatAvroApacheAvro {
    /**
     * The compression algorithm used to compress data. Default to no compression.
     */
    compressionCodec: outputs.DestinationGcsConfigurationFormatAvroApacheAvroCompressionCodec;
    /**
     * Default: "Avro"; must be "Avro"
     */
    formatType: string;
}

export interface DestinationGcsConfigurationFormatAvroApacheAvroCompressionCodec {
    bzip2?: outputs.DestinationGcsConfigurationFormatAvroApacheAvroCompressionCodecBzip2;
    deflate?: outputs.DestinationGcsConfigurationFormatAvroApacheAvroCompressionCodecDeflate;
    noCompression?: outputs.DestinationGcsConfigurationFormatAvroApacheAvroCompressionCodecNoCompression;
    snappy?: outputs.DestinationGcsConfigurationFormatAvroApacheAvroCompressionCodecSnappy;
    xz?: outputs.DestinationGcsConfigurationFormatAvroApacheAvroCompressionCodecXz;
    zstandard?: outputs.DestinationGcsConfigurationFormatAvroApacheAvroCompressionCodecZstandard;
}

export interface DestinationGcsConfigurationFormatAvroApacheAvroCompressionCodecBzip2 {
    /**
     * Default: "bzip2"; must be "bzip2"
     */
    codec: string;
}

export interface DestinationGcsConfigurationFormatAvroApacheAvroCompressionCodecDeflate {
    /**
     * Default: "Deflate"; must be "Deflate"
     */
    codec: string;
    /**
     * 0: no compression & fastest, 9: best compression & slowest. Default: 0
     */
    compressionLevel: number;
}

export interface DestinationGcsConfigurationFormatAvroApacheAvroCompressionCodecNoCompression {
    /**
     * Default: "no compression"; must be "no compression"
     */
    codec: string;
}

export interface DestinationGcsConfigurationFormatAvroApacheAvroCompressionCodecSnappy {
    /**
     * Default: "snappy"; must be "snappy"
     */
    codec: string;
}

export interface DestinationGcsConfigurationFormatAvroApacheAvroCompressionCodecXz {
    /**
     * Default: "xz"; must be "xz"
     */
    codec: string;
    /**
     * The presets 0-3 are fast presets with medium compression. The presets 4-6 are fairly slow presets with high compression. The default preset is 6. The presets 7-9 are like the preset 6 but use bigger dictionaries and have higher compressor and decompressor memory requirements. Unless the uncompressed size of the file exceeds 8 MiB, 16 MiB, or 32 MiB, it is waste of memory to use the presets 7, 8, or 9, respectively. Read more <a href="https://commons.apache.org/proper/commons-compress/apidocs/org/apache/commons/compress/compressors/xz/XZCompressorOutputStream.html#XZCompressorOutputStream-java.io.OutputStream-int-">here</a> for details. Default: 6
     */
    compressionLevel: number;
}

export interface DestinationGcsConfigurationFormatAvroApacheAvroCompressionCodecZstandard {
    /**
     * Default: "zstandard"; must be "zstandard"
     */
    codec: string;
    /**
     * Negative levels are 'fast' modes akin to lz4 or snappy, levels above 9 are generally for archival purposes, and levels above 18 use a lot of memory. Default: 3
     */
    compressionLevel: number;
    /**
     * If true, include a checksum with each data block. Default: false
     */
    includeChecksum: boolean;
}

export interface DestinationGcsConfigurationFormatCsvCommaSeparatedValues {
    /**
     * Whether the output files should be compressed. If compression is selected, the output filename will have an extra extension (GZIP: ".csv.gz").
     */
    compression?: outputs.DestinationGcsConfigurationFormatCsvCommaSeparatedValuesCompression;
    /**
     * Whether the input JSON data should be normalized (flattened) in the output CSV. Please refer to docs for details. Default: "No flattening"; must be one of ["No flattening", "Root level flattening"]
     */
    flattening: string;
    /**
     * Default: "CSV"; must be "CSV"
     */
    formatType: string;
}

export interface DestinationGcsConfigurationFormatCsvCommaSeparatedValuesCompression {
    gzip?: outputs.DestinationGcsConfigurationFormatCsvCommaSeparatedValuesCompressionGzip;
    noCompression?: outputs.DestinationGcsConfigurationFormatCsvCommaSeparatedValuesCompressionNoCompression;
}

export interface DestinationGcsConfigurationFormatCsvCommaSeparatedValuesCompressionGzip {
    /**
     * Default: "GZIP"; must be "GZIP"
     */
    compressionType: string;
}

export interface DestinationGcsConfigurationFormatCsvCommaSeparatedValuesCompressionNoCompression {
    /**
     * Default: "No Compression"; must be "No Compression"
     */
    compressionType: string;
}

export interface DestinationGcsConfigurationFormatJsonLinesNewlineDelimitedJson {
    /**
     * Whether the output files should be compressed. If compression is selected, the output filename will have an extra extension (GZIP: ".jsonl.gz").
     */
    compression?: outputs.DestinationGcsConfigurationFormatJsonLinesNewlineDelimitedJsonCompression;
    /**
     * Default: "JSONL"; must be "JSONL"
     */
    formatType: string;
}

export interface DestinationGcsConfigurationFormatJsonLinesNewlineDelimitedJsonCompression {
    gzip?: outputs.DestinationGcsConfigurationFormatJsonLinesNewlineDelimitedJsonCompressionGzip;
    noCompression?: outputs.DestinationGcsConfigurationFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression;
}

export interface DestinationGcsConfigurationFormatJsonLinesNewlineDelimitedJsonCompressionGzip {
    /**
     * Default: "GZIP"; must be "GZIP"
     */
    compressionType: string;
}

export interface DestinationGcsConfigurationFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression {
    /**
     * Default: "No Compression"; must be "No Compression"
     */
    compressionType: string;
}

export interface DestinationGcsConfigurationFormatParquetColumnarStorage {
    /**
     * This is the size of a row group being buffered in memory. It limits the memory usage when writing. Larger values will improve the IO when reading, but consume more memory when writing. Default: 128 MB. Default: 128
     */
    blockSizeMb: number;
    /**
     * The compression algorithm used to compress data pages. Default: "UNCOMPRESSED"; must be one of ["UNCOMPRESSED", "SNAPPY", "GZIP", "LZO", "BROTLI", "LZ4", "ZSTD"]
     */
    compressionCodec: string;
    /**
     * Default: true. Default: true
     */
    dictionaryEncoding: boolean;
    /**
     * There is one dictionary page per column per row group when dictionary encoding is used. The dictionary page size works like the page size but for dictionary. Default: 1024 KB. Default: 1024
     */
    dictionaryPageSizeKb: number;
    /**
     * Default: "Parquet"; must be "Parquet"
     */
    formatType: string;
    /**
     * Maximum size allowed as padding to align row groups. This is also the minimum size of a row group. Default: 8 MB. Default: 8
     */
    maxPaddingSizeMb: number;
    /**
     * The page size is for compression. A block is composed of pages. A page is the smallest unit that must be read fully to access a single record. If this value is too small, the compression will deteriorate. Default: 1024 KB. Default: 1024
     */
    pageSizeKb: number;
}

export interface DestinationGcsResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.DestinationGcsResourceAllocationDefault;
    jobSpecifics: outputs.DestinationGcsResourceAllocationJobSpecific[];
}

export interface DestinationGcsResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationGcsResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.DestinationGcsResourceAllocationJobSpecificResourceRequirements;
}

export interface DestinationGcsResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationGoogleSheetsConfiguration {
    /**
     * Authentication method to access Google Sheets
     */
    credentials: outputs.DestinationGoogleSheetsConfigurationCredentials;
    /**
     * The link to your spreadsheet. See <a href='https://docs.airbyte.com/integrations/destinations/google-sheets#sheetlink'>this guide</a> for more details.
     */
    spreadsheetId: string;
}

export interface DestinationGoogleSheetsConfigurationCredentials {
    authenticateViaGoogleOAuth?: outputs.DestinationGoogleSheetsConfigurationCredentialsAuthenticateViaGoogleOAuth;
    serviceAccountKeyAuthentication?: outputs.DestinationGoogleSheetsConfigurationCredentialsServiceAccountKeyAuthentication;
}

export interface DestinationGoogleSheetsConfigurationCredentialsAuthenticateViaGoogleOAuth {
    /**
     * The Client ID of your Google Sheets developer application.
     */
    clientId: string;
    /**
     * The Client Secret of your Google Sheets developer application.
     */
    clientSecret: string;
    /**
     * The token for obtaining new access token.
     */
    refreshToken: string;
}

export interface DestinationGoogleSheetsConfigurationCredentialsServiceAccountKeyAuthentication {
    /**
     * Enter your service account key in JSON format. See the <a href='https://docs.airbyte.com/integrations/destinations/google-sheets#service-account'>docs</a> for more information on how to generate this key.
     */
    serviceAccountInfo: string;
}

export interface DestinationGoogleSheetsResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.DestinationGoogleSheetsResourceAllocationDefault;
    jobSpecifics: outputs.DestinationGoogleSheetsResourceAllocationJobSpecific[];
}

export interface DestinationGoogleSheetsResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationGoogleSheetsResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.DestinationGoogleSheetsResourceAllocationJobSpecificResourceRequirements;
}

export interface DestinationGoogleSheetsResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationMilvusConfiguration {
    /**
     * Embedding configuration
     */
    embedding: outputs.DestinationMilvusConfigurationEmbedding;
    /**
     * Indexing configuration
     */
    indexing: outputs.DestinationMilvusConfigurationIndexing;
    /**
     * Do not store the text that gets embedded along with the vector and the metadata in the destination. If set to true, only the vector and the metadata will be stored - in this case raw text for LLM use cases needs to be retrieved from another source. Default: false
     */
    omitRawText: boolean;
    processing: outputs.DestinationMilvusConfigurationProcessing;
}

export interface DestinationMilvusConfigurationEmbedding {
    /**
     * Use the Azure-hosted OpenAI API to embed text. This option is using the text-embedding-ada-002 model with 1536 embedding dimensions.
     */
    azureOpenAi?: outputs.DestinationMilvusConfigurationEmbeddingAzureOpenAi;
    /**
     * Use the Cohere API to embed text.
     */
    cohere?: outputs.DestinationMilvusConfigurationEmbeddingCohere;
    /**
     * Use a fake embedding made out of random vectors with 1536 embedding dimensions. This is useful for testing the data pipeline without incurring any costs.
     */
    fake?: outputs.DestinationMilvusConfigurationEmbeddingFake;
    /**
     * Use the OpenAI API to embed text. This option is using the text-embedding-ada-002 model with 1536 embedding dimensions.
     */
    openAi?: outputs.DestinationMilvusConfigurationEmbeddingOpenAi;
    /**
     * Use a service that's compatible with the OpenAI API to embed text.
     */
    openAiCompatible?: outputs.DestinationMilvusConfigurationEmbeddingOpenAiCompatible;
}

export interface DestinationMilvusConfigurationEmbeddingAzureOpenAi {
    /**
     * The base URL for your Azure OpenAI resource.  You can find this in the Azure portal under your Azure OpenAI resource
     */
    apiBase: string;
    /**
     * The deployment for your Azure OpenAI resource.  You can find this in the Azure portal under your Azure OpenAI resource
     */
    deployment: string;
    /**
     * The API key for your Azure OpenAI resource.  You can find this in the Azure portal under your Azure OpenAI resource
     */
    openaiKey: string;
}

export interface DestinationMilvusConfigurationEmbeddingCohere {
    cohereKey: string;
}

export interface DestinationMilvusConfigurationEmbeddingFake {
}

export interface DestinationMilvusConfigurationEmbeddingOpenAi {
    openaiKey: string;
}

export interface DestinationMilvusConfigurationEmbeddingOpenAiCompatible {
    /**
     * Default: ""
     */
    apiKey: string;
    /**
     * The base URL for your OpenAI-compatible service
     */
    baseUrl: string;
    /**
     * The number of dimensions the embedding model is generating
     */
    dimensions: number;
    /**
     * The name of the model to use for embedding. Default: "text-embedding-ada-002"
     */
    modelName: string;
}

export interface DestinationMilvusConfigurationIndexing {
    /**
     * Authentication method
     */
    auth: outputs.DestinationMilvusConfigurationIndexingAuth;
    /**
     * The collection to load data into
     */
    collection: string;
    /**
     * The database to connect to. Default: ""
     */
    db: string;
    /**
     * The public endpoint of the Milvus instance.
     */
    host: string;
    /**
     * The field in the entity that contains the embedded text. Default: "text"
     */
    textField: string;
    /**
     * The field in the entity that contains the vector. Default: "vector"
     */
    vectorField: string;
}

export interface DestinationMilvusConfigurationIndexingAuth {
    /**
     * Authenticate using an API token (suitable for Zilliz Cloud)
     */
    apiToken?: outputs.DestinationMilvusConfigurationIndexingAuthApiToken;
    /**
     * Do not authenticate (suitable for locally running test clusters, do not use for clusters with public IP addresses)
     */
    noAuth?: outputs.DestinationMilvusConfigurationIndexingAuthNoAuth;
    /**
     * Authenticate using username and password (suitable for self-managed Milvus clusters)
     */
    usernamePassword?: outputs.DestinationMilvusConfigurationIndexingAuthUsernamePassword;
}

export interface DestinationMilvusConfigurationIndexingAuthApiToken {
    /**
     * API Token for the Milvus instance
     */
    token: string;
}

export interface DestinationMilvusConfigurationIndexingAuthNoAuth {
}

export interface DestinationMilvusConfigurationIndexingAuthUsernamePassword {
    /**
     * Password for the Milvus instance
     */
    password: string;
    /**
     * Username for the Milvus instance
     */
    username: string;
}

export interface DestinationMilvusConfigurationProcessing {
    /**
     * Size of overlap between chunks in tokens to store in vector store to better capture relevant context. Default: 0
     */
    chunkOverlap: number;
    /**
     * Size of chunks in tokens to store in vector store (make sure it is not too big for the context if your LLM)
     */
    chunkSize: number;
    /**
     * List of fields to rename. Not applicable for nested fields, but can be used to rename fields already flattened via dot notation.
     */
    fieldNameMappings?: outputs.DestinationMilvusConfigurationProcessingFieldNameMapping[];
    /**
     * List of fields in the record that should be stored as metadata. The field list is applied to all streams in the same way and non-existing fields are ignored. If none are defined, all fields are considered metadata fields. When specifying text fields, you can access nested fields in the record by using dot notation, e.g. `user.name` will access the `name` field in the `user` object. It's also possible to use wildcards to access all fields in an object, e.g. `users.*.name` will access all `names` fields in all entries of the `users` array. When specifying nested paths, all matching values are flattened into an array set to a field named by the path.
     */
    metadataFields: string[];
    /**
     * List of fields in the record that should be used to calculate the embedding. The field list is applied to all streams in the same way and non-existing fields are ignored. If none are defined, all fields are considered text fields. When specifying text fields, you can access nested fields in the record by using dot notation, e.g. `user.name` will access the `name` field in the `user` object. It's also possible to use wildcards to access all fields in an object, e.g. `users.*.name` will access all `names` fields in all entries of the `users` array.
     */
    textFields: string[];
    /**
     * Split text fields into chunks based on the specified method.
     */
    textSplitter?: outputs.DestinationMilvusConfigurationProcessingTextSplitter;
}

export interface DestinationMilvusConfigurationProcessingFieldNameMapping {
    /**
     * The field name in the source
     */
    fromField: string;
    /**
     * The field name to use in the destination
     */
    toField: string;
}

export interface DestinationMilvusConfigurationProcessingTextSplitter {
    /**
     * Split the text by Markdown headers down to the specified header level. If the chunk size fits multiple sections, they will be combined into a single chunk.
     */
    byMarkdownHeader?: outputs.DestinationMilvusConfigurationProcessingTextSplitterByMarkdownHeader;
    /**
     * Split the text by suitable delimiters based on the programming language. This is useful for splitting code into chunks.
     */
    byProgrammingLanguage?: outputs.DestinationMilvusConfigurationProcessingTextSplitterByProgrammingLanguage;
    /**
     * Split the text by the list of separators until the chunk size is reached, using the earlier mentioned separators where possible. This is useful for splitting text fields by paragraphs, sentences, words, etc.
     */
    bySeparator?: outputs.DestinationMilvusConfigurationProcessingTextSplitterBySeparator;
}

export interface DestinationMilvusConfigurationProcessingTextSplitterByMarkdownHeader {
    /**
     * Level of markdown headers to split text fields by. Headings down to the specified level will be used as split points. Default: 1
     */
    splitLevel: number;
}

export interface DestinationMilvusConfigurationProcessingTextSplitterByProgrammingLanguage {
    /**
     * Split code in suitable places based on the programming language. must be one of ["cpp", "go", "java", "js", "php", "proto", "python", "rst", "ruby", "rust", "scala", "swift", "markdown", "latex", "html", "sol"]
     */
    language: string;
}

export interface DestinationMilvusConfigurationProcessingTextSplitterBySeparator {
    /**
     * Whether to keep the separator in the resulting chunks. Default: false
     */
    keepSeparator: boolean;
    /**
     * List of separator strings to split text fields by. The separator itself needs to be wrapped in double quotes, e.g. to split by the dot character, use ".". To split by a newline, use "\n".
     */
    separators?: string[];
}

export interface DestinationMilvusResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.DestinationMilvusResourceAllocationDefault;
    jobSpecifics: outputs.DestinationMilvusResourceAllocationJobSpecific[];
}

export interface DestinationMilvusResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationMilvusResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.DestinationMilvusResourceAllocationJobSpecificResourceRequirements;
}

export interface DestinationMilvusResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationMongodbConfiguration {
    /**
     * Authorization type.
     */
    authType: outputs.DestinationMongodbConfigurationAuthType;
    /**
     * Name of the database.
     */
    database: string;
    /**
     * MongoDb instance to connect to. For MongoDB Atlas and Replica Set TLS connection is used by default.
     */
    instanceType?: outputs.DestinationMongodbConfigurationInstanceType;
    /**
     * Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
     */
    tunnelMethod?: outputs.DestinationMongodbConfigurationTunnelMethod;
}

export interface DestinationMongodbConfigurationAuthType {
    /**
     * Login/Password.
     */
    loginPassword?: outputs.DestinationMongodbConfigurationAuthTypeLoginPassword;
    /**
     * None.
     */
    none?: outputs.DestinationMongodbConfigurationAuthTypeNone;
}

export interface DestinationMongodbConfigurationAuthTypeLoginPassword {
    /**
     * Password associated with the username.
     */
    password: string;
    /**
     * Username to use to access the database.
     */
    username: string;
}

export interface DestinationMongodbConfigurationAuthTypeNone {
}

export interface DestinationMongodbConfigurationInstanceType {
    mongoDbAtlas?: outputs.DestinationMongodbConfigurationInstanceTypeMongoDbAtlas;
    replicaSet?: outputs.DestinationMongodbConfigurationInstanceTypeReplicaSet;
    standaloneMongoDbInstance?: outputs.DestinationMongodbConfigurationInstanceTypeStandaloneMongoDbInstance;
}

export interface DestinationMongodbConfigurationInstanceTypeMongoDbAtlas {
    /**
     * URL of a cluster to connect to.
     */
    clusterUrl: string;
    /**
     * Default: "atlas"; must be "atlas"
     */
    instance: string;
}

export interface DestinationMongodbConfigurationInstanceTypeReplicaSet {
    /**
     * Default: "replica"; must be "replica"
     */
    instance: string;
    /**
     * A replica set name.
     */
    replicaSet?: string;
    /**
     * The members of a replica set. Please specify `host`:`port` of each member seperated by comma.
     */
    serverAddresses: string;
}

export interface DestinationMongodbConfigurationInstanceTypeStandaloneMongoDbInstance {
    /**
     * The Host of a Mongo database to be replicated.
     */
    host: string;
    /**
     * Default: "standalone"; must be "standalone"
     */
    instance: string;
    /**
     * The Port of a Mongo database to be replicated. Default: 27017
     */
    port: number;
    /**
     * Indicates whether TLS encryption protocol will be used to connect to MongoDB. It is recommended to use TLS connection if possible. For more information see <a href="https://docs.airbyte.com/integrations/sources/mongodb-v2">documentation</a>. Default: false
     */
    tls: boolean;
}

export interface DestinationMongodbConfigurationTunnelMethod {
    noTunnel?: outputs.DestinationMongodbConfigurationTunnelMethodNoTunnel;
    passwordAuthentication?: outputs.DestinationMongodbConfigurationTunnelMethodPasswordAuthentication;
    sshKeyAuthentication?: outputs.DestinationMongodbConfigurationTunnelMethodSshKeyAuthentication;
}

export interface DestinationMongodbConfigurationTunnelMethodNoTunnel {
}

export interface DestinationMongodbConfigurationTunnelMethodPasswordAuthentication {
    /**
     * Hostname of the jump server host that allows inbound ssh tunnel.
     */
    tunnelHost: string;
    /**
     * Port on the proxy/jump server that accepts inbound ssh connections. Default: 22
     */
    tunnelPort: number;
    /**
     * OS-level username for logging into the jump server host
     */
    tunnelUser: string;
    /**
     * OS-level password for logging into the jump server host
     */
    tunnelUserPassword: string;
}

export interface DestinationMongodbConfigurationTunnelMethodSshKeyAuthentication {
    /**
     * OS-level user account ssh key credentials in RSA PEM format ( created with ssh-keygen -t rsa -m PEM -f myuser_rsa )
     */
    sshKey: string;
    /**
     * Hostname of the jump server host that allows inbound ssh tunnel.
     */
    tunnelHost: string;
    /**
     * Port on the proxy/jump server that accepts inbound ssh connections. Default: 22
     */
    tunnelPort: number;
    /**
     * OS-level username for logging into the jump server host.
     */
    tunnelUser: string;
}

export interface DestinationMongodbResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.DestinationMongodbResourceAllocationDefault;
    jobSpecifics: outputs.DestinationMongodbResourceAllocationJobSpecific[];
}

export interface DestinationMongodbResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationMongodbResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.DestinationMongodbResourceAllocationJobSpecificResourceRequirements;
}

export interface DestinationMongodbResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationMotherduckConfiguration {
    /**
     * Path to a .duckdb file or 'md:<DATABASE_NAME>' to connect to a MotherDuck database. If 'md:' is specified without a database name, the default MotherDuck database name ('my_db') will be used. Default: "md:"
     */
    destinationPath: string;
    /**
     * API access token to use for authentication to a MotherDuck database.
     */
    motherduckApiKey: string;
    /**
     * Database schema name, defaults to 'main' if not specified.
     */
    schema?: string;
}

export interface DestinationMotherduckResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.DestinationMotherduckResourceAllocationDefault;
    jobSpecifics: outputs.DestinationMotherduckResourceAllocationJobSpecific[];
}

export interface DestinationMotherduckResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationMotherduckResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.DestinationMotherduckResourceAllocationJobSpecificResourceRequirements;
}

export interface DestinationMotherduckResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationMssqlConfiguration {
    /**
     * The name of the MSSQL database.
     */
    database: string;
    /**
     * The host name of the MSSQL database.
     */
    host: string;
    /**
     * Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '&'. (example: key1=value1&key2=value2&key3=value3).
     */
    jdbcUrlParams?: string;
    /**
     * Specifies the type of load mechanism (e.g., BULK, INSERT) and its associated configuration.
     */
    loadType: outputs.DestinationMssqlConfigurationLoadType;
    /**
     * The password associated with this username.
     */
    password?: string;
    /**
     * The port of the MSSQL database.
     */
    port: number;
    /**
     * The default schema tables are written to if the source does not specify a namespace. The usual value for this field is "public". Default: "public"
     */
    schema: string;
    /**
     * The encryption method which is used to communicate with the database.
     */
    sslMethod: outputs.DestinationMssqlConfigurationSslMethod;
    /**
     * The username which is used to access the database.
     */
    user: string;
}

export interface DestinationMssqlConfigurationLoadType {
    /**
     * Configuration details for using the BULK loading mechanism.
     */
    bulkLoad?: outputs.DestinationMssqlConfigurationLoadTypeBulkLoad;
    /**
     * Configuration details for using the INSERT loading mechanism.
     */
    insertLoad?: outputs.DestinationMssqlConfigurationLoadTypeInsertLoad;
}

export interface DestinationMssqlConfigurationLoadTypeBulkLoad {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * The name of the Azure Blob Storage account. See: https://learn.microsoft.com/azure/storage/blobs/storage-blobs-introduction#storage-accounts
     */
    azureBlobStorageAccountName: string;
    /**
     * The name of the Azure Blob Storage container. See: https://learn.microsoft.com/azure/storage/blobs/storage-blobs-introduction#containers
     */
    azureBlobStorageContainerName: string;
    /**
     * Specifies the external data source name configured in MSSQL, which references the Azure Blob container. See: https://learn.microsoft.com/sql/t-sql/statements/bulk-insert-transact-sql
     */
    bulkLoadDataSource: string;
    /**
     * When enabled, Airbyte will validate all values before loading them into the destination table. This provides stronger data integrity guarantees but may significantly impact performance. Default: false
     */
    bulkLoadValidateValuesPreLoad: boolean;
    /**
     * Default: "BULK"; must be "BULK"
     */
    loadType: string;
    /**
     * A shared access signature (SAS) provides secure delegated access to resources in your storage account. See: https://learn.microsoft.com/azure/storage/common/storage-sas-overview
     */
    sharedAccessSignature: string;
}

export interface DestinationMssqlConfigurationLoadTypeInsertLoad {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * Default: "INSERT"; must be "INSERT"
     */
    loadType: string;
}

export interface DestinationMssqlConfigurationSslMethod {
    /**
     * Use the certificate provided by the server without verification. (For testing purposes only!)
     */
    encryptedTrustServerCertificate?: outputs.DestinationMssqlConfigurationSslMethodEncryptedTrustServerCertificate;
    /**
     * Verify and use the certificate provided by the server.
     */
    encryptedVerifyCertificate?: outputs.DestinationMssqlConfigurationSslMethodEncryptedVerifyCertificate;
    /**
     * The data transfer will not be encrypted.
     */
    unencrypted?: outputs.DestinationMssqlConfigurationSslMethodUnencrypted;
}

export interface DestinationMssqlConfigurationSslMethodEncryptedTrustServerCertificate {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * Default: "encrypted_trust_server_certificate"; must be "encrypted_trust_server_certificate"
     */
    name: string;
}

export interface DestinationMssqlConfigurationSslMethodEncryptedVerifyCertificate {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * Specifies the host name of the server. The value of this property must match the subject property of the certificate.
     */
    hostNameInCertificate?: string;
    /**
     * Default: "encrypted_verify_certificate"; must be "encrypted_verify_certificate"
     */
    name: string;
    /**
     * Specifies the name of the trust store.
     */
    trustStoreName?: string;
    /**
     * Specifies the password of the trust store.
     */
    trustStorePassword?: string;
}

export interface DestinationMssqlConfigurationSslMethodUnencrypted {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * Default: "unencrypted"; must be "unencrypted"
     */
    name: string;
}

export interface DestinationMssqlResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.DestinationMssqlResourceAllocationDefault;
    jobSpecifics: outputs.DestinationMssqlResourceAllocationJobSpecific[];
}

export interface DestinationMssqlResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationMssqlResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.DestinationMssqlResourceAllocationJobSpecificResourceRequirements;
}

export interface DestinationMssqlResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationMssqlV2Configuration {
    /**
     * The name of the MSSQL database.
     */
    database: string;
    /**
     * The host name of the MSSQL database.
     */
    host: string;
    /**
     * Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '&'. (example: key1=value1&key2=value2&key3=value3).
     */
    jdbcUrlParams?: string;
    /**
     * Specifies the type of load mechanism (e.g., BULK, INSERT) and its associated configuration.
     */
    loadType: outputs.DestinationMssqlV2ConfigurationLoadType;
    /**
     * The password associated with this username.
     */
    password?: string;
    /**
     * The port of the MSSQL database.
     */
    port: number;
    /**
     * The default schema tables are written to if the source does not specify a namespace. The usual value for this field is "public". Default: "public"
     */
    schema: string;
    /**
     * The encryption method which is used to communicate with the database.
     */
    sslMethod: outputs.DestinationMssqlV2ConfigurationSslMethod;
    /**
     * The username which is used to access the database.
     */
    user: string;
}

export interface DestinationMssqlV2ConfigurationLoadType {
    /**
     * Configuration details for using the BULK loading mechanism.
     */
    bulkLoad?: outputs.DestinationMssqlV2ConfigurationLoadTypeBulkLoad;
    /**
     * Configuration details for using the INSERT loading mechanism.
     */
    insertLoad?: outputs.DestinationMssqlV2ConfigurationLoadTypeInsertLoad;
}

export interface DestinationMssqlV2ConfigurationLoadTypeBulkLoad {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * The name of the Azure Blob Storage account. See: https://learn.microsoft.com/azure/storage/blobs/storage-blobs-introduction#storage-accounts
     */
    azureBlobStorageAccountName: string;
    /**
     * The name of the Azure Blob Storage container. See: https://learn.microsoft.com/azure/storage/blobs/storage-blobs-introduction#containers
     */
    azureBlobStorageContainerName: string;
    /**
     * Specifies the external data source name configured in MSSQL, which references the Azure Blob container. See: https://learn.microsoft.com/sql/t-sql/statements/bulk-insert-transact-sql
     */
    bulkLoadDataSource: string;
    /**
     * When enabled, Airbyte will validate all values before loading them into the destination table. This provides stronger data integrity guarantees but may significantly impact performance. Default: false
     */
    bulkLoadValidateValuesPreLoad: boolean;
    /**
     * Default: "BULK"; must be "BULK"
     */
    loadType: string;
    /**
     * A shared access signature (SAS) provides secure delegated access to resources in your storage account. See: https://learn.microsoft.com/azure/storage/common/storage-sas-overview
     */
    sharedAccessSignature: string;
}

export interface DestinationMssqlV2ConfigurationLoadTypeInsertLoad {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * Default: "INSERT"; must be "INSERT"
     */
    loadType: string;
}

export interface DestinationMssqlV2ConfigurationSslMethod {
    /**
     * Use the certificate provided by the server without verification. (For testing purposes only!)
     */
    encryptedTrustServerCertificate?: outputs.DestinationMssqlV2ConfigurationSslMethodEncryptedTrustServerCertificate;
    /**
     * Verify and use the certificate provided by the server.
     */
    encryptedVerifyCertificate?: outputs.DestinationMssqlV2ConfigurationSslMethodEncryptedVerifyCertificate;
    /**
     * The data transfer will not be encrypted.
     */
    unencrypted?: outputs.DestinationMssqlV2ConfigurationSslMethodUnencrypted;
}

export interface DestinationMssqlV2ConfigurationSslMethodEncryptedTrustServerCertificate {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * Default: "encrypted_trust_server_certificate"; must be "encrypted_trust_server_certificate"
     */
    name: string;
}

export interface DestinationMssqlV2ConfigurationSslMethodEncryptedVerifyCertificate {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * Specifies the host name of the server. The value of this property must match the subject property of the certificate.
     */
    hostNameInCertificate?: string;
    /**
     * Default: "encrypted_verify_certificate"; must be "encrypted_verify_certificate"
     */
    name: string;
    /**
     * Specifies the name of the trust store.
     */
    trustStoreName?: string;
    /**
     * Specifies the password of the trust store.
     */
    trustStorePassword?: string;
}

export interface DestinationMssqlV2ConfigurationSslMethodUnencrypted {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * Default: "unencrypted"; must be "unencrypted"
     */
    name: string;
}

export interface DestinationMssqlV2ResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.DestinationMssqlV2ResourceAllocationDefault;
    jobSpecifics: outputs.DestinationMssqlV2ResourceAllocationJobSpecific[];
}

export interface DestinationMssqlV2ResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationMssqlV2ResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.DestinationMssqlV2ResourceAllocationJobSpecificResourceRequirements;
}

export interface DestinationMssqlV2ResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationMysqlConfiguration {
    /**
     * Name of the database.
     */
    database: string;
    /**
     * Disable Writing Final Tables. WARNING! The data format in _airbyte_data is likely stable but there are no guarantees that other metadata columns will remain the same in future versions. Default: false
     */
    disableTypeDedupe: boolean;
    /**
     * Hostname of the database.
     */
    host: string;
    /**
     * Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '&'. (example: key1=value1&key2=value2&key3=value3).
     */
    jdbcUrlParams?: string;
    /**
     * Password associated with the username.
     */
    password?: string;
    /**
     * Port of the database. Default: 3306
     */
    port: number;
    /**
     * The database to write raw tables into
     */
    rawDataSchema?: string;
    /**
     * Encrypt data using SSL. Default: true
     */
    ssl: boolean;
    /**
     * Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
     */
    tunnelMethod?: outputs.DestinationMysqlConfigurationTunnelMethod;
    /**
     * Username to use to access the database.
     */
    username: string;
}

export interface DestinationMysqlConfigurationTunnelMethod {
    noTunnel?: outputs.DestinationMysqlConfigurationTunnelMethodNoTunnel;
    passwordAuthentication?: outputs.DestinationMysqlConfigurationTunnelMethodPasswordAuthentication;
    sshKeyAuthentication?: outputs.DestinationMysqlConfigurationTunnelMethodSshKeyAuthentication;
}

export interface DestinationMysqlConfigurationTunnelMethodNoTunnel {
}

export interface DestinationMysqlConfigurationTunnelMethodPasswordAuthentication {
    /**
     * Hostname of the jump server host that allows inbound ssh tunnel.
     */
    tunnelHost: string;
    /**
     * Port on the proxy/jump server that accepts inbound ssh connections. Default: 22
     */
    tunnelPort: number;
    /**
     * OS-level username for logging into the jump server host
     */
    tunnelUser: string;
    /**
     * OS-level password for logging into the jump server host
     */
    tunnelUserPassword: string;
}

export interface DestinationMysqlConfigurationTunnelMethodSshKeyAuthentication {
    /**
     * OS-level user account ssh key credentials in RSA PEM format ( created with ssh-keygen -t rsa -m PEM -f myuser_rsa )
     */
    sshKey: string;
    /**
     * Hostname of the jump server host that allows inbound ssh tunnel.
     */
    tunnelHost: string;
    /**
     * Port on the proxy/jump server that accepts inbound ssh connections. Default: 22
     */
    tunnelPort: number;
    /**
     * OS-level username for logging into the jump server host.
     */
    tunnelUser: string;
}

export interface DestinationMysqlResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.DestinationMysqlResourceAllocationDefault;
    jobSpecifics: outputs.DestinationMysqlResourceAllocationJobSpecific[];
}

export interface DestinationMysqlResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationMysqlResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.DestinationMysqlResourceAllocationJobSpecificResourceRequirements;
}

export interface DestinationMysqlResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationOracleConfiguration {
    /**
     * The encryption method which is used when communicating with the database.
     */
    encryption?: outputs.DestinationOracleConfigurationEncryption;
    /**
     * The hostname of the database.
     */
    host: string;
    /**
     * Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '&'. (example: key1=value1&key2=value2&key3=value3).
     */
    jdbcUrlParams?: string;
    /**
     * The password associated with the username.
     */
    password?: string;
    /**
     * The port of the database. Default: 1521
     */
    port: number;
    /**
     * The schema to write raw tables into (default: airbyte_internal)
     */
    rawDataSchema?: string;
    /**
     * The default schema is used as the target schema for all statements issued from the connection that do not explicitly specify a schema name. The usual value for this field is "airbyte".  In Oracle, schemas and users are the same thing, so the "user" parameter is used as the login credentials and this is used for the default Airbyte message schema. Default: "airbyte"
     */
    schema: string;
    /**
     * The System Identifier uniquely distinguishes the instance from any other instance on the same computer.
     */
    sid: string;
    /**
     * Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
     */
    tunnelMethod?: outputs.DestinationOracleConfigurationTunnelMethod;
    /**
     * The username to access the database. This user must have CREATE USER privileges in the database.
     */
    username: string;
}

export interface DestinationOracleConfigurationEncryption {
    /**
     * The native network encryption gives you the ability to encrypt database connections, without the configuration overhead of TCP/IP and SSL/TLS and without the need to open and listen on different ports.
     */
    nativeNetworkEncryptionNne?: outputs.DestinationOracleConfigurationEncryptionNativeNetworkEncryptionNne;
    /**
     * Verify and use the certificate provided by the server.
     */
    tlsEncryptedVerifyCertificate?: outputs.DestinationOracleConfigurationEncryptionTlsEncryptedVerifyCertificate;
    /**
     * Data transfer will not be encrypted.
     */
    unencrypted?: outputs.DestinationOracleConfigurationEncryptionUnencrypted;
}

export interface DestinationOracleConfigurationEncryptionNativeNetworkEncryptionNne {
    /**
     * This parameter defines the database encryption algorithm. Default: "AES256"; must be one of ["AES256", "RC4_56", "3DES168"]
     */
    encryptionAlgorithm: string;
}

export interface DestinationOracleConfigurationEncryptionTlsEncryptedVerifyCertificate {
    /**
     * Privacy Enhanced Mail (PEM) files are concatenated certificate containers frequently used in certificate installations.
     */
    sslCertificate: string;
}

export interface DestinationOracleConfigurationEncryptionUnencrypted {
}

export interface DestinationOracleConfigurationTunnelMethod {
    noTunnel?: outputs.DestinationOracleConfigurationTunnelMethodNoTunnel;
    passwordAuthentication?: outputs.DestinationOracleConfigurationTunnelMethodPasswordAuthentication;
    sshKeyAuthentication?: outputs.DestinationOracleConfigurationTunnelMethodSshKeyAuthentication;
}

export interface DestinationOracleConfigurationTunnelMethodNoTunnel {
}

export interface DestinationOracleConfigurationTunnelMethodPasswordAuthentication {
    /**
     * Hostname of the jump server host that allows inbound ssh tunnel.
     */
    tunnelHost: string;
    /**
     * Port on the proxy/jump server that accepts inbound ssh connections. Default: 22
     */
    tunnelPort: number;
    /**
     * OS-level username for logging into the jump server host
     */
    tunnelUser: string;
    /**
     * OS-level password for logging into the jump server host
     */
    tunnelUserPassword: string;
}

export interface DestinationOracleConfigurationTunnelMethodSshKeyAuthentication {
    /**
     * OS-level user account ssh key credentials in RSA PEM format ( created with ssh-keygen -t rsa -m PEM -f myuser_rsa )
     */
    sshKey: string;
    /**
     * Hostname of the jump server host that allows inbound ssh tunnel.
     */
    tunnelHost: string;
    /**
     * Port on the proxy/jump server that accepts inbound ssh connections. Default: 22
     */
    tunnelPort: number;
    /**
     * OS-level username for logging into the jump server host.
     */
    tunnelUser: string;
}

export interface DestinationOracleResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.DestinationOracleResourceAllocationDefault;
    jobSpecifics: outputs.DestinationOracleResourceAllocationJobSpecific[];
}

export interface DestinationOracleResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationOracleResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.DestinationOracleResourceAllocationJobSpecificResourceRequirements;
}

export interface DestinationOracleResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationPgvectorConfiguration {
    /**
     * Embedding configuration
     */
    embedding: outputs.DestinationPgvectorConfigurationEmbedding;
    /**
     * Postgres can be used to store vector data and retrieve embeddings.
     */
    indexing: outputs.DestinationPgvectorConfigurationIndexing;
    /**
     * Do not store the text that gets embedded along with the vector and the metadata in the destination. If set to true, only the vector and the metadata will be stored - in this case raw text for LLM use cases needs to be retrieved from another source. Default: false
     */
    omitRawText: boolean;
    processing: outputs.DestinationPgvectorConfigurationProcessing;
}

export interface DestinationPgvectorConfigurationEmbedding {
    /**
     * Use the Azure-hosted OpenAI API to embed text. This option is using the text-embedding-ada-002 model with 1536 embedding dimensions.
     */
    azureOpenAi?: outputs.DestinationPgvectorConfigurationEmbeddingAzureOpenAi;
    /**
     * Use the Cohere API to embed text.
     */
    cohere?: outputs.DestinationPgvectorConfigurationEmbeddingCohere;
    /**
     * Use a fake embedding made out of random vectors with 1536 embedding dimensions. This is useful for testing the data pipeline without incurring any costs.
     */
    fake?: outputs.DestinationPgvectorConfigurationEmbeddingFake;
    /**
     * Use the OpenAI API to embed text. This option is using the text-embedding-ada-002 model with 1536 embedding dimensions.
     */
    openAi?: outputs.DestinationPgvectorConfigurationEmbeddingOpenAi;
    /**
     * Use a service that's compatible with the OpenAI API to embed text.
     */
    openAiCompatible?: outputs.DestinationPgvectorConfigurationEmbeddingOpenAiCompatible;
}

export interface DestinationPgvectorConfigurationEmbeddingAzureOpenAi {
    /**
     * The base URL for your Azure OpenAI resource.  You can find this in the Azure portal under your Azure OpenAI resource
     */
    apiBase: string;
    /**
     * The deployment for your Azure OpenAI resource.  You can find this in the Azure portal under your Azure OpenAI resource
     */
    deployment: string;
    /**
     * The API key for your Azure OpenAI resource.  You can find this in the Azure portal under your Azure OpenAI resource
     */
    openaiKey: string;
}

export interface DestinationPgvectorConfigurationEmbeddingCohere {
    cohereKey: string;
}

export interface DestinationPgvectorConfigurationEmbeddingFake {
}

export interface DestinationPgvectorConfigurationEmbeddingOpenAi {
    openaiKey: string;
}

export interface DestinationPgvectorConfigurationEmbeddingOpenAiCompatible {
    /**
     * Default: ""
     */
    apiKey: string;
    /**
     * The base URL for your OpenAI-compatible service
     */
    baseUrl: string;
    /**
     * The number of dimensions the embedding model is generating
     */
    dimensions: number;
    /**
     * The name of the model to use for embedding. Default: "text-embedding-ada-002"
     */
    modelName: string;
}

export interface DestinationPgvectorConfigurationIndexing {
    credentials: outputs.DestinationPgvectorConfigurationIndexingCredentials;
    /**
     * Enter the name of the database that you want to sync data into
     */
    database: string;
    /**
     * Enter the name of the default schema. Default: "public"
     */
    defaultSchema: string;
    /**
     * Enter the account name you want to use to access the database.
     */
    host: string;
    /**
     * Enter the port you want to use to access the database. Default: 5432
     */
    port: number;
    /**
     * Enter the name of the user you want to use to access the database
     */
    username: string;
}

export interface DestinationPgvectorConfigurationIndexingCredentials {
    /**
     * Enter the password you want to use to access the database
     */
    password: string;
}

export interface DestinationPgvectorConfigurationProcessing {
    /**
     * Size of overlap between chunks in tokens to store in vector store to better capture relevant context. Default: 0
     */
    chunkOverlap: number;
    /**
     * Size of chunks in tokens to store in vector store (make sure it is not too big for the context if your LLM)
     */
    chunkSize: number;
    /**
     * List of fields to rename. Not applicable for nested fields, but can be used to rename fields already flattened via dot notation.
     */
    fieldNameMappings?: outputs.DestinationPgvectorConfigurationProcessingFieldNameMapping[];
    /**
     * List of fields in the record that should be stored as metadata. The field list is applied to all streams in the same way and non-existing fields are ignored. If none are defined, all fields are considered metadata fields. When specifying text fields, you can access nested fields in the record by using dot notation, e.g. `user.name` will access the `name` field in the `user` object. It's also possible to use wildcards to access all fields in an object, e.g. `users.*.name` will access all `names` fields in all entries of the `users` array. When specifying nested paths, all matching values are flattened into an array set to a field named by the path.
     */
    metadataFields: string[];
    /**
     * List of fields in the record that should be used to calculate the embedding. The field list is applied to all streams in the same way and non-existing fields are ignored. If none are defined, all fields are considered text fields. When specifying text fields, you can access nested fields in the record by using dot notation, e.g. `user.name` will access the `name` field in the `user` object. It's also possible to use wildcards to access all fields in an object, e.g. `users.*.name` will access all `names` fields in all entries of the `users` array.
     */
    textFields: string[];
    /**
     * Split text fields into chunks based on the specified method.
     */
    textSplitter?: outputs.DestinationPgvectorConfigurationProcessingTextSplitter;
}

export interface DestinationPgvectorConfigurationProcessingFieldNameMapping {
    /**
     * The field name in the source
     */
    fromField: string;
    /**
     * The field name to use in the destination
     */
    toField: string;
}

export interface DestinationPgvectorConfigurationProcessingTextSplitter {
    /**
     * Split the text by Markdown headers down to the specified header level. If the chunk size fits multiple sections, they will be combined into a single chunk.
     */
    byMarkdownHeader?: outputs.DestinationPgvectorConfigurationProcessingTextSplitterByMarkdownHeader;
    /**
     * Split the text by suitable delimiters based on the programming language. This is useful for splitting code into chunks.
     */
    byProgrammingLanguage?: outputs.DestinationPgvectorConfigurationProcessingTextSplitterByProgrammingLanguage;
    /**
     * Split the text by the list of separators until the chunk size is reached, using the earlier mentioned separators where possible. This is useful for splitting text fields by paragraphs, sentences, words, etc.
     */
    bySeparator?: outputs.DestinationPgvectorConfigurationProcessingTextSplitterBySeparator;
}

export interface DestinationPgvectorConfigurationProcessingTextSplitterByMarkdownHeader {
    /**
     * Level of markdown headers to split text fields by. Headings down to the specified level will be used as split points. Default: 1
     */
    splitLevel: number;
}

export interface DestinationPgvectorConfigurationProcessingTextSplitterByProgrammingLanguage {
    /**
     * Split code in suitable places based on the programming language. must be one of ["cpp", "go", "java", "js", "php", "proto", "python", "rst", "ruby", "rust", "scala", "swift", "markdown", "latex", "html", "sol"]
     */
    language: string;
}

export interface DestinationPgvectorConfigurationProcessingTextSplitterBySeparator {
    /**
     * Whether to keep the separator in the resulting chunks. Default: false
     */
    keepSeparator: boolean;
    /**
     * List of separator strings to split text fields by. The separator itself needs to be wrapped in double quotes, e.g. to split by the dot character, use ".". To split by a newline, use "\n".
     */
    separators?: string[];
}

export interface DestinationPgvectorResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.DestinationPgvectorResourceAllocationDefault;
    jobSpecifics: outputs.DestinationPgvectorResourceAllocationJobSpecific[];
}

export interface DestinationPgvectorResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationPgvectorResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.DestinationPgvectorResourceAllocationJobSpecificResourceRequirements;
}

export interface DestinationPgvectorResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationPineconeConfiguration {
    /**
     * Embedding configuration
     */
    embedding: outputs.DestinationPineconeConfigurationEmbedding;
    /**
     * Pinecone is a popular vector store that can be used to store and retrieve embeddings.
     */
    indexing: outputs.DestinationPineconeConfigurationIndexing;
    /**
     * Do not store the text that gets embedded along with the vector and the metadata in the destination. If set to true, only the vector and the metadata will be stored - in this case raw text for LLM use cases needs to be retrieved from another source. Default: false
     */
    omitRawText: boolean;
    processing: outputs.DestinationPineconeConfigurationProcessing;
}

export interface DestinationPineconeConfigurationEmbedding {
    /**
     * Use the Azure-hosted OpenAI API to embed text. This option is using the text-embedding-ada-002 model with 1536 embedding dimensions.
     */
    azureOpenAi?: outputs.DestinationPineconeConfigurationEmbeddingAzureOpenAi;
    /**
     * Use the Cohere API to embed text.
     */
    cohere?: outputs.DestinationPineconeConfigurationEmbeddingCohere;
    /**
     * Use a fake embedding made out of random vectors with 1536 embedding dimensions. This is useful for testing the data pipeline without incurring any costs.
     */
    fake?: outputs.DestinationPineconeConfigurationEmbeddingFake;
    /**
     * Use the OpenAI API to embed text. This option is using the text-embedding-ada-002 model with 1536 embedding dimensions.
     */
    openAi?: outputs.DestinationPineconeConfigurationEmbeddingOpenAi;
    /**
     * Use a service that's compatible with the OpenAI API to embed text.
     */
    openAiCompatible?: outputs.DestinationPineconeConfigurationEmbeddingOpenAiCompatible;
}

export interface DestinationPineconeConfigurationEmbeddingAzureOpenAi {
    /**
     * The base URL for your Azure OpenAI resource.  You can find this in the Azure portal under your Azure OpenAI resource
     */
    apiBase: string;
    /**
     * The deployment for your Azure OpenAI resource.  You can find this in the Azure portal under your Azure OpenAI resource
     */
    deployment: string;
    /**
     * The API key for your Azure OpenAI resource.  You can find this in the Azure portal under your Azure OpenAI resource
     */
    openaiKey: string;
}

export interface DestinationPineconeConfigurationEmbeddingCohere {
    cohereKey: string;
}

export interface DestinationPineconeConfigurationEmbeddingFake {
}

export interface DestinationPineconeConfigurationEmbeddingOpenAi {
    openaiKey: string;
}

export interface DestinationPineconeConfigurationEmbeddingOpenAiCompatible {
    /**
     * Default: ""
     */
    apiKey: string;
    /**
     * The base URL for your OpenAI-compatible service
     */
    baseUrl: string;
    /**
     * The number of dimensions the embedding model is generating
     */
    dimensions: number;
    /**
     * The name of the model to use for embedding. Default: "text-embedding-ada-002"
     */
    modelName: string;
}

export interface DestinationPineconeConfigurationIndexing {
    /**
     * Pinecone index in your project to load data into
     */
    index: string;
    /**
     * Pinecone Cloud environment to use
     */
    pineconeEnvironment: string;
    /**
     * The Pinecone API key to use matching the environment (copy from Pinecone console)
     */
    pineconeKey: string;
}

export interface DestinationPineconeConfigurationProcessing {
    /**
     * Size of overlap between chunks in tokens to store in vector store to better capture relevant context. Default: 0
     */
    chunkOverlap: number;
    /**
     * Size of chunks in tokens to store in vector store (make sure it is not too big for the context if your LLM)
     */
    chunkSize: number;
    /**
     * List of fields to rename. Not applicable for nested fields, but can be used to rename fields already flattened via dot notation.
     */
    fieldNameMappings?: outputs.DestinationPineconeConfigurationProcessingFieldNameMapping[];
    /**
     * List of fields in the record that should be stored as metadata. The field list is applied to all streams in the same way and non-existing fields are ignored. If none are defined, all fields are considered metadata fields. When specifying text fields, you can access nested fields in the record by using dot notation, e.g. `user.name` will access the `name` field in the `user` object. It's also possible to use wildcards to access all fields in an object, e.g. `users.*.name` will access all `names` fields in all entries of the `users` array. When specifying nested paths, all matching values are flattened into an array set to a field named by the path.
     */
    metadataFields: string[];
    /**
     * List of fields in the record that should be used to calculate the embedding. The field list is applied to all streams in the same way and non-existing fields are ignored. If none are defined, all fields are considered text fields. When specifying text fields, you can access nested fields in the record by using dot notation, e.g. `user.name` will access the `name` field in the `user` object. It's also possible to use wildcards to access all fields in an object, e.g. `users.*.name` will access all `names` fields in all entries of the `users` array.
     */
    textFields: string[];
    /**
     * Split text fields into chunks based on the specified method.
     */
    textSplitter?: outputs.DestinationPineconeConfigurationProcessingTextSplitter;
}

export interface DestinationPineconeConfigurationProcessingFieldNameMapping {
    /**
     * The field name in the source
     */
    fromField: string;
    /**
     * The field name to use in the destination
     */
    toField: string;
}

export interface DestinationPineconeConfigurationProcessingTextSplitter {
    /**
     * Split the text by Markdown headers down to the specified header level. If the chunk size fits multiple sections, they will be combined into a single chunk.
     */
    byMarkdownHeader?: outputs.DestinationPineconeConfigurationProcessingTextSplitterByMarkdownHeader;
    /**
     * Split the text by suitable delimiters based on the programming language. This is useful for splitting code into chunks.
     */
    byProgrammingLanguage?: outputs.DestinationPineconeConfigurationProcessingTextSplitterByProgrammingLanguage;
    /**
     * Split the text by the list of separators until the chunk size is reached, using the earlier mentioned separators where possible. This is useful for splitting text fields by paragraphs, sentences, words, etc.
     */
    bySeparator?: outputs.DestinationPineconeConfigurationProcessingTextSplitterBySeparator;
}

export interface DestinationPineconeConfigurationProcessingTextSplitterByMarkdownHeader {
    /**
     * Level of markdown headers to split text fields by. Headings down to the specified level will be used as split points. Default: 1
     */
    splitLevel: number;
}

export interface DestinationPineconeConfigurationProcessingTextSplitterByProgrammingLanguage {
    /**
     * Split code in suitable places based on the programming language. must be one of ["cpp", "go", "java", "js", "php", "proto", "python", "rst", "ruby", "rust", "scala", "swift", "markdown", "latex", "html", "sol"]
     */
    language: string;
}

export interface DestinationPineconeConfigurationProcessingTextSplitterBySeparator {
    /**
     * Whether to keep the separator in the resulting chunks. Default: false
     */
    keepSeparator: boolean;
    /**
     * List of separator strings to split text fields by. The separator itself needs to be wrapped in double quotes, e.g. to split by the dot character, use ".". To split by a newline, use "\n".
     */
    separators?: string[];
}

export interface DestinationPineconeResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.DestinationPineconeResourceAllocationDefault;
    jobSpecifics: outputs.DestinationPineconeResourceAllocationJobSpecific[];
}

export interface DestinationPineconeResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationPineconeResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.DestinationPineconeResourceAllocationJobSpecificResourceRequirements;
}

export interface DestinationPineconeResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationPostgresConfiguration {
    /**
     * Name of the database.
     */
    database: string;
    /**
     * Disable Writing Final Tables. WARNING! The data format in _airbyte_data is likely stable but there are no guarantees that other metadata columns will remain the same in future versions. Default: false
     */
    disableTypeDedupe: boolean;
    /**
     * Drop tables with CASCADE. WARNING! This will delete all data in all dependent objects (views, etc.). Use with caution. This option is intended for usecases which can easily rebuild the dependent objects. Default: false
     */
    dropCascade: boolean;
    /**
     * Hostname of the database.
     */
    host: string;
    /**
     * Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '&'. (example: key1=value1&key2=value2&key3=value3).
     */
    jdbcUrlParams?: string;
    /**
     * Password associated with the username.
     */
    password?: string;
    /**
     * Port of the database. Default: 5432
     */
    port: number;
    /**
     * The schema to write raw tables into
     */
    rawDataSchema?: string;
    /**
     * The default schema tables are written to if the source does not specify a namespace. The usual value for this field is "public". Default: "public"
     */
    schema: string;
    /**
     * Encrypt data using SSL. When activating SSL, please select one of the connection modes. Default: false
     */
    ssl: boolean;
    /**
     * SSL connection modes. 
     *  <b>disable</b> - Chose this mode to disable encryption of communication between Airbyte and destination database
     *  <b>allow</b> - Chose this mode to enable encryption only when required by the source database
     *  <b>prefer</b> - Chose this mode to allow unencrypted connection only if the source database does not support encryption
     *  <b>require</b> - Chose this mode to always require encryption. If the source database server does not support encryption, connection will fail
     *   <b>verify-ca</b> - Chose this mode to always require encryption and to verify that the source database server has a valid SSL certificate
     *   <b>verify-full</b> - This is the most secure mode. Chose this mode to always require encryption and to verify the identity of the source database server
     *  See more information - <a href="https://jdbc.postgresql.org/documentation/head/ssl-client.html"> in the docs</a>.
     */
    sslMode?: outputs.DestinationPostgresConfigurationSslMode;
    /**
     * Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
     */
    tunnelMethod?: outputs.DestinationPostgresConfigurationTunnelMethod;
    /**
     * Create numeric columns as unconstrained DECIMAL instead of NUMBER(38, 9). This will allow increased precision in numeric values. (this is disabled by default for backwards compatibility, but is recommended to enable). Default: false
     */
    unconstrainedNumber: boolean;
    /**
     * Username to use to access the database.
     */
    username: string;
}

export interface DestinationPostgresConfigurationSslMode {
    /**
     * Allow SSL mode.
     */
    allow?: outputs.DestinationPostgresConfigurationSslModeAllow;
    /**
     * Disable SSL.
     */
    disable?: outputs.DestinationPostgresConfigurationSslModeDisable;
    /**
     * Prefer SSL mode.
     */
    prefer?: outputs.DestinationPostgresConfigurationSslModePrefer;
    /**
     * Require SSL mode.
     */
    require?: outputs.DestinationPostgresConfigurationSslModeRequire;
    /**
     * Verify-ca SSL mode.
     */
    verifyCa?: outputs.DestinationPostgresConfigurationSslModeVerifyCa;
    /**
     * Verify-full SSL mode.
     */
    verifyFull?: outputs.DestinationPostgresConfigurationSslModeVerifyFull;
}

export interface DestinationPostgresConfigurationSslModeAllow {
}

export interface DestinationPostgresConfigurationSslModeDisable {
}

export interface DestinationPostgresConfigurationSslModePrefer {
}

export interface DestinationPostgresConfigurationSslModeRequire {
}

export interface DestinationPostgresConfigurationSslModeVerifyCa {
    /**
     * CA certificate
     */
    caCertificate: string;
    /**
     * Password for keystorage. This field is optional. If you do not add it - the password will be generated automatically.
     */
    clientKeyPassword?: string;
}

export interface DestinationPostgresConfigurationSslModeVerifyFull {
    /**
     * CA certificate
     */
    caCertificate: string;
    /**
     * Client certificate
     */
    clientCertificate: string;
    /**
     * Client key
     */
    clientKey: string;
    /**
     * Password for keystorage. This field is optional. If you do not add it - the password will be generated automatically.
     */
    clientKeyPassword?: string;
}

export interface DestinationPostgresConfigurationTunnelMethod {
    noTunnel?: outputs.DestinationPostgresConfigurationTunnelMethodNoTunnel;
    passwordAuthentication?: outputs.DestinationPostgresConfigurationTunnelMethodPasswordAuthentication;
    sshKeyAuthentication?: outputs.DestinationPostgresConfigurationTunnelMethodSshKeyAuthentication;
}

export interface DestinationPostgresConfigurationTunnelMethodNoTunnel {
}

export interface DestinationPostgresConfigurationTunnelMethodPasswordAuthentication {
    /**
     * Hostname of the jump server host that allows inbound ssh tunnel.
     */
    tunnelHost: string;
    /**
     * Port on the proxy/jump server that accepts inbound ssh connections. Default: 22
     */
    tunnelPort: number;
    /**
     * OS-level username for logging into the jump server host
     */
    tunnelUser: string;
    /**
     * OS-level password for logging into the jump server host
     */
    tunnelUserPassword: string;
}

export interface DestinationPostgresConfigurationTunnelMethodSshKeyAuthentication {
    /**
     * OS-level user account ssh key credentials in RSA PEM format ( created with ssh-keygen -t rsa -m PEM -f myuser_rsa )
     */
    sshKey: string;
    /**
     * Hostname of the jump server host that allows inbound ssh tunnel.
     */
    tunnelHost: string;
    /**
     * Port on the proxy/jump server that accepts inbound ssh connections. Default: 22
     */
    tunnelPort: number;
    /**
     * OS-level username for logging into the jump server host.
     */
    tunnelUser: string;
}

export interface DestinationPostgresResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.DestinationPostgresResourceAllocationDefault;
    jobSpecifics: outputs.DestinationPostgresResourceAllocationJobSpecific[];
}

export interface DestinationPostgresResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationPostgresResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.DestinationPostgresResourceAllocationJobSpecificResourceRequirements;
}

export interface DestinationPostgresResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationPubsubConfiguration {
    /**
     * Number of ms before the buffer is flushed. Default: 1
     */
    batchingDelayThreshold: number;
    /**
     * Number of messages before the buffer is flushed. Default: 1
     */
    batchingElementCountThreshold: number;
    /**
     * If TRUE messages will be buffered instead of sending them one by one. Default: false
     */
    batchingEnabled: boolean;
    /**
     * Number of bytes before the buffer is flushed. Default: 1
     */
    batchingRequestBytesThreshold: number;
    /**
     * The contents of the JSON service account key. Check out the <a href="https://docs.airbyte.com/integrations/destinations/pubsub">docs</a> if you need help generating this key.
     */
    credentialsJson: string;
    /**
     * If TRUE PubSub publisher will have <a href="https://cloud.google.com/pubsub/docs/ordering">message ordering</a> enabled. Every message will have an ordering key of stream. Default: false
     */
    orderingEnabled: boolean;
    /**
     * The GCP project ID for the project containing the target PubSub.
     */
    projectId: string;
    /**
     * The PubSub topic ID in the given GCP project ID.
     */
    topicId: string;
}

export interface DestinationPubsubResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.DestinationPubsubResourceAllocationDefault;
    jobSpecifics: outputs.DestinationPubsubResourceAllocationJobSpecific[];
}

export interface DestinationPubsubResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationPubsubResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.DestinationPubsubResourceAllocationJobSpecificResourceRequirements;
}

export interface DestinationPubsubResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationQdrantConfiguration {
    /**
     * Embedding configuration
     */
    embedding: outputs.DestinationQdrantConfigurationEmbedding;
    /**
     * Indexing configuration
     */
    indexing: outputs.DestinationQdrantConfigurationIndexing;
    /**
     * Do not store the text that gets embedded along with the vector and the metadata in the destination. If set to true, only the vector and the metadata will be stored - in this case raw text for LLM use cases needs to be retrieved from another source. Default: false
     */
    omitRawText: boolean;
    processing: outputs.DestinationQdrantConfigurationProcessing;
}

export interface DestinationQdrantConfigurationEmbedding {
    /**
     * Use the Azure-hosted OpenAI API to embed text. This option is using the text-embedding-ada-002 model with 1536 embedding dimensions.
     */
    azureOpenAi?: outputs.DestinationQdrantConfigurationEmbeddingAzureOpenAi;
    /**
     * Use the Cohere API to embed text.
     */
    cohere?: outputs.DestinationQdrantConfigurationEmbeddingCohere;
    /**
     * Use a fake embedding made out of random vectors with 1536 embedding dimensions. This is useful for testing the data pipeline without incurring any costs.
     */
    fake?: outputs.DestinationQdrantConfigurationEmbeddingFake;
    /**
     * Use the OpenAI API to embed text. This option is using the text-embedding-ada-002 model with 1536 embedding dimensions.
     */
    openAi?: outputs.DestinationQdrantConfigurationEmbeddingOpenAi;
    /**
     * Use a service that's compatible with the OpenAI API to embed text.
     */
    openAiCompatible?: outputs.DestinationQdrantConfigurationEmbeddingOpenAiCompatible;
}

export interface DestinationQdrantConfigurationEmbeddingAzureOpenAi {
    /**
     * The base URL for your Azure OpenAI resource.  You can find this in the Azure portal under your Azure OpenAI resource
     */
    apiBase: string;
    /**
     * The deployment for your Azure OpenAI resource.  You can find this in the Azure portal under your Azure OpenAI resource
     */
    deployment: string;
    /**
     * The API key for your Azure OpenAI resource.  You can find this in the Azure portal under your Azure OpenAI resource
     */
    openaiKey: string;
}

export interface DestinationQdrantConfigurationEmbeddingCohere {
    cohereKey: string;
}

export interface DestinationQdrantConfigurationEmbeddingFake {
}

export interface DestinationQdrantConfigurationEmbeddingOpenAi {
    openaiKey: string;
}

export interface DestinationQdrantConfigurationEmbeddingOpenAiCompatible {
    /**
     * Default: ""
     */
    apiKey: string;
    /**
     * The base URL for your OpenAI-compatible service
     */
    baseUrl: string;
    /**
     * The number of dimensions the embedding model is generating
     */
    dimensions: number;
    /**
     * The name of the model to use for embedding. Default: "text-embedding-ada-002"
     */
    modelName: string;
}

export interface DestinationQdrantConfigurationIndexing {
    /**
     * Method to authenticate with the Qdrant Instance
     */
    authMethod?: outputs.DestinationQdrantConfigurationIndexingAuthMethod;
    /**
     * The collection to load data into
     */
    collection: string;
    /**
     * The Distance metric used to measure similarities among vectors. This field is only used if the collection defined in the does not exist yet and is created automatically by the connector. Default: "cos"; must be one of ["dot", "cos", "euc"]
     */
    distanceMetric: string;
    /**
     * Whether to prefer gRPC over HTTP. Set to true for Qdrant cloud clusters. Default: true
     */
    preferGrpc: boolean;
    /**
     * The field in the payload that contains the embedded text. Default: "text"
     */
    textField: string;
    /**
     * Public Endpoint of the Qdrant cluser
     */
    url: string;
}

export interface DestinationQdrantConfigurationIndexingAuthMethod {
    apiKeyAuth?: outputs.DestinationQdrantConfigurationIndexingAuthMethodApiKeyAuth;
    noAuth?: outputs.DestinationQdrantConfigurationIndexingAuthMethodNoAuth;
}

export interface DestinationQdrantConfigurationIndexingAuthMethodApiKeyAuth {
    /**
     * API Key for the Qdrant instance
     */
    apiKey: string;
}

export interface DestinationQdrantConfigurationIndexingAuthMethodNoAuth {
}

export interface DestinationQdrantConfigurationProcessing {
    /**
     * Size of overlap between chunks in tokens to store in vector store to better capture relevant context. Default: 0
     */
    chunkOverlap: number;
    /**
     * Size of chunks in tokens to store in vector store (make sure it is not too big for the context if your LLM)
     */
    chunkSize: number;
    /**
     * List of fields to rename. Not applicable for nested fields, but can be used to rename fields already flattened via dot notation.
     */
    fieldNameMappings?: outputs.DestinationQdrantConfigurationProcessingFieldNameMapping[];
    /**
     * List of fields in the record that should be stored as metadata. The field list is applied to all streams in the same way and non-existing fields are ignored. If none are defined, all fields are considered metadata fields. When specifying text fields, you can access nested fields in the record by using dot notation, e.g. `user.name` will access the `name` field in the `user` object. It's also possible to use wildcards to access all fields in an object, e.g. `users.*.name` will access all `names` fields in all entries of the `users` array. When specifying nested paths, all matching values are flattened into an array set to a field named by the path.
     */
    metadataFields: string[];
    /**
     * List of fields in the record that should be used to calculate the embedding. The field list is applied to all streams in the same way and non-existing fields are ignored. If none are defined, all fields are considered text fields. When specifying text fields, you can access nested fields in the record by using dot notation, e.g. `user.name` will access the `name` field in the `user` object. It's also possible to use wildcards to access all fields in an object, e.g. `users.*.name` will access all `names` fields in all entries of the `users` array.
     */
    textFields: string[];
    /**
     * Split text fields into chunks based on the specified method.
     */
    textSplitter?: outputs.DestinationQdrantConfigurationProcessingTextSplitter;
}

export interface DestinationQdrantConfigurationProcessingFieldNameMapping {
    /**
     * The field name in the source
     */
    fromField: string;
    /**
     * The field name to use in the destination
     */
    toField: string;
}

export interface DestinationQdrantConfigurationProcessingTextSplitter {
    /**
     * Split the text by Markdown headers down to the specified header level. If the chunk size fits multiple sections, they will be combined into a single chunk.
     */
    byMarkdownHeader?: outputs.DestinationQdrantConfigurationProcessingTextSplitterByMarkdownHeader;
    /**
     * Split the text by suitable delimiters based on the programming language. This is useful for splitting code into chunks.
     */
    byProgrammingLanguage?: outputs.DestinationQdrantConfigurationProcessingTextSplitterByProgrammingLanguage;
    /**
     * Split the text by the list of separators until the chunk size is reached, using the earlier mentioned separators where possible. This is useful for splitting text fields by paragraphs, sentences, words, etc.
     */
    bySeparator?: outputs.DestinationQdrantConfigurationProcessingTextSplitterBySeparator;
}

export interface DestinationQdrantConfigurationProcessingTextSplitterByMarkdownHeader {
    /**
     * Level of markdown headers to split text fields by. Headings down to the specified level will be used as split points. Default: 1
     */
    splitLevel: number;
}

export interface DestinationQdrantConfigurationProcessingTextSplitterByProgrammingLanguage {
    /**
     * Split code in suitable places based on the programming language. must be one of ["cpp", "go", "java", "js", "php", "proto", "python", "rst", "ruby", "rust", "scala", "swift", "markdown", "latex", "html", "sol"]
     */
    language: string;
}

export interface DestinationQdrantConfigurationProcessingTextSplitterBySeparator {
    /**
     * Whether to keep the separator in the resulting chunks. Default: false
     */
    keepSeparator: boolean;
    /**
     * List of separator strings to split text fields by. The separator itself needs to be wrapped in double quotes, e.g. to split by the dot character, use ".". To split by a newline, use "\n".
     */
    separators?: string[];
}

export interface DestinationQdrantResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.DestinationQdrantResourceAllocationDefault;
    jobSpecifics: outputs.DestinationQdrantResourceAllocationJobSpecific[];
}

export interface DestinationQdrantResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationQdrantResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.DestinationQdrantResourceAllocationJobSpecificResourceRequirements;
}

export interface DestinationQdrantResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationRedisConfiguration {
    /**
     * Redis cache type to store data in. Default: "hash"; must be "hash"
     */
    cacheType: string;
    /**
     * Redis host to connect to.
     */
    host: string;
    /**
     * Password associated with Redis.
     */
    password?: string;
    /**
     * Port of Redis. Default: 6379
     */
    port: number;
    /**
     * Indicates whether SSL encryption protocol will be used to connect to Redis. It is recommended to use SSL connection if possible. Default: false
     */
    ssl: boolean;
    /**
     * SSL connection modes. 
     *   <li><b>verify-full</b> - This is the most secure mode. Always require encryption and verifies the identity of the source database server
     */
    sslMode?: outputs.DestinationRedisConfigurationSslMode;
    /**
     * Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
     */
    tunnelMethod?: outputs.DestinationRedisConfigurationTunnelMethod;
    /**
     * Username associated with Redis.
     */
    username: string;
}

export interface DestinationRedisConfigurationSslMode {
    /**
     * Disable SSL.
     */
    disable?: outputs.DestinationRedisConfigurationSslModeDisable;
    /**
     * Verify-full SSL mode.
     */
    verifyFull?: outputs.DestinationRedisConfigurationSslModeVerifyFull;
}

export interface DestinationRedisConfigurationSslModeDisable {
}

export interface DestinationRedisConfigurationSslModeVerifyFull {
    /**
     * CA certificate
     */
    caCertificate: string;
    /**
     * Client certificate
     */
    clientCertificate: string;
    /**
     * Client key
     */
    clientKey: string;
    /**
     * Password for keystorage. If you do not add it - the password will be generated automatically.
     */
    clientKeyPassword?: string;
}

export interface DestinationRedisConfigurationTunnelMethod {
    noTunnel?: outputs.DestinationRedisConfigurationTunnelMethodNoTunnel;
    passwordAuthentication?: outputs.DestinationRedisConfigurationTunnelMethodPasswordAuthentication;
    sshKeyAuthentication?: outputs.DestinationRedisConfigurationTunnelMethodSshKeyAuthentication;
}

export interface DestinationRedisConfigurationTunnelMethodNoTunnel {
}

export interface DestinationRedisConfigurationTunnelMethodPasswordAuthentication {
    /**
     * Hostname of the jump server host that allows inbound ssh tunnel.
     */
    tunnelHost: string;
    /**
     * Port on the proxy/jump server that accepts inbound ssh connections. Default: 22
     */
    tunnelPort: number;
    /**
     * OS-level username for logging into the jump server host
     */
    tunnelUser: string;
    /**
     * OS-level password for logging into the jump server host
     */
    tunnelUserPassword: string;
}

export interface DestinationRedisConfigurationTunnelMethodSshKeyAuthentication {
    /**
     * OS-level user account ssh key credentials in RSA PEM format ( created with ssh-keygen -t rsa -m PEM -f myuser_rsa )
     */
    sshKey: string;
    /**
     * Hostname of the jump server host that allows inbound ssh tunnel.
     */
    tunnelHost: string;
    /**
     * Port on the proxy/jump server that accepts inbound ssh connections. Default: 22
     */
    tunnelPort: number;
    /**
     * OS-level username for logging into the jump server host.
     */
    tunnelUser: string;
}

export interface DestinationRedisResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.DestinationRedisResourceAllocationDefault;
    jobSpecifics: outputs.DestinationRedisResourceAllocationJobSpecific[];
}

export interface DestinationRedisResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationRedisResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.DestinationRedisResourceAllocationJobSpecificResourceRequirements;
}

export interface DestinationRedisResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationRedshiftConfiguration {
    /**
     * Name of the database.
     */
    database: string;
    /**
     * Disable Writing Final Tables. WARNING! The data format in _airbyte_data is likely stable but there are no guarantees that other metadata columns will remain the same in future versions. Default: false
     */
    disableTypeDedupe: boolean;
    /**
     * Drop tables with CASCADE. WARNING! This will delete all data in all dependent objects (views, etc.). Use with caution. This option is intended for usecases which can easily rebuild the dependent objects. Default: false
     */
    dropCascade: boolean;
    /**
     * Host Endpoint of the Redshift Cluster (must include the cluster-id, region and end with .redshift.amazonaws.com)
     */
    host: string;
    /**
     * Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '&'. (example: key1=value1&key2=value2&key3=value3).
     */
    jdbcUrlParams?: string;
    /**
     * Password associated with the username.
     */
    password: string;
    /**
     * Port of the database. Default: 5439
     */
    port: number;
    /**
     * The schema to write raw tables into (default: airbyte_internal).
     */
    rawDataSchema?: string;
    /**
     * The default schema tables are written to if the source does not specify a namespace. Unless specifically configured, the usual value for this field is "public". Default: "public"
     */
    schema: string;
    /**
     * Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
     */
    tunnelMethod?: outputs.DestinationRedshiftConfigurationTunnelMethod;
    /**
     * The way data will be uploaded to Redshift.
     */
    uploadingMethod?: outputs.DestinationRedshiftConfigurationUploadingMethod;
    /**
     * Username to use to access the database.
     */
    username: string;
}

export interface DestinationRedshiftConfigurationTunnelMethod {
    noTunnel?: outputs.DestinationRedshiftConfigurationTunnelMethodNoTunnel;
    passwordAuthentication?: outputs.DestinationRedshiftConfigurationTunnelMethodPasswordAuthentication;
    sshKeyAuthentication?: outputs.DestinationRedshiftConfigurationTunnelMethodSshKeyAuthentication;
}

export interface DestinationRedshiftConfigurationTunnelMethodNoTunnel {
}

export interface DestinationRedshiftConfigurationTunnelMethodPasswordAuthentication {
    /**
     * Hostname of the jump server host that allows inbound ssh tunnel.
     */
    tunnelHost: string;
    /**
     * Port on the proxy/jump server that accepts inbound ssh connections. Default: 22
     */
    tunnelPort: number;
    /**
     * OS-level username for logging into the jump server host
     */
    tunnelUser: string;
    /**
     * OS-level password for logging into the jump server host
     */
    tunnelUserPassword: string;
}

export interface DestinationRedshiftConfigurationTunnelMethodSshKeyAuthentication {
    /**
     * OS-level user account ssh key credentials in RSA PEM format ( created with ssh-keygen -t rsa -m PEM -f myuser_rsa )
     */
    sshKey: string;
    /**
     * Hostname of the jump server host that allows inbound ssh tunnel.
     */
    tunnelHost: string;
    /**
     * Port on the proxy/jump server that accepts inbound ssh connections. Default: 22
     */
    tunnelPort: number;
    /**
     * OS-level username for logging into the jump server host.
     */
    tunnelUser: string;
}

export interface DestinationRedshiftConfigurationUploadingMethod {
    /**
     * <i>(recommended)</i> Uploads data to S3 and then uses a COPY to insert the data into Redshift. COPY is recommended for production workloads for better speed and scalability. See <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/creating-bucket.html">AWS docs</a> for more details.
     */
    awss3Staging?: outputs.DestinationRedshiftConfigurationUploadingMethodAwss3Staging;
}

export interface DestinationRedshiftConfigurationUploadingMethodAwss3Staging {
    /**
     * This ID grants access to the above S3 staging bucket. Airbyte requires Read and Write permissions to the given bucket. See <a href="https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys">AWS docs</a> on how to generate an access key ID and secret access key.
     */
    accessKeyId: string;
    /**
     * The pattern allows you to set the file-name format for the S3 staging file(s)
     */
    fileNamePattern?: string;
    /**
     * Whether to delete the staging files from S3 after completing the sync. See <a href="https://docs.airbyte.com/integrations/destinations/redshift/#:~:text=the%20root%20directory.-,Purge%20Staging%20Data,-Whether%20to%20delete"> docs</a> for details. Default: true
     */
    purgeStagingData: boolean;
    /**
     * The name of the staging S3 bucket.
     */
    s3BucketName: string;
    /**
     * The directory under the S3 bucket where data will be written. If not provided, then defaults to the root directory. See <a href="https://docs.aws.amazon.com/prescriptive-guidance/latest/defining-bucket-names-data-lakes/faq.html#:~:text=be%20globally%20unique.-,For%20S3%20bucket%20paths,-%2C%20you%20can%20use">path's name recommendations</a> for more details.
     */
    s3BucketPath?: string;
    /**
     * The region of the S3 staging bucket. Default: ""; must be one of ["", "af-south-1", "ap-east-1", "ap-northeast-1", "ap-northeast-2", "ap-northeast-3", "ap-south-1", "ap-south-2", "ap-southeast-1", "ap-southeast-2", "ap-southeast-3", "ap-southeast-4", "ca-central-1", "ca-west-1", "cn-north-1", "cn-northwest-1", "eu-central-1", "eu-central-2", "eu-north-1", "eu-south-1", "eu-south-2", "eu-west-1", "eu-west-2", "eu-west-3", "il-central-1", "me-central-1", "me-south-1", "sa-east-1", "us-east-1", "us-east-2", "us-gov-east-1", "us-gov-west-1", "us-west-1", "us-west-2"]
     */
    s3BucketRegion: string;
    /**
     * The corresponding secret to the above access key id. See <a href="https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys">AWS docs</a> on how to generate an access key ID and secret access key.
     */
    secretAccessKey: string;
}

export interface DestinationRedshiftResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.DestinationRedshiftResourceAllocationDefault;
    jobSpecifics: outputs.DestinationRedshiftResourceAllocationJobSpecific[];
}

export interface DestinationRedshiftResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationRedshiftResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.DestinationRedshiftResourceAllocationJobSpecificResourceRequirements;
}

export interface DestinationRedshiftResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationS3Configuration {
    /**
     * The access key ID to access the S3 bucket. Airbyte requires Read and Write permissions to the given bucket. Read more <a href="https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys">here</a>.
     */
    accessKeyId?: string;
    /**
     * Pattern to match file names in the bucket directory. Read more <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/ListingKeysUsingAPIs.html">here</a>
     */
    fileNamePattern?: string;
    /**
     * Format of the data output. See <a href="https://docs.airbyte.com/integrations/destinations/s3/#supported-output-schema">here</a> for more details
     */
    format: outputs.DestinationS3ConfigurationFormat;
    /**
     * The ARN of the AWS role to assume. Only usable in Airbyte Cloud.
     */
    roleArn?: string;
    /**
     * The name of the S3 bucket. Read more <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/create-bucket-overview.html">here</a>.
     */
    s3BucketName: string;
    /**
     * Directory under the S3 bucket where data will be written. Read more <a href="https://docs.airbyte.com/integrations/destinations/s3#:~:text=to%20format%20the-,bucket%20path,-%3A">here</a>
     */
    s3BucketPath: string;
    /**
     * The region of the S3 bucket. See <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-available-regions">here</a> for all region codes. Default: ""; must be one of ["", "af-south-1", "ap-east-1", "ap-northeast-1", "ap-northeast-2", "ap-northeast-3", "ap-south-1", "ap-south-2", "ap-southeast-1", "ap-southeast-2", "ap-southeast-3", "ap-southeast-4", "ca-central-1", "ca-west-1", "cn-north-1", "cn-northwest-1", "eu-central-1", "eu-central-2", "eu-north-1", "eu-south-1", "eu-south-2", "eu-west-1", "eu-west-2", "eu-west-3", "il-central-1", "me-central-1", "me-south-1", "sa-east-1", "us-east-1", "us-east-2", "us-gov-east-1", "us-gov-west-1", "us-west-1", "us-west-2"]
     */
    s3BucketRegion: string;
    /**
     * Your S3 endpoint url. Read more <a href="https://docs.aws.amazon.com/general/latest/gr/s3.html#:~:text=Service%20endpoints-,Amazon%20S3%20endpoints,-When%20you%20use">here</a>
     */
    s3Endpoint?: string;
    /**
     * Format string on how data will be organized inside the bucket directory. Read more <a href="https://docs.airbyte.com/integrations/destinations/s3#:~:text=The%20full%20path%20of%20the%20output%20data%20with%20the%20default%20S3%20path%20format">here</a>
     */
    s3PathFormat?: string;
    /**
     * The corresponding secret to the access key ID. Read more <a href="https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys">here</a>
     */
    secretAccessKey?: string;
}

export interface DestinationS3ConfigurationFormat {
    avroApacheAvro?: outputs.DestinationS3ConfigurationFormatAvroApacheAvro;
    csvCommaSeparatedValues?: outputs.DestinationS3ConfigurationFormatCsvCommaSeparatedValues;
    jsonLinesNewlineDelimitedJson?: outputs.DestinationS3ConfigurationFormatJsonLinesNewlineDelimitedJson;
    parquetColumnarStorage?: outputs.DestinationS3ConfigurationFormatParquetColumnarStorage;
}

export interface DestinationS3ConfigurationFormatAvroApacheAvro {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * The compression algorithm used to compress data. Default to no compression.
     */
    compressionCodec: outputs.DestinationS3ConfigurationFormatAvroApacheAvroCompressionCodec;
    /**
     * Default: "Avro"; must be "Avro"
     */
    formatType: string;
}

export interface DestinationS3ConfigurationFormatAvroApacheAvroCompressionCodec {
    bzip2?: outputs.DestinationS3ConfigurationFormatAvroApacheAvroCompressionCodecBzip2;
    deflate?: outputs.DestinationS3ConfigurationFormatAvroApacheAvroCompressionCodecDeflate;
    noCompression?: outputs.DestinationS3ConfigurationFormatAvroApacheAvroCompressionCodecNoCompression;
    snappy?: outputs.DestinationS3ConfigurationFormatAvroApacheAvroCompressionCodecSnappy;
    xz?: outputs.DestinationS3ConfigurationFormatAvroApacheAvroCompressionCodecXz;
    zstandard?: outputs.DestinationS3ConfigurationFormatAvroApacheAvroCompressionCodecZstandard;
}

export interface DestinationS3ConfigurationFormatAvroApacheAvroCompressionCodecBzip2 {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * Default: "bzip2"; must be "bzip2"
     */
    codec: string;
}

export interface DestinationS3ConfigurationFormatAvroApacheAvroCompressionCodecDeflate {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * Default: "Deflate"; must be "Deflate"
     */
    codec: string;
    compressionLevel: number;
}

export interface DestinationS3ConfigurationFormatAvroApacheAvroCompressionCodecNoCompression {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * Default: "no compression"; must be "no compression"
     */
    codec: string;
}

export interface DestinationS3ConfigurationFormatAvroApacheAvroCompressionCodecSnappy {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * Default: "snappy"; must be "snappy"
     */
    codec: string;
}

export interface DestinationS3ConfigurationFormatAvroApacheAvroCompressionCodecXz {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * Default: "xz"; must be "xz"
     */
    codec: string;
    compressionLevel: number;
}

export interface DestinationS3ConfigurationFormatAvroApacheAvroCompressionCodecZstandard {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * Default: "zstandard"; must be "zstandard"
     */
    codec: string;
    compressionLevel: number;
    includeChecksum: boolean;
}

export interface DestinationS3ConfigurationFormatCsvCommaSeparatedValues {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * Whether the output files should be compressed. If compression is selected, the output filename will have an extra extension (GZIP: ".jsonl.gz").
     */
    compression?: outputs.DestinationS3ConfigurationFormatCsvCommaSeparatedValuesCompression;
    /**
     * Default: "No flattening"; must be one of ["No flattening", "Root level flattening"]
     */
    flattening: string;
    /**
     * Default: "CSV"; must be "CSV"
     */
    formatType: string;
}

export interface DestinationS3ConfigurationFormatCsvCommaSeparatedValuesCompression {
    gzip?: outputs.DestinationS3ConfigurationFormatCsvCommaSeparatedValuesCompressionGzip;
    noCompression?: outputs.DestinationS3ConfigurationFormatCsvCommaSeparatedValuesCompressionNoCompression;
}

export interface DestinationS3ConfigurationFormatCsvCommaSeparatedValuesCompressionGzip {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * Default: "GZIP"; must be "GZIP"
     */
    compressionType: string;
}

export interface DestinationS3ConfigurationFormatCsvCommaSeparatedValuesCompressionNoCompression {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * Default: "No Compression"; must be "No Compression"
     */
    compressionType: string;
}

export interface DestinationS3ConfigurationFormatJsonLinesNewlineDelimitedJson {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * Whether the output files should be compressed. If compression is selected, the output filename will have an extra extension (GZIP: ".jsonl.gz").
     */
    compression?: outputs.DestinationS3ConfigurationFormatJsonLinesNewlineDelimitedJsonCompression;
    /**
     * Default: "No flattening"; must be one of ["No flattening", "Root level flattening"]
     */
    flattening: string;
    /**
     * Default: "JSONL"; must be "JSONL"
     */
    formatType: string;
}

export interface DestinationS3ConfigurationFormatJsonLinesNewlineDelimitedJsonCompression {
    gzip?: outputs.DestinationS3ConfigurationFormatJsonLinesNewlineDelimitedJsonCompressionGzip;
    noCompression?: outputs.DestinationS3ConfigurationFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression;
}

export interface DestinationS3ConfigurationFormatJsonLinesNewlineDelimitedJsonCompressionGzip {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * Default: "GZIP"; must be "GZIP"
     */
    compressionType: string;
}

export interface DestinationS3ConfigurationFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * Default: "No Compression"; must be "No Compression"
     */
    compressionType: string;
}

export interface DestinationS3ConfigurationFormatParquetColumnarStorage {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * This is the size of a row group being buffered in memory. It limits the memory usage when writing. Larger values will improve the IO when reading, but consume more memory when writing. Default: 128 MB. Default: 128
     */
    blockSizeMb: number;
    /**
     * The compression algorithm used to compress data pages. Default: "UNCOMPRESSED"; must be one of ["UNCOMPRESSED", "SNAPPY", "GZIP", "LZO", "BROTLI", "LZ4", "ZSTD"]
     */
    compressionCodec: string;
    /**
     * Default: true.
     */
    dictionaryEncoding?: boolean;
    /**
     * There is one dictionary page per column per row group when dictionary encoding is used. The dictionary page size works like the page size but for dictionary. Default: 1024 KB. Default: 1024
     */
    dictionaryPageSizeKb: number;
    /**
     * Default: "Parquet"; must be "Parquet"
     */
    formatType: string;
    /**
     * Maximum size allowed as padding to align row groups. This is also the minimum size of a row group. Default: 8 MB. Default: 8
     */
    maxPaddingSizeMb: number;
    /**
     * The page size is for compression. A block is composed of pages. A page is the smallest unit that must be read fully to access a single record. If this value is too small, the compression will deteriorate. Default: 1024 KB. Default: 1024
     */
    pageSizeKb: number;
}

export interface DestinationS3DataLakeConfiguration {
    /**
     * The AWS Access Key ID with permissions for S3 and Glue operations.
     */
    accessKeyId?: string;
    /**
     * Specifies the type of Iceberg catalog (e.g., NESSIE, GLUE, REST) and its associated configuration.
     */
    catalogType: outputs.DestinationS3DataLakeConfigurationCatalogType;
    /**
     * The primary or default branch name in the catalog. Most query engines will use "main" by default. See <a href="https://iceberg.apache.org/docs/latest/branching/">Iceberg documentation</a> for more information. Default: "main"
     */
    mainBranchName: string;
    /**
     * The name of the S3 bucket that will host the Iceberg data.
     */
    s3BucketName: string;
    /**
     * The region of the S3 bucket. See <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-available-regions">here</a> for all region codes. must be one of ["", "af-south-1", "ap-east-1", "ap-northeast-1", "ap-northeast-2", "ap-northeast-3", "ap-south-1", "ap-south-2", "ap-southeast-1", "ap-southeast-2", "ap-southeast-3", "ap-southeast-4", "ca-central-1", "ca-west-1", "cn-north-1", "cn-northwest-1", "eu-central-1", "eu-central-2", "eu-north-1", "eu-south-1", "eu-south-2", "eu-west-1", "eu-west-2", "eu-west-3", "il-central-1", "me-central-1", "me-south-1", "sa-east-1", "us-east-1", "us-east-2", "us-gov-east-1", "us-gov-west-1", "us-west-1", "us-west-2"]
     */
    s3BucketRegion: string;
    /**
     * Your S3 endpoint url. Read more <a href="https://docs.aws.amazon.com/general/latest/gr/s3.html#:~:text=Service%20endpoints-,Amazon%20S3%20endpoints,-When%20you%20use">here</a>
     */
    s3Endpoint?: string;
    /**
     * The AWS Secret Access Key paired with the Access Key ID for AWS authentication.
     */
    secretAccessKey?: string;
    /**
     * The root location of the data warehouse used by the Iceberg catalog. Typically includes a bucket name and path within that bucket. For AWS Glue and Nessie, must include the storage protocol (such as "s3://" for Amazon S3).
     */
    warehouseLocation: string;
}

export interface DestinationS3DataLakeConfigurationCatalogType {
    /**
     * Configuration details for connecting to an AWS Glue-based Iceberg catalog.
     */
    glueCatalog?: outputs.DestinationS3DataLakeConfigurationCatalogTypeGlueCatalog;
    /**
     * Configuration details for connecting to a Nessie-based Iceberg catalog.
     */
    nessieCatalog?: outputs.DestinationS3DataLakeConfigurationCatalogTypeNessieCatalog;
    /**
     * Configuration details for connecting to a REST catalog.
     */
    restCatalog?: outputs.DestinationS3DataLakeConfigurationCatalogTypeRestCatalog;
}

export interface DestinationS3DataLakeConfigurationCatalogTypeGlueCatalog {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * Default: "GLUE"; must be "GLUE"
     */
    catalogType: string;
    /**
     * The Glue database name. This will ONLY be used if the `Destination Namespace` setting for the connection is set to `Destination-defined` or `Source-defined`
     */
    databaseName: string;
    /**
     * The AWS Account ID associated with the Glue service used by the Iceberg catalog.
     */
    glueId: string;
    /**
     * The ARN of the AWS role to assume. Only usable in Airbyte Cloud.
     */
    roleArn?: string;
}

export interface DestinationS3DataLakeConfigurationCatalogTypeNessieCatalog {
    /**
     * Optional token for authentication with the Nessie server.
     */
    accessToken?: string;
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * Default: "NESSIE"; must be "NESSIE"
     */
    catalogType: string;
    /**
     * The Nessie namespace to be used in the Table identifier. 
     *            This will ONLY be used if the `Destination Namespace` setting for the connection is set to
     *            `Destination-defined` or `Source-defined`
     */
    namespace: string;
    /**
     * The base URL of the Nessie server used to connect to the Nessie catalog.
     */
    serverUri: string;
}

export interface DestinationS3DataLakeConfigurationCatalogTypeRestCatalog {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * Default: "REST"; must be "REST"
     */
    catalogType: string;
    /**
     * The namespace to be used in the Table identifier. 
     *            This will ONLY be used if the `Destination Namespace` setting for the connection is set to
     *            `Destination-defined` or `Source-defined`
     */
    namespace: string;
    /**
     * The base URL of the Rest server used to connect to the Rest catalog.
     */
    serverUri: string;
}

export interface DestinationS3DataLakeResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.DestinationS3DataLakeResourceAllocationDefault;
    jobSpecifics: outputs.DestinationS3DataLakeResourceAllocationJobSpecific[];
}

export interface DestinationS3DataLakeResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationS3DataLakeResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.DestinationS3DataLakeResourceAllocationJobSpecificResourceRequirements;
}

export interface DestinationS3DataLakeResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationS3ResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.DestinationS3ResourceAllocationDefault;
    jobSpecifics: outputs.DestinationS3ResourceAllocationJobSpecific[];
}

export interface DestinationS3ResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationS3ResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.DestinationS3ResourceAllocationJobSpecificResourceRequirements;
}

export interface DestinationS3ResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationSftpJsonConfiguration {
    /**
     * Path to the directory where json files will be written.
     */
    destinationPath: string;
    /**
     * Hostname of the SFTP server.
     */
    host: string;
    /**
     * Password associated with the username.
     */
    password: string;
    /**
     * Port of the SFTP server. Default: 22
     */
    port: number;
    /**
     * Username to use to access the SFTP server.
     */
    username: string;
}

export interface DestinationSftpJsonResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.DestinationSftpJsonResourceAllocationDefault;
    jobSpecifics: outputs.DestinationSftpJsonResourceAllocationJobSpecific[];
}

export interface DestinationSftpJsonResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationSftpJsonResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.DestinationSftpJsonResourceAllocationJobSpecificResourceRequirements;
}

export interface DestinationSftpJsonResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationSnowflakeConfiguration {
    credentials?: outputs.DestinationSnowflakeConfigurationCredentials;
    /**
     * Enter the name of the <a href="https://docs.snowflake.com/en/sql-reference/ddl-database.html#database-schema-share-ddl">database</a> you want to sync data into
     */
    database: string;
    /**
     * Disable Writing Final Tables. WARNING! The data format in _airbyte_data is likely stable but there are no guarantees that other metadata columns will remain the same in future versions. Default: false
     */
    disableTypeDedupe: boolean;
    /**
     * Enter your Snowflake account's <a href="https://docs.snowflake.com/en/user-guide/admin-account-identifier.html#using-an-account-locator-as-an-identifier">locator</a> (in the format <account_locator>.<region>.<cloud>.snowflakecomputing.com)
     */
    host: string;
    /**
     * Enter the additional properties to pass to the JDBC URL string when connecting to the database (formatted as key=value pairs separated by the symbol &). Example: key1=value1&key2=value2&key3=value3
     */
    jdbcUrlParams?: string;
    /**
     * The schema to write raw tables into (default: airbyte_internal)
     */
    rawDataSchema?: string;
    /**
     * The number of days of Snowflake Time Travel to enable on the tables. See <a href="https://docs.snowflake.com/en/user-guide/data-time-travel#data-retention-period">Snowflake's documentation</a> for more information. Setting a nonzero value will incur increased storage costs in your Snowflake instance. Default: 1
     */
    retentionPeriodDays: number;
    /**
     * Enter the <a href="https://docs.snowflake.com/en/user-guide/security-access-control-overview.html#roles">role</a> that you want to use to access Snowflake
     */
    role: string;
    /**
     * Enter the name of the default <a href="https://docs.snowflake.com/en/sql-reference/ddl-database.html#database-schema-share-ddl">schema</a>
     */
    schema: string;
    /**
     * Use MERGE for de-duplication of final tables. This option no effect if Final tables are disabled or Sync mode is not DEDUPE. Default: false
     */
    useMergeForUpsert: boolean;
    /**
     * Enter the name of the user you want to use to access the database
     */
    username: string;
    /**
     * Enter the name of the <a href="https://docs.snowflake.com/en/user-guide/warehouses-overview.html#overview-of-warehouses">warehouse</a> that you want to use as a compute cluster
     */
    warehouse: string;
}

export interface DestinationSnowflakeConfigurationCredentials {
    keyPairAuthentication?: outputs.DestinationSnowflakeConfigurationCredentialsKeyPairAuthentication;
    oAuth20?: outputs.DestinationSnowflakeConfigurationCredentialsOAuth20;
    usernameAndPassword?: outputs.DestinationSnowflakeConfigurationCredentialsUsernameAndPassword;
}

export interface DestinationSnowflakeConfigurationCredentialsKeyPairAuthentication {
    /**
     * RSA Private key to use for Snowflake connection. See the <a href="https://docs.airbyte.com/integrations/destinations/snowflake">docs</a> for more information on how to obtain this key.
     */
    privateKey: string;
    /**
     * Passphrase for private key
     */
    privateKeyPassword?: string;
}

export interface DestinationSnowflakeConfigurationCredentialsOAuth20 {
    /**
     * Enter you application's Access Token
     */
    accessToken: string;
    /**
     * Enter your application's Client ID
     */
    clientId?: string;
    /**
     * Enter your application's Client secret
     */
    clientSecret?: string;
    /**
     * Enter your application's Refresh Token
     */
    refreshToken: string;
}

export interface DestinationSnowflakeConfigurationCredentialsUsernameAndPassword {
    /**
     * Enter the password associated with the username.
     */
    password: string;
}

export interface DestinationSnowflakeCortexConfiguration {
    /**
     * Embedding configuration
     */
    embedding: outputs.DestinationSnowflakeCortexConfigurationEmbedding;
    /**
     * Snowflake can be used to store vector data and retrieve embeddings.
     */
    indexing: outputs.DestinationSnowflakeCortexConfigurationIndexing;
    /**
     * Do not store the text that gets embedded along with the vector and the metadata in the destination. If set to true, only the vector and the metadata will be stored - in this case raw text for LLM use cases needs to be retrieved from another source. Default: false
     */
    omitRawText: boolean;
    processing: outputs.DestinationSnowflakeCortexConfigurationProcessing;
}

export interface DestinationSnowflakeCortexConfigurationEmbedding {
    /**
     * Use the Azure-hosted OpenAI API to embed text. This option is using the text-embedding-ada-002 model with 1536 embedding dimensions.
     */
    azureOpenAi?: outputs.DestinationSnowflakeCortexConfigurationEmbeddingAzureOpenAi;
    /**
     * Use the Cohere API to embed text.
     */
    cohere?: outputs.DestinationSnowflakeCortexConfigurationEmbeddingCohere;
    /**
     * Use a fake embedding made out of random vectors with 1536 embedding dimensions. This is useful for testing the data pipeline without incurring any costs.
     */
    fake?: outputs.DestinationSnowflakeCortexConfigurationEmbeddingFake;
    /**
     * Use the OpenAI API to embed text. This option is using the text-embedding-ada-002 model with 1536 embedding dimensions.
     */
    openAi?: outputs.DestinationSnowflakeCortexConfigurationEmbeddingOpenAi;
    /**
     * Use a service that's compatible with the OpenAI API to embed text.
     */
    openAiCompatible?: outputs.DestinationSnowflakeCortexConfigurationEmbeddingOpenAiCompatible;
}

export interface DestinationSnowflakeCortexConfigurationEmbeddingAzureOpenAi {
    /**
     * The base URL for your Azure OpenAI resource.  You can find this in the Azure portal under your Azure OpenAI resource
     */
    apiBase: string;
    /**
     * The deployment for your Azure OpenAI resource.  You can find this in the Azure portal under your Azure OpenAI resource
     */
    deployment: string;
    /**
     * The API key for your Azure OpenAI resource.  You can find this in the Azure portal under your Azure OpenAI resource
     */
    openaiKey: string;
}

export interface DestinationSnowflakeCortexConfigurationEmbeddingCohere {
    cohereKey: string;
}

export interface DestinationSnowflakeCortexConfigurationEmbeddingFake {
}

export interface DestinationSnowflakeCortexConfigurationEmbeddingOpenAi {
    openaiKey: string;
}

export interface DestinationSnowflakeCortexConfigurationEmbeddingOpenAiCompatible {
    /**
     * Default: ""
     */
    apiKey: string;
    /**
     * The base URL for your OpenAI-compatible service
     */
    baseUrl: string;
    /**
     * The number of dimensions the embedding model is generating
     */
    dimensions: number;
    /**
     * The name of the model to use for embedding. Default: "text-embedding-ada-002"
     */
    modelName: string;
}

export interface DestinationSnowflakeCortexConfigurationIndexing {
    credentials: outputs.DestinationSnowflakeCortexConfigurationIndexingCredentials;
    /**
     * Enter the name of the database that you want to sync data into
     */
    database: string;
    /**
     * Enter the name of the default schema
     */
    defaultSchema: string;
    /**
     * Enter the account name you want to use to access the database. This is usually the identifier before .snowflakecomputing.com
     */
    host: string;
    /**
     * Enter the role that you want to use to access Snowflake
     */
    role: string;
    /**
     * Enter the name of the user you want to use to access the database
     */
    username: string;
    /**
     * Enter the name of the warehouse that you want to use as a compute cluster
     */
    warehouse: string;
}

export interface DestinationSnowflakeCortexConfigurationIndexingCredentials {
    /**
     * Enter the password you want to use to access the database
     */
    password: string;
}

export interface DestinationSnowflakeCortexConfigurationProcessing {
    /**
     * Size of overlap between chunks in tokens to store in vector store to better capture relevant context. Default: 0
     */
    chunkOverlap: number;
    /**
     * Size of chunks in tokens to store in vector store (make sure it is not too big for the context if your LLM)
     */
    chunkSize: number;
    /**
     * List of fields to rename. Not applicable for nested fields, but can be used to rename fields already flattened via dot notation.
     */
    fieldNameMappings?: outputs.DestinationSnowflakeCortexConfigurationProcessingFieldNameMapping[];
    /**
     * List of fields in the record that should be stored as metadata. The field list is applied to all streams in the same way and non-existing fields are ignored. If none are defined, all fields are considered metadata fields. When specifying text fields, you can access nested fields in the record by using dot notation, e.g. `user.name` will access the `name` field in the `user` object. It's also possible to use wildcards to access all fields in an object, e.g. `users.*.name` will access all `names` fields in all entries of the `users` array. When specifying nested paths, all matching values are flattened into an array set to a field named by the path.
     */
    metadataFields: string[];
    /**
     * List of fields in the record that should be used to calculate the embedding. The field list is applied to all streams in the same way and non-existing fields are ignored. If none are defined, all fields are considered text fields. When specifying text fields, you can access nested fields in the record by using dot notation, e.g. `user.name` will access the `name` field in the `user` object. It's also possible to use wildcards to access all fields in an object, e.g. `users.*.name` will access all `names` fields in all entries of the `users` array.
     */
    textFields: string[];
    /**
     * Split text fields into chunks based on the specified method.
     */
    textSplitter?: outputs.DestinationSnowflakeCortexConfigurationProcessingTextSplitter;
}

export interface DestinationSnowflakeCortexConfigurationProcessingFieldNameMapping {
    /**
     * The field name in the source
     */
    fromField: string;
    /**
     * The field name to use in the destination
     */
    toField: string;
}

export interface DestinationSnowflakeCortexConfigurationProcessingTextSplitter {
    /**
     * Split the text by Markdown headers down to the specified header level. If the chunk size fits multiple sections, they will be combined into a single chunk.
     */
    byMarkdownHeader?: outputs.DestinationSnowflakeCortexConfigurationProcessingTextSplitterByMarkdownHeader;
    /**
     * Split the text by suitable delimiters based on the programming language. This is useful for splitting code into chunks.
     */
    byProgrammingLanguage?: outputs.DestinationSnowflakeCortexConfigurationProcessingTextSplitterByProgrammingLanguage;
    /**
     * Split the text by the list of separators until the chunk size is reached, using the earlier mentioned separators where possible. This is useful for splitting text fields by paragraphs, sentences, words, etc.
     */
    bySeparator?: outputs.DestinationSnowflakeCortexConfigurationProcessingTextSplitterBySeparator;
}

export interface DestinationSnowflakeCortexConfigurationProcessingTextSplitterByMarkdownHeader {
    /**
     * Level of markdown headers to split text fields by. Headings down to the specified level will be used as split points. Default: 1
     */
    splitLevel: number;
}

export interface DestinationSnowflakeCortexConfigurationProcessingTextSplitterByProgrammingLanguage {
    /**
     * Split code in suitable places based on the programming language. must be one of ["cpp", "go", "java", "js", "php", "proto", "python", "rst", "ruby", "rust", "scala", "swift", "markdown", "latex", "html", "sol"]
     */
    language: string;
}

export interface DestinationSnowflakeCortexConfigurationProcessingTextSplitterBySeparator {
    /**
     * Whether to keep the separator in the resulting chunks. Default: false
     */
    keepSeparator: boolean;
    /**
     * List of separator strings to split text fields by. The separator itself needs to be wrapped in double quotes, e.g. to split by the dot character, use ".". To split by a newline, use "\n".
     */
    separators?: string[];
}

export interface DestinationSnowflakeCortexResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.DestinationSnowflakeCortexResourceAllocationDefault;
    jobSpecifics: outputs.DestinationSnowflakeCortexResourceAllocationJobSpecific[];
}

export interface DestinationSnowflakeCortexResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationSnowflakeCortexResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.DestinationSnowflakeCortexResourceAllocationJobSpecificResourceRequirements;
}

export interface DestinationSnowflakeCortexResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationSnowflakeResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.DestinationSnowflakeResourceAllocationDefault;
    jobSpecifics: outputs.DestinationSnowflakeResourceAllocationJobSpecific[];
}

export interface DestinationSnowflakeResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationSnowflakeResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.DestinationSnowflakeResourceAllocationJobSpecificResourceRequirements;
}

export interface DestinationSnowflakeResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationTeradataConfiguration {
    /**
     * Hostname of the database.
     */
    host: string;
    /**
     * Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '&'. (example: key1=value1&key2=value2&key3=value3).
     */
    jdbcUrlParams?: string;
    logmech?: outputs.DestinationTeradataConfigurationLogmech;
    /**
     * Defines the custom session query band using name-value pairs. For example, 'org=Finance;report=Fin123;'
     */
    queryBand?: string;
    /**
     * The default schema tables are written to if the source does not specify a namespace. The usual value for this field is "public". Default: "airbyte_td"
     */
    schema: string;
    /**
     * Encrypt data using SSL. When activating SSL, please select one of the SSL modes. Default: false
     */
    ssl: boolean;
    /**
     * SSL connection modes. 
     *  <b>disable</b> - Chose this mode to disable encryption of communication between Airbyte and destination database
     *  <b>allow</b> - Chose this mode to enable encryption only when required by the destination database
     *  <b>prefer</b> - Chose this mode to allow unencrypted connection only if the destination database does not support encryption
     *  <b>require</b> - Chose this mode to always require encryption. If the destination database server does not support encryption, connection will fail
     *   <b>verify-ca</b> - Chose this mode to always require encryption and to verify that the destination database server has a valid SSL certificate
     *   <b>verify-full</b> - This is the most secure mode. Chose this mode to always require encryption and to verify the identity of the destination database server
     *  See more information - <a href="https://teradata-docs.s3.amazonaws.com/doc/connectivity/jdbc/reference/current/jdbcug_chapter_2.html#URL_SSLMODE"> in the docs</a>.
     */
    sslMode?: outputs.DestinationTeradataConfigurationSslMode;
}

export interface DestinationTeradataConfigurationLogmech {
    ldap?: outputs.DestinationTeradataConfigurationLogmechLdap;
    td2?: outputs.DestinationTeradataConfigurationLogmechTd2;
}

export interface DestinationTeradataConfigurationLogmechLdap {
    /**
     * Enter the password associated with the username.
     */
    password: string;
    /**
     * Username to use to access the database.
     */
    username: string;
}

export interface DestinationTeradataConfigurationLogmechTd2 {
    /**
     * Enter the password associated with the username.
     */
    password: string;
    /**
     * Username to use to access the database.
     */
    username: string;
}

export interface DestinationTeradataConfigurationSslMode {
    /**
     * Allow SSL mode.
     */
    allow?: outputs.DestinationTeradataConfigurationSslModeAllow;
    /**
     * Disable SSL.
     */
    disable?: outputs.DestinationTeradataConfigurationSslModeDisable;
    /**
     * Prefer SSL mode.
     */
    prefer?: outputs.DestinationTeradataConfigurationSslModePrefer;
    /**
     * Require SSL mode.
     */
    require?: outputs.DestinationTeradataConfigurationSslModeRequire;
    /**
     * Verify-ca SSL mode.
     */
    verifyCa?: outputs.DestinationTeradataConfigurationSslModeVerifyCa;
    /**
     * Verify-full SSL mode.
     */
    verifyFull?: outputs.DestinationTeradataConfigurationSslModeVerifyFull;
}

export interface DestinationTeradataConfigurationSslModeAllow {
}

export interface DestinationTeradataConfigurationSslModeDisable {
}

export interface DestinationTeradataConfigurationSslModePrefer {
}

export interface DestinationTeradataConfigurationSslModeRequire {
}

export interface DestinationTeradataConfigurationSslModeVerifyCa {
    /**
     * Specifies the file name of a PEM file that contains Certificate Authority (CA) certificates for use with SSLMODE=verify-ca.
     *  See more information - <a href="https://teradata-docs.s3.amazonaws.com/doc/connectivity/jdbc/reference/current/jdbcug_chapter_2.html#URL_SSLCA"> in the docs</a>.
     */
    sslCaCertificate: string;
}

export interface DestinationTeradataConfigurationSslModeVerifyFull {
    /**
     * Specifies the file name of a PEM file that contains Certificate Authority (CA) certificates for use with SSLMODE=verify-full.
     *  See more information - <a href="https://teradata-docs.s3.amazonaws.com/doc/connectivity/jdbc/reference/current/jdbcug_chapter_2.html#URL_SSLCA"> in the docs</a>.
     */
    sslCaCertificate: string;
}

export interface DestinationTeradataResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.DestinationTeradataResourceAllocationDefault;
    jobSpecifics: outputs.DestinationTeradataResourceAllocationJobSpecific[];
}

export interface DestinationTeradataResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationTeradataResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.DestinationTeradataResourceAllocationJobSpecificResourceRequirements;
}

export interface DestinationTeradataResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationTimeplusConfiguration {
    /**
     * Personal API key
     */
    apikey: string;
    /**
     * Timeplus workspace endpoint. Default: "https://us-west-2.timeplus.cloud/<workspace_id>"
     */
    endpoint: string;
}

export interface DestinationTimeplusResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.DestinationTimeplusResourceAllocationDefault;
    jobSpecifics: outputs.DestinationTimeplusResourceAllocationJobSpecific[];
}

export interface DestinationTimeplusResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationTimeplusResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.DestinationTimeplusResourceAllocationJobSpecificResourceRequirements;
}

export interface DestinationTimeplusResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationTypesenseConfiguration {
    /**
     * Typesense API Key
     */
    apiKey: string;
    /**
     * How many documents should be imported together. Default 1000
     */
    batchSize?: number;
    /**
     * Hostname of the Typesense instance without protocol. Accept multiple hosts separated by comma.
     */
    host: string;
    /**
     * Path of the Typesense instance. Default is none
     */
    path?: string;
    /**
     * Port of the Typesense instance. Ex: 8108, 80, 443. Default is 8108
     */
    port?: string;
    /**
     * Protocol of the Typesense instance. Ex: http or https. Default is https
     */
    protocol?: string;
}

export interface DestinationTypesenseResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.DestinationTypesenseResourceAllocationDefault;
    jobSpecifics: outputs.DestinationTypesenseResourceAllocationJobSpecific[];
}

export interface DestinationTypesenseResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationTypesenseResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.DestinationTypesenseResourceAllocationJobSpecificResourceRequirements;
}

export interface DestinationTypesenseResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationVectaraConfiguration {
    /**
     * The Name of Corpus to load data into
     */
    corpusName: string;
    /**
     * Your customer id as it is in the authenticaion url
     */
    customerId: string;
    /**
     * List of fields in the record that should be stored as metadata. The field list is applied to all streams in the same way and non-existing fields are ignored. If none are defined, all fields are considered metadata fields. When specifying text fields, you can access nested fields in the record by using dot notation, e.g. `user.name` will access the `name` field in the `user` object. It's also possible to use wildcards to access all fields in an object, e.g. `users.*.name` will access all `names` fields in all entries of the `users` array. When specifying nested paths, all matching values are flattened into an array set to a field named by the path.
     */
    metadataFields: string[];
    /**
     * OAuth2.0 credentials used to authenticate admin actions (creating/deleting corpora)
     */
    oauth2: outputs.DestinationVectaraConfigurationOauth2;
    /**
     * Parallelize indexing into Vectara with multiple threads. Default: false
     */
    parallelize: boolean;
    /**
     * List of fields in the record that should be in the section of the document. The field list is applied to all streams in the same way and non-existing fields are ignored. If none are defined, all fields are considered text fields. When specifying text fields, you can access nested fields in the record by using dot notation, e.g. `user.name` will access the `name` field in the `user` object. It's also possible to use wildcards to access all fields in an object, e.g. `users.*.name` will access all `names` fields in all entries of the `users` array.
     */
    textFields: string[];
    /**
     * A field that will be used to populate the `title` of each document. The field list is applied to all streams in the same way and non-existing fields are ignored. If none are defined, all fields are considered text fields. When specifying text fields, you can access nested fields in the record by using dot notation, e.g. `user.name` will access the `name` field in the `user` object. It's also possible to use wildcards to access all fields in an object, e.g. `users.*.name` will access all `names` fields in all entries of the `users` array. Default: ""
     */
    titleField: string;
}

export interface DestinationVectaraConfigurationOauth2 {
    /**
     * OAuth2.0 client id
     */
    clientId: string;
    /**
     * OAuth2.0 client secret
     */
    clientSecret: string;
}

export interface DestinationVectaraResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.DestinationVectaraResourceAllocationDefault;
    jobSpecifics: outputs.DestinationVectaraResourceAllocationJobSpecific[];
}

export interface DestinationVectaraResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationVectaraResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.DestinationVectaraResourceAllocationJobSpecificResourceRequirements;
}

export interface DestinationVectaraResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationWeaviateConfiguration {
    /**
     * Embedding configuration
     */
    embedding: outputs.DestinationWeaviateConfigurationEmbedding;
    /**
     * Indexing configuration
     */
    indexing: outputs.DestinationWeaviateConfigurationIndexing;
    /**
     * Do not store the text that gets embedded along with the vector and the metadata in the destination. If set to true, only the vector and the metadata will be stored - in this case raw text for LLM use cases needs to be retrieved from another source. Default: false
     */
    omitRawText: boolean;
    processing: outputs.DestinationWeaviateConfigurationProcessing;
}

export interface DestinationWeaviateConfigurationEmbedding {
    /**
     * Use the Azure-hosted OpenAI API to embed text. This option is using the text-embedding-ada-002 model with 1536 embedding dimensions.
     */
    azureOpenAi?: outputs.DestinationWeaviateConfigurationEmbeddingAzureOpenAi;
    /**
     * Use the Cohere API to embed text.
     */
    cohere?: outputs.DestinationWeaviateConfigurationEmbeddingCohere;
    /**
     * Use a fake embedding made out of random vectors with 1536 embedding dimensions. This is useful for testing the data pipeline without incurring any costs.
     */
    fake?: outputs.DestinationWeaviateConfigurationEmbeddingFake;
    /**
     * Use a field in the record as the embedding. This is useful if you already have an embedding for your data and want to store it in the vector store.
     */
    fromField?: outputs.DestinationWeaviateConfigurationEmbeddingFromField;
    /**
     * Do not calculate and pass embeddings to Weaviate. Suitable for clusters with configured vectorizers to calculate embeddings within Weaviate or for classes that should only support regular text search.
     */
    noExternalEmbedding?: outputs.DestinationWeaviateConfigurationEmbeddingNoExternalEmbedding;
    /**
     * Use the OpenAI API to embed text. This option is using the text-embedding-ada-002 model with 1536 embedding dimensions.
     */
    openAi?: outputs.DestinationWeaviateConfigurationEmbeddingOpenAi;
    /**
     * Use a service that's compatible with the OpenAI API to embed text.
     */
    openAiCompatible?: outputs.DestinationWeaviateConfigurationEmbeddingOpenAiCompatible;
}

export interface DestinationWeaviateConfigurationEmbeddingAzureOpenAi {
    /**
     * The base URL for your Azure OpenAI resource.  You can find this in the Azure portal under your Azure OpenAI resource
     */
    apiBase: string;
    /**
     * The deployment for your Azure OpenAI resource.  You can find this in the Azure portal under your Azure OpenAI resource
     */
    deployment: string;
    /**
     * The API key for your Azure OpenAI resource.  You can find this in the Azure portal under your Azure OpenAI resource
     */
    openaiKey: string;
}

export interface DestinationWeaviateConfigurationEmbeddingCohere {
    cohereKey: string;
}

export interface DestinationWeaviateConfigurationEmbeddingFake {
}

export interface DestinationWeaviateConfigurationEmbeddingFromField {
    /**
     * The number of dimensions the embedding model is generating
     */
    dimensions: number;
    /**
     * Name of the field in the record that contains the embedding
     */
    fieldName: string;
}

export interface DestinationWeaviateConfigurationEmbeddingNoExternalEmbedding {
}

export interface DestinationWeaviateConfigurationEmbeddingOpenAi {
    openaiKey: string;
}

export interface DestinationWeaviateConfigurationEmbeddingOpenAiCompatible {
    /**
     * Default: ""
     */
    apiKey: string;
    /**
     * The base URL for your OpenAI-compatible service
     */
    baseUrl: string;
    /**
     * The number of dimensions the embedding model is generating
     */
    dimensions: number;
    /**
     * The name of the model to use for embedding. Default: "text-embedding-ada-002"
     */
    modelName: string;
}

export interface DestinationWeaviateConfigurationIndexing {
    /**
     * Additional HTTP headers to send with every request.
     */
    additionalHeaders?: outputs.DestinationWeaviateConfigurationIndexingAdditionalHeader[];
    /**
     * Authentication method
     */
    auth: outputs.DestinationWeaviateConfigurationIndexingAuth;
    /**
     * The number of records to send to Weaviate in each batch. Default: 128
     */
    batchSize: number;
    /**
     * The vectorizer to use if new classes need to be created. Default: "none"; must be one of ["none", "text2vec-cohere", "text2vec-huggingface", "text2vec-openai", "text2vec-palm", "text2vec-contextionary", "text2vec-transformers", "text2vec-gpt4all"]
     */
    defaultVectorizer: string;
    /**
     * The public endpoint of the Weaviate cluster.
     */
    host: string;
    /**
     * The tenant ID to use for multi tenancy. Default: ""
     */
    tenantId: string;
    /**
     * The field in the object that contains the embedded text. Default: "text"
     */
    textField: string;
}

export interface DestinationWeaviateConfigurationIndexingAdditionalHeader {
    headerKey: string;
    value: string;
}

export interface DestinationWeaviateConfigurationIndexingAuth {
    /**
     * Authenticate using an API token (suitable for Weaviate Cloud)
     */
    apiToken?: outputs.DestinationWeaviateConfigurationIndexingAuthApiToken;
    /**
     * Do not authenticate (suitable for locally running test clusters, do not use for clusters with public IP addresses)
     */
    noAuthentication?: outputs.DestinationWeaviateConfigurationIndexingAuthNoAuthentication;
    /**
     * Authenticate using username and password (suitable for self-managed Weaviate clusters)
     */
    usernamePassword?: outputs.DestinationWeaviateConfigurationIndexingAuthUsernamePassword;
}

export interface DestinationWeaviateConfigurationIndexingAuthApiToken {
    /**
     * API Token for the Weaviate instance
     */
    token: string;
}

export interface DestinationWeaviateConfigurationIndexingAuthNoAuthentication {
}

export interface DestinationWeaviateConfigurationIndexingAuthUsernamePassword {
    /**
     * Password for the Weaviate cluster
     */
    password: string;
    /**
     * Username for the Weaviate cluster
     */
    username: string;
}

export interface DestinationWeaviateConfigurationProcessing {
    /**
     * Size of overlap between chunks in tokens to store in vector store to better capture relevant context. Default: 0
     */
    chunkOverlap: number;
    /**
     * Size of chunks in tokens to store in vector store (make sure it is not too big for the context if your LLM)
     */
    chunkSize: number;
    /**
     * List of fields to rename. Not applicable for nested fields, but can be used to rename fields already flattened via dot notation.
     */
    fieldNameMappings?: outputs.DestinationWeaviateConfigurationProcessingFieldNameMapping[];
    /**
     * List of fields in the record that should be stored as metadata. The field list is applied to all streams in the same way and non-existing fields are ignored. If none are defined, all fields are considered metadata fields. When specifying text fields, you can access nested fields in the record by using dot notation, e.g. `user.name` will access the `name` field in the `user` object. It's also possible to use wildcards to access all fields in an object, e.g. `users.*.name` will access all `names` fields in all entries of the `users` array. When specifying nested paths, all matching values are flattened into an array set to a field named by the path.
     */
    metadataFields: string[];
    /**
     * List of fields in the record that should be used to calculate the embedding. The field list is applied to all streams in the same way and non-existing fields are ignored. If none are defined, all fields are considered text fields. When specifying text fields, you can access nested fields in the record by using dot notation, e.g. `user.name` will access the `name` field in the `user` object. It's also possible to use wildcards to access all fields in an object, e.g. `users.*.name` will access all `names` fields in all entries of the `users` array.
     */
    textFields: string[];
    /**
     * Split text fields into chunks based on the specified method.
     */
    textSplitter?: outputs.DestinationWeaviateConfigurationProcessingTextSplitter;
}

export interface DestinationWeaviateConfigurationProcessingFieldNameMapping {
    /**
     * The field name in the source
     */
    fromField: string;
    /**
     * The field name to use in the destination
     */
    toField: string;
}

export interface DestinationWeaviateConfigurationProcessingTextSplitter {
    /**
     * Split the text by Markdown headers down to the specified header level. If the chunk size fits multiple sections, they will be combined into a single chunk.
     */
    byMarkdownHeader?: outputs.DestinationWeaviateConfigurationProcessingTextSplitterByMarkdownHeader;
    /**
     * Split the text by suitable delimiters based on the programming language. This is useful for splitting code into chunks.
     */
    byProgrammingLanguage?: outputs.DestinationWeaviateConfigurationProcessingTextSplitterByProgrammingLanguage;
    /**
     * Split the text by the list of separators until the chunk size is reached, using the earlier mentioned separators where possible. This is useful for splitting text fields by paragraphs, sentences, words, etc.
     */
    bySeparator?: outputs.DestinationWeaviateConfigurationProcessingTextSplitterBySeparator;
}

export interface DestinationWeaviateConfigurationProcessingTextSplitterByMarkdownHeader {
    /**
     * Level of markdown headers to split text fields by. Headings down to the specified level will be used as split points. Default: 1
     */
    splitLevel: number;
}

export interface DestinationWeaviateConfigurationProcessingTextSplitterByProgrammingLanguage {
    /**
     * Split code in suitable places based on the programming language. must be one of ["cpp", "go", "java", "js", "php", "proto", "python", "rst", "ruby", "rust", "scala", "swift", "markdown", "latex", "html", "sol"]
     */
    language: string;
}

export interface DestinationWeaviateConfigurationProcessingTextSplitterBySeparator {
    /**
     * Whether to keep the separator in the resulting chunks. Default: false
     */
    keepSeparator: boolean;
    /**
     * List of separator strings to split text fields by. The separator itself needs to be wrapped in double quotes, e.g. to split by the dot character, use ".". To split by a newline, use "\n".
     */
    separators?: string[];
}

export interface DestinationWeaviateResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.DestinationWeaviateResourceAllocationDefault;
    jobSpecifics: outputs.DestinationWeaviateResourceAllocationJobSpecific[];
}

export interface DestinationWeaviateResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationWeaviateResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.DestinationWeaviateResourceAllocationJobSpecificResourceRequirements;
}

export interface DestinationWeaviateResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationYellowbrickConfiguration {
    /**
     * Name of the database.
     */
    database: string;
    /**
     * Hostname of the database.
     */
    host: string;
    /**
     * Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '&'. (example: key1=value1&key2=value2&key3=value3).
     */
    jdbcUrlParams?: string;
    /**
     * Password associated with the username.
     */
    password?: string;
    /**
     * Port of the database. Default: 5432
     */
    port: number;
    /**
     * The default schema tables are written to if the source does not specify a namespace. The usual value for this field is "public". Default: "public"
     */
    schema: string;
    /**
     * Encrypt data using SSL. When activating SSL, please select one of the connection modes. Default: false
     */
    ssl: boolean;
    /**
     * SSL connection modes. 
     *  <b>disable</b> - Chose this mode to disable encryption of communication between Airbyte and destination database
     *  <b>allow</b> - Chose this mode to enable encryption only when required by the source database
     *  <b>prefer</b> - Chose this mode to allow unencrypted connection only if the source database does not support encryption
     *  <b>require</b> - Chose this mode to always require encryption. If the source database server does not support encryption, connection will fail
     *   <b>verify-ca</b> - Chose this mode to always require encryption and to verify that the source database server has a valid SSL certificate
     *   <b>verify-full</b> - This is the most secure mode. Chose this mode to always require encryption and to verify the identity of the source database server
     *  See more information - <a href="https://jdbc.postgresql.org/documentation/head/ssl-client.html"> in the docs</a>.
     */
    sslMode?: outputs.DestinationYellowbrickConfigurationSslMode;
    /**
     * Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
     */
    tunnelMethod?: outputs.DestinationYellowbrickConfigurationTunnelMethod;
    /**
     * Username to use to access the database.
     */
    username: string;
}

export interface DestinationYellowbrickConfigurationSslMode {
    /**
     * Allow SSL mode.
     */
    allow?: outputs.DestinationYellowbrickConfigurationSslModeAllow;
    /**
     * Disable SSL.
     */
    disable?: outputs.DestinationYellowbrickConfigurationSslModeDisable;
    /**
     * Prefer SSL mode.
     */
    prefer?: outputs.DestinationYellowbrickConfigurationSslModePrefer;
    /**
     * Require SSL mode.
     */
    require?: outputs.DestinationYellowbrickConfigurationSslModeRequire;
    /**
     * Verify-ca SSL mode.
     */
    verifyCa?: outputs.DestinationYellowbrickConfigurationSslModeVerifyCa;
    /**
     * Verify-full SSL mode.
     */
    verifyFull?: outputs.DestinationYellowbrickConfigurationSslModeVerifyFull;
}

export interface DestinationYellowbrickConfigurationSslModeAllow {
}

export interface DestinationYellowbrickConfigurationSslModeDisable {
}

export interface DestinationYellowbrickConfigurationSslModePrefer {
}

export interface DestinationYellowbrickConfigurationSslModeRequire {
}

export interface DestinationYellowbrickConfigurationSslModeVerifyCa {
    /**
     * CA certificate
     */
    caCertificate: string;
    /**
     * Password for keystorage. This field is optional. If you do not add it - the password will be generated automatically.
     */
    clientKeyPassword?: string;
}

export interface DestinationYellowbrickConfigurationSslModeVerifyFull {
    /**
     * CA certificate
     */
    caCertificate: string;
    /**
     * Client certificate
     */
    clientCertificate: string;
    /**
     * Client key
     */
    clientKey: string;
    /**
     * Password for keystorage. This field is optional. If you do not add it - the password will be generated automatically.
     */
    clientKeyPassword?: string;
}

export interface DestinationYellowbrickConfigurationTunnelMethod {
    noTunnel?: outputs.DestinationYellowbrickConfigurationTunnelMethodNoTunnel;
    passwordAuthentication?: outputs.DestinationYellowbrickConfigurationTunnelMethodPasswordAuthentication;
    sshKeyAuthentication?: outputs.DestinationYellowbrickConfigurationTunnelMethodSshKeyAuthentication;
}

export interface DestinationYellowbrickConfigurationTunnelMethodNoTunnel {
}

export interface DestinationYellowbrickConfigurationTunnelMethodPasswordAuthentication {
    /**
     * Hostname of the jump server host that allows inbound ssh tunnel.
     */
    tunnelHost: string;
    /**
     * Port on the proxy/jump server that accepts inbound ssh connections. Default: 22
     */
    tunnelPort: number;
    /**
     * OS-level username for logging into the jump server host
     */
    tunnelUser: string;
    /**
     * OS-level password for logging into the jump server host
     */
    tunnelUserPassword: string;
}

export interface DestinationYellowbrickConfigurationTunnelMethodSshKeyAuthentication {
    /**
     * OS-level user account ssh key credentials in RSA PEM format ( created with ssh-keygen -t rsa -m PEM -f myuser_rsa )
     */
    sshKey: string;
    /**
     * Hostname of the jump server host that allows inbound ssh tunnel.
     */
    tunnelHost: string;
    /**
     * Port on the proxy/jump server that accepts inbound ssh connections. Default: 22
     */
    tunnelPort: number;
    /**
     * OS-level username for logging into the jump server host.
     */
    tunnelUser: string;
}

export interface DestinationYellowbrickResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.DestinationYellowbrickResourceAllocationDefault;
    jobSpecifics: outputs.DestinationYellowbrickResourceAllocationJobSpecific[];
}

export interface DestinationYellowbrickResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface DestinationYellowbrickResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.DestinationYellowbrickResourceAllocationJobSpecificResourceRequirements;
}

export interface DestinationYellowbrickResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetConnectionConfigurations {
    streams: outputs.GetConnectionConfigurationsStream[];
}

export interface GetConnectionConfigurationsStream {
    /**
     * Path to the field that will be used to determine if a record is new or modified since the last sync. This field is REQUIRED if `sync_mode` is `incremental` unless there is a default.
     */
    cursorFields: string[];
    /**
     * Mappers that should be applied to the stream before writing to the destination.
     */
    mappers: outputs.GetConnectionConfigurationsStreamMapper[];
    name: string;
    /**
     * Paths to the fields that will be used as primary key. This field is REQUIRED if `destination_sync_mode` is `*_dedup` unless it is already supplied by the source schema.
     */
    primaryKeys: string[][];
    /**
     * Paths to the fields that will be included in the configured catalog.
     */
    selectedFields: outputs.GetConnectionConfigurationsStreamSelectedField[];
    syncMode: string;
}

export interface GetConnectionConfigurationsStreamMapper {
    id: string;
    /**
     * The values required to configure the mapper.
     */
    mapperConfiguration: outputs.GetConnectionConfigurationsStreamMapperMapperConfiguration;
    type: string;
}

export interface GetConnectionConfigurationsStreamMapperMapperConfiguration {
    encryption: outputs.GetConnectionConfigurationsStreamMapperMapperConfigurationEncryption;
    fieldRenaming: outputs.GetConnectionConfigurationsStreamMapperMapperConfigurationFieldRenaming;
    hashing: outputs.GetConnectionConfigurationsStreamMapperMapperConfigurationHashing;
    rowFiltering: outputs.GetConnectionConfigurationsStreamMapperMapperConfigurationRowFiltering;
}

export interface GetConnectionConfigurationsStreamMapperMapperConfigurationEncryption {
    aes: outputs.GetConnectionConfigurationsStreamMapperMapperConfigurationEncryptionAes;
    rsa: outputs.GetConnectionConfigurationsStreamMapperMapperConfigurationEncryptionRsa;
}

export interface GetConnectionConfigurationsStreamMapperMapperConfigurationEncryptionAes {
    algorithm: string;
    fieldNameSuffix: string;
    key: string;
    mode: string;
    padding: string;
    targetField: string;
}

export interface GetConnectionConfigurationsStreamMapperMapperConfigurationEncryptionRsa {
    algorithm: string;
    fieldNameSuffix: string;
    publicKey: string;
    targetField: string;
}

export interface GetConnectionConfigurationsStreamMapperMapperConfigurationFieldRenaming {
    /**
     * The new name for the field after renaming.
     */
    newFieldName: string;
    /**
     * The current name of the field to rename.
     */
    originalFieldName: string;
}

export interface GetConnectionConfigurationsStreamMapperMapperConfigurationHashing {
    /**
     * The suffix to append to the field name after hashing.
     */
    fieldNameSuffix: string;
    /**
     * The hashing algorithm to use.
     */
    method: string;
    /**
     * The name of the field to be hashed.
     */
    targetField: string;
}

export interface GetConnectionConfigurationsStreamMapperMapperConfigurationRowFiltering {
    /**
     * Parsed as JSON.
     */
    conditions: string;
}

export interface GetConnectionConfigurationsStreamSelectedField {
    fieldPaths: string[];
}

export interface GetConnectionSchedule {
    basicTiming: string;
    cronExpression: string;
    scheduleType: string;
}

export interface GetConnectionTag {
    color: string;
    name: string;
    tagId: string;
    workspaceId: string;
}

export interface GetDestinationAstraResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetDestinationAstraResourceAllocationDefault;
    jobSpecifics: outputs.GetDestinationAstraResourceAllocationJobSpecific[];
}

export interface GetDestinationAstraResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationAstraResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetDestinationAstraResourceAllocationJobSpecificResourceRequirements;
}

export interface GetDestinationAstraResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationAwsDatalakeResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetDestinationAwsDatalakeResourceAllocationDefault;
    jobSpecifics: outputs.GetDestinationAwsDatalakeResourceAllocationJobSpecific[];
}

export interface GetDestinationAwsDatalakeResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationAwsDatalakeResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetDestinationAwsDatalakeResourceAllocationJobSpecificResourceRequirements;
}

export interface GetDestinationAwsDatalakeResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationAzureBlobStorageResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetDestinationAzureBlobStorageResourceAllocationDefault;
    jobSpecifics: outputs.GetDestinationAzureBlobStorageResourceAllocationJobSpecific[];
}

export interface GetDestinationAzureBlobStorageResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationAzureBlobStorageResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetDestinationAzureBlobStorageResourceAllocationJobSpecificResourceRequirements;
}

export interface GetDestinationAzureBlobStorageResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationBigqueryResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetDestinationBigqueryResourceAllocationDefault;
    jobSpecifics: outputs.GetDestinationBigqueryResourceAllocationJobSpecific[];
}

export interface GetDestinationBigqueryResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationBigqueryResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetDestinationBigqueryResourceAllocationJobSpecificResourceRequirements;
}

export interface GetDestinationBigqueryResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationClickhouseResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetDestinationClickhouseResourceAllocationDefault;
    jobSpecifics: outputs.GetDestinationClickhouseResourceAllocationJobSpecific[];
}

export interface GetDestinationClickhouseResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationClickhouseResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetDestinationClickhouseResourceAllocationJobSpecificResourceRequirements;
}

export interface GetDestinationClickhouseResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationCobraResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetDestinationCobraResourceAllocationDefault;
    jobSpecifics: outputs.GetDestinationCobraResourceAllocationJobSpecific[];
}

export interface GetDestinationCobraResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationCobraResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetDestinationCobraResourceAllocationJobSpecificResourceRequirements;
}

export interface GetDestinationCobraResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationConvexResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetDestinationConvexResourceAllocationDefault;
    jobSpecifics: outputs.GetDestinationConvexResourceAllocationJobSpecific[];
}

export interface GetDestinationConvexResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationConvexResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetDestinationConvexResourceAllocationJobSpecificResourceRequirements;
}

export interface GetDestinationConvexResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationCustomResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetDestinationCustomResourceAllocationDefault;
    jobSpecifics: outputs.GetDestinationCustomResourceAllocationJobSpecific[];
}

export interface GetDestinationCustomResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationCustomResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetDestinationCustomResourceAllocationJobSpecificResourceRequirements;
}

export interface GetDestinationCustomResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationDatabricksResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetDestinationDatabricksResourceAllocationDefault;
    jobSpecifics: outputs.GetDestinationDatabricksResourceAllocationJobSpecific[];
}

export interface GetDestinationDatabricksResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationDatabricksResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetDestinationDatabricksResourceAllocationJobSpecificResourceRequirements;
}

export interface GetDestinationDatabricksResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationDeepsetResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetDestinationDeepsetResourceAllocationDefault;
    jobSpecifics: outputs.GetDestinationDeepsetResourceAllocationJobSpecific[];
}

export interface GetDestinationDeepsetResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationDeepsetResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetDestinationDeepsetResourceAllocationJobSpecificResourceRequirements;
}

export interface GetDestinationDeepsetResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationDevNullResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetDestinationDevNullResourceAllocationDefault;
    jobSpecifics: outputs.GetDestinationDevNullResourceAllocationJobSpecific[];
}

export interface GetDestinationDevNullResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationDevNullResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetDestinationDevNullResourceAllocationJobSpecificResourceRequirements;
}

export interface GetDestinationDevNullResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationDuckdbResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetDestinationDuckdbResourceAllocationDefault;
    jobSpecifics: outputs.GetDestinationDuckdbResourceAllocationJobSpecific[];
}

export interface GetDestinationDuckdbResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationDuckdbResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetDestinationDuckdbResourceAllocationJobSpecificResourceRequirements;
}

export interface GetDestinationDuckdbResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationDynamodbResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetDestinationDynamodbResourceAllocationDefault;
    jobSpecifics: outputs.GetDestinationDynamodbResourceAllocationJobSpecific[];
}

export interface GetDestinationDynamodbResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationDynamodbResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetDestinationDynamodbResourceAllocationJobSpecificResourceRequirements;
}

export interface GetDestinationDynamodbResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationElasticsearchResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetDestinationElasticsearchResourceAllocationDefault;
    jobSpecifics: outputs.GetDestinationElasticsearchResourceAllocationJobSpecific[];
}

export interface GetDestinationElasticsearchResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationElasticsearchResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetDestinationElasticsearchResourceAllocationJobSpecificResourceRequirements;
}

export interface GetDestinationElasticsearchResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationFireboltResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetDestinationFireboltResourceAllocationDefault;
    jobSpecifics: outputs.GetDestinationFireboltResourceAllocationJobSpecific[];
}

export interface GetDestinationFireboltResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationFireboltResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetDestinationFireboltResourceAllocationJobSpecificResourceRequirements;
}

export interface GetDestinationFireboltResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationFirestoreResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetDestinationFirestoreResourceAllocationDefault;
    jobSpecifics: outputs.GetDestinationFirestoreResourceAllocationJobSpecific[];
}

export interface GetDestinationFirestoreResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationFirestoreResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetDestinationFirestoreResourceAllocationJobSpecificResourceRequirements;
}

export interface GetDestinationFirestoreResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationGcsResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetDestinationGcsResourceAllocationDefault;
    jobSpecifics: outputs.GetDestinationGcsResourceAllocationJobSpecific[];
}

export interface GetDestinationGcsResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationGcsResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetDestinationGcsResourceAllocationJobSpecificResourceRequirements;
}

export interface GetDestinationGcsResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationGoogleSheetsResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetDestinationGoogleSheetsResourceAllocationDefault;
    jobSpecifics: outputs.GetDestinationGoogleSheetsResourceAllocationJobSpecific[];
}

export interface GetDestinationGoogleSheetsResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationGoogleSheetsResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetDestinationGoogleSheetsResourceAllocationJobSpecificResourceRequirements;
}

export interface GetDestinationGoogleSheetsResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationMilvusResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetDestinationMilvusResourceAllocationDefault;
    jobSpecifics: outputs.GetDestinationMilvusResourceAllocationJobSpecific[];
}

export interface GetDestinationMilvusResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationMilvusResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetDestinationMilvusResourceAllocationJobSpecificResourceRequirements;
}

export interface GetDestinationMilvusResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationMongodbResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetDestinationMongodbResourceAllocationDefault;
    jobSpecifics: outputs.GetDestinationMongodbResourceAllocationJobSpecific[];
}

export interface GetDestinationMongodbResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationMongodbResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetDestinationMongodbResourceAllocationJobSpecificResourceRequirements;
}

export interface GetDestinationMongodbResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationMotherduckResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetDestinationMotherduckResourceAllocationDefault;
    jobSpecifics: outputs.GetDestinationMotherduckResourceAllocationJobSpecific[];
}

export interface GetDestinationMotherduckResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationMotherduckResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetDestinationMotherduckResourceAllocationJobSpecificResourceRequirements;
}

export interface GetDestinationMotherduckResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationMssqlResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetDestinationMssqlResourceAllocationDefault;
    jobSpecifics: outputs.GetDestinationMssqlResourceAllocationJobSpecific[];
}

export interface GetDestinationMssqlResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationMssqlResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetDestinationMssqlResourceAllocationJobSpecificResourceRequirements;
}

export interface GetDestinationMssqlResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationMssqlV2ResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetDestinationMssqlV2ResourceAllocationDefault;
    jobSpecifics: outputs.GetDestinationMssqlV2ResourceAllocationJobSpecific[];
}

export interface GetDestinationMssqlV2ResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationMssqlV2ResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetDestinationMssqlV2ResourceAllocationJobSpecificResourceRequirements;
}

export interface GetDestinationMssqlV2ResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationMysqlResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetDestinationMysqlResourceAllocationDefault;
    jobSpecifics: outputs.GetDestinationMysqlResourceAllocationJobSpecific[];
}

export interface GetDestinationMysqlResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationMysqlResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetDestinationMysqlResourceAllocationJobSpecificResourceRequirements;
}

export interface GetDestinationMysqlResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationOracleResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetDestinationOracleResourceAllocationDefault;
    jobSpecifics: outputs.GetDestinationOracleResourceAllocationJobSpecific[];
}

export interface GetDestinationOracleResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationOracleResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetDestinationOracleResourceAllocationJobSpecificResourceRequirements;
}

export interface GetDestinationOracleResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationPgvectorResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetDestinationPgvectorResourceAllocationDefault;
    jobSpecifics: outputs.GetDestinationPgvectorResourceAllocationJobSpecific[];
}

export interface GetDestinationPgvectorResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationPgvectorResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetDestinationPgvectorResourceAllocationJobSpecificResourceRequirements;
}

export interface GetDestinationPgvectorResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationPineconeResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetDestinationPineconeResourceAllocationDefault;
    jobSpecifics: outputs.GetDestinationPineconeResourceAllocationJobSpecific[];
}

export interface GetDestinationPineconeResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationPineconeResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetDestinationPineconeResourceAllocationJobSpecificResourceRequirements;
}

export interface GetDestinationPineconeResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationPostgresResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetDestinationPostgresResourceAllocationDefault;
    jobSpecifics: outputs.GetDestinationPostgresResourceAllocationJobSpecific[];
}

export interface GetDestinationPostgresResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationPostgresResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetDestinationPostgresResourceAllocationJobSpecificResourceRequirements;
}

export interface GetDestinationPostgresResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationPubsubResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetDestinationPubsubResourceAllocationDefault;
    jobSpecifics: outputs.GetDestinationPubsubResourceAllocationJobSpecific[];
}

export interface GetDestinationPubsubResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationPubsubResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetDestinationPubsubResourceAllocationJobSpecificResourceRequirements;
}

export interface GetDestinationPubsubResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationQdrantResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetDestinationQdrantResourceAllocationDefault;
    jobSpecifics: outputs.GetDestinationQdrantResourceAllocationJobSpecific[];
}

export interface GetDestinationQdrantResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationQdrantResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetDestinationQdrantResourceAllocationJobSpecificResourceRequirements;
}

export interface GetDestinationQdrantResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationRedisResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetDestinationRedisResourceAllocationDefault;
    jobSpecifics: outputs.GetDestinationRedisResourceAllocationJobSpecific[];
}

export interface GetDestinationRedisResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationRedisResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetDestinationRedisResourceAllocationJobSpecificResourceRequirements;
}

export interface GetDestinationRedisResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationRedshiftResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetDestinationRedshiftResourceAllocationDefault;
    jobSpecifics: outputs.GetDestinationRedshiftResourceAllocationJobSpecific[];
}

export interface GetDestinationRedshiftResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationRedshiftResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetDestinationRedshiftResourceAllocationJobSpecificResourceRequirements;
}

export interface GetDestinationRedshiftResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationS3DataLakeResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetDestinationS3DataLakeResourceAllocationDefault;
    jobSpecifics: outputs.GetDestinationS3DataLakeResourceAllocationJobSpecific[];
}

export interface GetDestinationS3DataLakeResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationS3DataLakeResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetDestinationS3DataLakeResourceAllocationJobSpecificResourceRequirements;
}

export interface GetDestinationS3DataLakeResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationS3ResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetDestinationS3ResourceAllocationDefault;
    jobSpecifics: outputs.GetDestinationS3ResourceAllocationJobSpecific[];
}

export interface GetDestinationS3ResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationS3ResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetDestinationS3ResourceAllocationJobSpecificResourceRequirements;
}

export interface GetDestinationS3ResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationSftpJsonResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetDestinationSftpJsonResourceAllocationDefault;
    jobSpecifics: outputs.GetDestinationSftpJsonResourceAllocationJobSpecific[];
}

export interface GetDestinationSftpJsonResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationSftpJsonResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetDestinationSftpJsonResourceAllocationJobSpecificResourceRequirements;
}

export interface GetDestinationSftpJsonResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationSnowflakeCortexResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetDestinationSnowflakeCortexResourceAllocationDefault;
    jobSpecifics: outputs.GetDestinationSnowflakeCortexResourceAllocationJobSpecific[];
}

export interface GetDestinationSnowflakeCortexResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationSnowflakeCortexResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetDestinationSnowflakeCortexResourceAllocationJobSpecificResourceRequirements;
}

export interface GetDestinationSnowflakeCortexResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationSnowflakeResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetDestinationSnowflakeResourceAllocationDefault;
    jobSpecifics: outputs.GetDestinationSnowflakeResourceAllocationJobSpecific[];
}

export interface GetDestinationSnowflakeResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationSnowflakeResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetDestinationSnowflakeResourceAllocationJobSpecificResourceRequirements;
}

export interface GetDestinationSnowflakeResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationTeradataResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetDestinationTeradataResourceAllocationDefault;
    jobSpecifics: outputs.GetDestinationTeradataResourceAllocationJobSpecific[];
}

export interface GetDestinationTeradataResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationTeradataResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetDestinationTeradataResourceAllocationJobSpecificResourceRequirements;
}

export interface GetDestinationTeradataResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationTimeplusResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetDestinationTimeplusResourceAllocationDefault;
    jobSpecifics: outputs.GetDestinationTimeplusResourceAllocationJobSpecific[];
}

export interface GetDestinationTimeplusResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationTimeplusResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetDestinationTimeplusResourceAllocationJobSpecificResourceRequirements;
}

export interface GetDestinationTimeplusResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationTypesenseResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetDestinationTypesenseResourceAllocationDefault;
    jobSpecifics: outputs.GetDestinationTypesenseResourceAllocationJobSpecific[];
}

export interface GetDestinationTypesenseResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationTypesenseResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetDestinationTypesenseResourceAllocationJobSpecificResourceRequirements;
}

export interface GetDestinationTypesenseResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationVectaraResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetDestinationVectaraResourceAllocationDefault;
    jobSpecifics: outputs.GetDestinationVectaraResourceAllocationJobSpecific[];
}

export interface GetDestinationVectaraResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationVectaraResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetDestinationVectaraResourceAllocationJobSpecificResourceRequirements;
}

export interface GetDestinationVectaraResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationWeaviateResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetDestinationWeaviateResourceAllocationDefault;
    jobSpecifics: outputs.GetDestinationWeaviateResourceAllocationJobSpecific[];
}

export interface GetDestinationWeaviateResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationWeaviateResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetDestinationWeaviateResourceAllocationJobSpecificResourceRequirements;
}

export interface GetDestinationWeaviateResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationYellowbrickResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetDestinationYellowbrickResourceAllocationDefault;
    jobSpecifics: outputs.GetDestinationYellowbrickResourceAllocationJobSpecific[];
}

export interface GetDestinationYellowbrickResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetDestinationYellowbrickResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetDestinationYellowbrickResourceAllocationJobSpecificResourceRequirements;
}

export interface GetDestinationYellowbrickResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSource7shiftsResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSource7shiftsResourceAllocationDefault;
    jobSpecifics: outputs.GetSource7shiftsResourceAllocationJobSpecific[];
}

export interface GetSource7shiftsResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSource7shiftsResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSource7shiftsResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSource7shiftsResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceActivecampaignResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceActivecampaignResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceActivecampaignResourceAllocationJobSpecific[];
}

export interface GetSourceActivecampaignResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceActivecampaignResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceActivecampaignResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceActivecampaignResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceAgilecrmResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceAgilecrmResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceAgilecrmResourceAllocationJobSpecific[];
}

export interface GetSourceAgilecrmResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceAgilecrmResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceAgilecrmResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceAgilecrmResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceAhaResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceAhaResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceAhaResourceAllocationJobSpecific[];
}

export interface GetSourceAhaResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceAhaResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceAhaResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceAhaResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceAirbyteResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceAirbyteResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceAirbyteResourceAllocationJobSpecific[];
}

export interface GetSourceAirbyteResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceAirbyteResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceAirbyteResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceAirbyteResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceAircallResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceAircallResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceAircallResourceAllocationJobSpecific[];
}

export interface GetSourceAircallResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceAircallResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceAircallResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceAircallResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceAirtableResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceAirtableResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceAirtableResourceAllocationJobSpecific[];
}

export interface GetSourceAirtableResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceAirtableResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceAirtableResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceAirtableResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceAkeneoResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceAkeneoResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceAkeneoResourceAllocationJobSpecific[];
}

export interface GetSourceAkeneoResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceAkeneoResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceAkeneoResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceAkeneoResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceAlgoliaResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceAlgoliaResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceAlgoliaResourceAllocationJobSpecific[];
}

export interface GetSourceAlgoliaResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceAlgoliaResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceAlgoliaResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceAlgoliaResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceAlpacaBrokerApiResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceAlpacaBrokerApiResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceAlpacaBrokerApiResourceAllocationJobSpecific[];
}

export interface GetSourceAlpacaBrokerApiResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceAlpacaBrokerApiResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceAlpacaBrokerApiResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceAlpacaBrokerApiResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceAlphaVantageResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceAlphaVantageResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceAlphaVantageResourceAllocationJobSpecific[];
}

export interface GetSourceAlphaVantageResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceAlphaVantageResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceAlphaVantageResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceAlphaVantageResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceAmazonAdsResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceAmazonAdsResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceAmazonAdsResourceAllocationJobSpecific[];
}

export interface GetSourceAmazonAdsResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceAmazonAdsResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceAmazonAdsResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceAmazonAdsResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceAmazonSellerPartnerResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceAmazonSellerPartnerResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceAmazonSellerPartnerResourceAllocationJobSpecific[];
}

export interface GetSourceAmazonSellerPartnerResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceAmazonSellerPartnerResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceAmazonSellerPartnerResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceAmazonSellerPartnerResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceAmazonSqsResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceAmazonSqsResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceAmazonSqsResourceAllocationJobSpecific[];
}

export interface GetSourceAmazonSqsResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceAmazonSqsResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceAmazonSqsResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceAmazonSqsResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceAmplitudeResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceAmplitudeResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceAmplitudeResourceAllocationJobSpecific[];
}

export interface GetSourceAmplitudeResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceAmplitudeResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceAmplitudeResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceAmplitudeResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceApifyDatasetResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceApifyDatasetResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceApifyDatasetResourceAllocationJobSpecific[];
}

export interface GetSourceApifyDatasetResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceApifyDatasetResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceApifyDatasetResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceApifyDatasetResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceAppcuesResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceAppcuesResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceAppcuesResourceAllocationJobSpecific[];
}

export interface GetSourceAppcuesResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceAppcuesResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceAppcuesResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceAppcuesResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceAppfiguresResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceAppfiguresResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceAppfiguresResourceAllocationJobSpecific[];
}

export interface GetSourceAppfiguresResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceAppfiguresResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceAppfiguresResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceAppfiguresResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceAppfollowResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceAppfollowResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceAppfollowResourceAllocationJobSpecific[];
}

export interface GetSourceAppfollowResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceAppfollowResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceAppfollowResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceAppfollowResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceAppleSearchAdsResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceAppleSearchAdsResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceAppleSearchAdsResourceAllocationJobSpecific[];
}

export interface GetSourceAppleSearchAdsResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceAppleSearchAdsResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceAppleSearchAdsResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceAppleSearchAdsResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceApptivoResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceApptivoResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceApptivoResourceAllocationJobSpecific[];
}

export interface GetSourceApptivoResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceApptivoResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceApptivoResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceApptivoResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceAsanaResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceAsanaResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceAsanaResourceAllocationJobSpecific[];
}

export interface GetSourceAsanaResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceAsanaResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceAsanaResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceAsanaResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceAshbyResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceAshbyResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceAshbyResourceAllocationJobSpecific[];
}

export interface GetSourceAshbyResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceAshbyResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceAshbyResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceAshbyResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceAuth0ResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceAuth0ResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceAuth0ResourceAllocationJobSpecific[];
}

export interface GetSourceAuth0ResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceAuth0ResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceAuth0ResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceAuth0ResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceAwsCloudtrailResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceAwsCloudtrailResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceAwsCloudtrailResourceAllocationJobSpecific[];
}

export interface GetSourceAwsCloudtrailResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceAwsCloudtrailResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceAwsCloudtrailResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceAwsCloudtrailResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceAzureBlobStorageResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceAzureBlobStorageResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceAzureBlobStorageResourceAllocationJobSpecific[];
}

export interface GetSourceAzureBlobStorageResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceAzureBlobStorageResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceAzureBlobStorageResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceAzureBlobStorageResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceAzureTableResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceAzureTableResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceAzureTableResourceAllocationJobSpecific[];
}

export interface GetSourceAzureTableResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceAzureTableResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceAzureTableResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceAzureTableResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceBabelforceResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceBabelforceResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceBabelforceResourceAllocationJobSpecific[];
}

export interface GetSourceBabelforceResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceBabelforceResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceBabelforceResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceBabelforceResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceBambooHrResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceBambooHrResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceBambooHrResourceAllocationJobSpecific[];
}

export interface GetSourceBambooHrResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceBambooHrResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceBambooHrResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceBambooHrResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceBasecampResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceBasecampResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceBasecampResourceAllocationJobSpecific[];
}

export interface GetSourceBasecampResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceBasecampResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceBasecampResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceBasecampResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceBeamerResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceBeamerResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceBeamerResourceAllocationJobSpecific[];
}

export interface GetSourceBeamerResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceBeamerResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceBeamerResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceBeamerResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceBigmailerResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceBigmailerResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceBigmailerResourceAllocationJobSpecific[];
}

export interface GetSourceBigmailerResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceBigmailerResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceBigmailerResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceBigmailerResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceBigqueryResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceBigqueryResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceBigqueryResourceAllocationJobSpecific[];
}

export interface GetSourceBigqueryResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceBigqueryResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceBigqueryResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceBigqueryResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceBingAdsResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceBingAdsResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceBingAdsResourceAllocationJobSpecific[];
}

export interface GetSourceBingAdsResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceBingAdsResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceBingAdsResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceBingAdsResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceBitlyResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceBitlyResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceBitlyResourceAllocationJobSpecific[];
}

export interface GetSourceBitlyResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceBitlyResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceBitlyResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceBitlyResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceBloggerResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceBloggerResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceBloggerResourceAllocationJobSpecific[];
}

export interface GetSourceBloggerResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceBloggerResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceBloggerResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceBloggerResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceBoldsignResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceBoldsignResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceBoldsignResourceAllocationJobSpecific[];
}

export interface GetSourceBoldsignResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceBoldsignResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceBoldsignResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceBoldsignResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceBoxResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceBoxResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceBoxResourceAllocationJobSpecific[];
}

export interface GetSourceBoxResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceBoxResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceBoxResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceBoxResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceBraintreeResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceBraintreeResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceBraintreeResourceAllocationJobSpecific[];
}

export interface GetSourceBraintreeResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceBraintreeResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceBraintreeResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceBraintreeResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceBrazeResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceBrazeResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceBrazeResourceAllocationJobSpecific[];
}

export interface GetSourceBrazeResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceBrazeResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceBrazeResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceBrazeResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceBreezometerResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceBreezometerResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceBreezometerResourceAllocationJobSpecific[];
}

export interface GetSourceBreezometerResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceBreezometerResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceBreezometerResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceBreezometerResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceBreezyHrResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceBreezyHrResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceBreezyHrResourceAllocationJobSpecific[];
}

export interface GetSourceBreezyHrResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceBreezyHrResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceBreezyHrResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceBreezyHrResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceBrevoResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceBrevoResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceBrevoResourceAllocationJobSpecific[];
}

export interface GetSourceBrevoResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceBrevoResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceBrevoResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceBrevoResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceBrexResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceBrexResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceBrexResourceAllocationJobSpecific[];
}

export interface GetSourceBrexResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceBrexResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceBrexResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceBrexResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceBugsnagResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceBugsnagResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceBugsnagResourceAllocationJobSpecific[];
}

export interface GetSourceBugsnagResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceBugsnagResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceBugsnagResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceBugsnagResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceBuildkiteResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceBuildkiteResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceBuildkiteResourceAllocationJobSpecific[];
}

export interface GetSourceBuildkiteResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceBuildkiteResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceBuildkiteResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceBuildkiteResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceBunnyIncResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceBunnyIncResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceBunnyIncResourceAllocationJobSpecific[];
}

export interface GetSourceBunnyIncResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceBunnyIncResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceBunnyIncResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceBunnyIncResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceBuzzsproutResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceBuzzsproutResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceBuzzsproutResourceAllocationJobSpecific[];
}

export interface GetSourceBuzzsproutResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceBuzzsproutResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceBuzzsproutResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceBuzzsproutResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceCalComResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceCalComResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceCalComResourceAllocationJobSpecific[];
}

export interface GetSourceCalComResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceCalComResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceCalComResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceCalComResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceCalendlyResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceCalendlyResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceCalendlyResourceAllocationJobSpecific[];
}

export interface GetSourceCalendlyResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceCalendlyResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceCalendlyResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceCalendlyResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceCallrailResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceCallrailResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceCallrailResourceAllocationJobSpecific[];
}

export interface GetSourceCallrailResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceCallrailResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceCallrailResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceCallrailResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceCampaignMonitorResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceCampaignMonitorResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceCampaignMonitorResourceAllocationJobSpecific[];
}

export interface GetSourceCampaignMonitorResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceCampaignMonitorResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceCampaignMonitorResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceCampaignMonitorResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceCampaynResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceCampaynResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceCampaynResourceAllocationJobSpecific[];
}

export interface GetSourceCampaynResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceCampaynResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceCampaynResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceCampaynResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceCannyResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceCannyResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceCannyResourceAllocationJobSpecific[];
}

export interface GetSourceCannyResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceCannyResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceCannyResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceCannyResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceCapsuleCrmResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceCapsuleCrmResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceCapsuleCrmResourceAllocationJobSpecific[];
}

export interface GetSourceCapsuleCrmResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceCapsuleCrmResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceCapsuleCrmResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceCapsuleCrmResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceCaptainDataResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceCaptainDataResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceCaptainDataResourceAllocationJobSpecific[];
}

export interface GetSourceCaptainDataResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceCaptainDataResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceCaptainDataResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceCaptainDataResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceCareQualityCommissionResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceCareQualityCommissionResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceCareQualityCommissionResourceAllocationJobSpecific[];
}

export interface GetSourceCareQualityCommissionResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceCareQualityCommissionResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceCareQualityCommissionResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceCareQualityCommissionResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceCartResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceCartResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceCartResourceAllocationJobSpecific[];
}

export interface GetSourceCartResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceCartResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceCartResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceCartResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceCastorEdcResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceCastorEdcResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceCastorEdcResourceAllocationJobSpecific[];
}

export interface GetSourceCastorEdcResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceCastorEdcResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceCastorEdcResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceCastorEdcResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceChameleonResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceChameleonResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceChameleonResourceAllocationJobSpecific[];
}

export interface GetSourceChameleonResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceChameleonResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceChameleonResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceChameleonResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceChargebeeResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceChargebeeResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceChargebeeResourceAllocationJobSpecific[];
}

export interface GetSourceChargebeeResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceChargebeeResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceChargebeeResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceChargebeeResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceChargedeskResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceChargedeskResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceChargedeskResourceAllocationJobSpecific[];
}

export interface GetSourceChargedeskResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceChargedeskResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceChargedeskResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceChargedeskResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceChargifyResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceChargifyResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceChargifyResourceAllocationJobSpecific[];
}

export interface GetSourceChargifyResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceChargifyResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceChargifyResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceChargifyResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceChartmogulResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceChartmogulResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceChartmogulResourceAllocationJobSpecific[];
}

export interface GetSourceChartmogulResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceChartmogulResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceChartmogulResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceChartmogulResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceCimisResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceCimisResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceCimisResourceAllocationJobSpecific[];
}

export interface GetSourceCimisResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceCimisResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceCimisResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceCimisResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceCin7ResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceCin7ResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceCin7ResourceAllocationJobSpecific[];
}

export interface GetSourceCin7ResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceCin7ResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceCin7ResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceCin7ResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceCircaResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceCircaResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceCircaResourceAllocationJobSpecific[];
}

export interface GetSourceCircaResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceCircaResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceCircaResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceCircaResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceCircleciResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceCircleciResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceCircleciResourceAllocationJobSpecific[];
}

export interface GetSourceCircleciResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceCircleciResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceCircleciResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceCircleciResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceCiscoMerakiResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceCiscoMerakiResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceCiscoMerakiResourceAllocationJobSpecific[];
}

export interface GetSourceCiscoMerakiResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceCiscoMerakiResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceCiscoMerakiResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceCiscoMerakiResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceClarifAiResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceClarifAiResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceClarifAiResourceAllocationJobSpecific[];
}

export interface GetSourceClarifAiResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceClarifAiResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceClarifAiResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceClarifAiResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceClazarResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceClazarResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceClazarResourceAllocationJobSpecific[];
}

export interface GetSourceClazarResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceClazarResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceClazarResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceClazarResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceClickhouseResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceClickhouseResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceClickhouseResourceAllocationJobSpecific[];
}

export interface GetSourceClickhouseResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceClickhouseResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceClickhouseResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceClickhouseResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceClickupApiResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceClickupApiResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceClickupApiResourceAllocationJobSpecific[];
}

export interface GetSourceClickupApiResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceClickupApiResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceClickupApiResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceClickupApiResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceClockifyResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceClockifyResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceClockifyResourceAllocationJobSpecific[];
}

export interface GetSourceClockifyResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceClockifyResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceClockifyResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceClockifyResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceClockodoResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceClockodoResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceClockodoResourceAllocationJobSpecific[];
}

export interface GetSourceClockodoResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceClockodoResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceClockodoResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceClockodoResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceCloseComResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceCloseComResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceCloseComResourceAllocationJobSpecific[];
}

export interface GetSourceCloseComResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceCloseComResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceCloseComResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceCloseComResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceCloudbedsResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceCloudbedsResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceCloudbedsResourceAllocationJobSpecific[];
}

export interface GetSourceCloudbedsResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceCloudbedsResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceCloudbedsResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceCloudbedsResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceCoassembleResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceCoassembleResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceCoassembleResourceAllocationJobSpecific[];
}

export interface GetSourceCoassembleResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceCoassembleResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceCoassembleResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceCoassembleResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceCodaResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceCodaResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceCodaResourceAllocationJobSpecific[];
}

export interface GetSourceCodaResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceCodaResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceCodaResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceCodaResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceCodefreshResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceCodefreshResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceCodefreshResourceAllocationJobSpecific[];
}

export interface GetSourceCodefreshResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceCodefreshResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceCodefreshResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceCodefreshResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceCoinApiResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceCoinApiResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceCoinApiResourceAllocationJobSpecific[];
}

export interface GetSourceCoinApiResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceCoinApiResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceCoinApiResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceCoinApiResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceCoingeckoCoinsResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceCoingeckoCoinsResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceCoingeckoCoinsResourceAllocationJobSpecific[];
}

export interface GetSourceCoingeckoCoinsResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceCoingeckoCoinsResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceCoingeckoCoinsResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceCoingeckoCoinsResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceCoinmarketcapResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceCoinmarketcapResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceCoinmarketcapResourceAllocationJobSpecific[];
}

export interface GetSourceCoinmarketcapResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceCoinmarketcapResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceCoinmarketcapResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceCoinmarketcapResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceConcordResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceConcordResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceConcordResourceAllocationJobSpecific[];
}

export interface GetSourceConcordResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceConcordResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceConcordResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceConcordResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceConfigcatResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceConfigcatResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceConfigcatResourceAllocationJobSpecific[];
}

export interface GetSourceConfigcatResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceConfigcatResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceConfigcatResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceConfigcatResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceConfluenceResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceConfluenceResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceConfluenceResourceAllocationJobSpecific[];
}

export interface GetSourceConfluenceResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceConfluenceResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceConfluenceResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceConfluenceResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceConvertkitResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceConvertkitResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceConvertkitResourceAllocationJobSpecific[];
}

export interface GetSourceConvertkitResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceConvertkitResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceConvertkitResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceConvertkitResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceConvexResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceConvexResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceConvexResourceAllocationJobSpecific[];
}

export interface GetSourceConvexResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceConvexResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceConvexResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceConvexResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceCopperResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceCopperResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceCopperResourceAllocationJobSpecific[];
}

export interface GetSourceCopperResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceCopperResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceCopperResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceCopperResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceCouchbaseResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceCouchbaseResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceCouchbaseResourceAllocationJobSpecific[];
}

export interface GetSourceCouchbaseResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceCouchbaseResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceCouchbaseResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceCouchbaseResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceCountercyclicalResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceCountercyclicalResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceCountercyclicalResourceAllocationJobSpecific[];
}

export interface GetSourceCountercyclicalResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceCountercyclicalResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceCountercyclicalResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceCountercyclicalResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceCustomResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceCustomResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceCustomResourceAllocationJobSpecific[];
}

export interface GetSourceCustomResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceCustomResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceCustomResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceCustomResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceCustomerIoResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceCustomerIoResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceCustomerIoResourceAllocationJobSpecific[];
}

export interface GetSourceCustomerIoResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceCustomerIoResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceCustomerIoResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceCustomerIoResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceCustomerlyResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceCustomerlyResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceCustomerlyResourceAllocationJobSpecific[];
}

export interface GetSourceCustomerlyResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceCustomerlyResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceCustomerlyResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceCustomerlyResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceDatadogResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceDatadogResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceDatadogResourceAllocationJobSpecific[];
}

export interface GetSourceDatadogResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceDatadogResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceDatadogResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceDatadogResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceDatascopeResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceDatascopeResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceDatascopeResourceAllocationJobSpecific[];
}

export interface GetSourceDatascopeResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceDatascopeResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceDatascopeResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceDatascopeResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceDbtResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceDbtResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceDbtResourceAllocationJobSpecific[];
}

export interface GetSourceDbtResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceDbtResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceDbtResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceDbtResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceDelightedResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceDelightedResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceDelightedResourceAllocationJobSpecific[];
}

export interface GetSourceDelightedResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceDelightedResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceDelightedResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceDelightedResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceDeputyResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceDeputyResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceDeputyResourceAllocationJobSpecific[];
}

export interface GetSourceDeputyResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceDeputyResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceDeputyResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceDeputyResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceDingConnectResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceDingConnectResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceDingConnectResourceAllocationJobSpecific[];
}

export interface GetSourceDingConnectResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceDingConnectResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceDingConnectResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceDingConnectResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceDixaResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceDixaResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceDixaResourceAllocationJobSpecific[];
}

export interface GetSourceDixaResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceDixaResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceDixaResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceDixaResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceDockerhubResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceDockerhubResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceDockerhubResourceAllocationJobSpecific[];
}

export interface GetSourceDockerhubResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceDockerhubResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceDockerhubResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceDockerhubResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceDocusealResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceDocusealResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceDocusealResourceAllocationJobSpecific[];
}

export interface GetSourceDocusealResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceDocusealResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceDocusealResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceDocusealResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceDremioResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceDremioResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceDremioResourceAllocationJobSpecific[];
}

export interface GetSourceDremioResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceDremioResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceDremioResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceDremioResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceDriftResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceDriftResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceDriftResourceAllocationJobSpecific[];
}

export interface GetSourceDriftResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceDriftResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceDriftResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceDriftResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceDripResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceDripResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceDripResourceAllocationJobSpecific[];
}

export interface GetSourceDripResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceDripResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceDripResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceDripResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceDropboxSignResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceDropboxSignResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceDropboxSignResourceAllocationJobSpecific[];
}

export interface GetSourceDropboxSignResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceDropboxSignResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceDropboxSignResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceDropboxSignResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceDwollaResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceDwollaResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceDwollaResourceAllocationJobSpecific[];
}

export interface GetSourceDwollaResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceDwollaResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceDwollaResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceDwollaResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceDynamodbResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceDynamodbResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceDynamodbResourceAllocationJobSpecific[];
}

export interface GetSourceDynamodbResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceDynamodbResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceDynamodbResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceDynamodbResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceEConomicResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceEConomicResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceEConomicResourceAllocationJobSpecific[];
}

export interface GetSourceEConomicResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceEConomicResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceEConomicResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceEConomicResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceEasypostResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceEasypostResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceEasypostResourceAllocationJobSpecific[];
}

export interface GetSourceEasypostResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceEasypostResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceEasypostResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceEasypostResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceEasypromosResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceEasypromosResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceEasypromosResourceAllocationJobSpecific[];
}

export interface GetSourceEasypromosResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceEasypromosResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceEasypromosResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceEasypromosResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceEbayFinanceResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceEbayFinanceResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceEbayFinanceResourceAllocationJobSpecific[];
}

export interface GetSourceEbayFinanceResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceEbayFinanceResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceEbayFinanceResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceEbayFinanceResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceElasticemailResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceElasticemailResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceElasticemailResourceAllocationJobSpecific[];
}

export interface GetSourceElasticemailResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceElasticemailResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceElasticemailResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceElasticemailResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceEmailoctopusResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceEmailoctopusResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceEmailoctopusResourceAllocationJobSpecific[];
}

export interface GetSourceEmailoctopusResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceEmailoctopusResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceEmailoctopusResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceEmailoctopusResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceEmploymentHeroResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceEmploymentHeroResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceEmploymentHeroResourceAllocationJobSpecific[];
}

export interface GetSourceEmploymentHeroResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceEmploymentHeroResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceEmploymentHeroResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceEmploymentHeroResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceEnchargeResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceEnchargeResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceEnchargeResourceAllocationJobSpecific[];
}

export interface GetSourceEnchargeResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceEnchargeResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceEnchargeResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceEnchargeResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceEventbriteResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceEventbriteResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceEventbriteResourceAllocationJobSpecific[];
}

export interface GetSourceEventbriteResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceEventbriteResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceEventbriteResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceEventbriteResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceEventeeResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceEventeeResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceEventeeResourceAllocationJobSpecific[];
}

export interface GetSourceEventeeResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceEventeeResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceEventeeResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceEventeeResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceEventzillaResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceEventzillaResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceEventzillaResourceAllocationJobSpecific[];
}

export interface GetSourceEventzillaResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceEventzillaResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceEventzillaResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceEventzillaResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceEverhourResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceEverhourResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceEverhourResourceAllocationJobSpecific[];
}

export interface GetSourceEverhourResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceEverhourResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceEverhourResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceEverhourResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceExchangeRatesResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceExchangeRatesResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceExchangeRatesResourceAllocationJobSpecific[];
}

export interface GetSourceExchangeRatesResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceExchangeRatesResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceExchangeRatesResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceExchangeRatesResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceEzofficeinventoryResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceEzofficeinventoryResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceEzofficeinventoryResourceAllocationJobSpecific[];
}

export interface GetSourceEzofficeinventoryResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceEzofficeinventoryResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceEzofficeinventoryResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceEzofficeinventoryResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceFacebookMarketingResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceFacebookMarketingResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceFacebookMarketingResourceAllocationJobSpecific[];
}

export interface GetSourceFacebookMarketingResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceFacebookMarketingResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceFacebookMarketingResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceFacebookMarketingResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceFactorialResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceFactorialResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceFactorialResourceAllocationJobSpecific[];
}

export interface GetSourceFactorialResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceFactorialResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceFactorialResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceFactorialResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceFakerResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceFakerResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceFakerResourceAllocationJobSpecific[];
}

export interface GetSourceFakerResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceFakerResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceFakerResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceFakerResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceFastbillResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceFastbillResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceFastbillResourceAllocationJobSpecific[];
}

export interface GetSourceFastbillResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceFastbillResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceFastbillResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceFastbillResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceFaunaResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceFaunaResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceFaunaResourceAllocationJobSpecific[];
}

export interface GetSourceFaunaResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceFaunaResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceFaunaResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceFaunaResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceFileResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceFileResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceFileResourceAllocationJobSpecific[];
}

export interface GetSourceFileResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceFileResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceFileResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceFileResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceFilloutResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceFilloutResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceFilloutResourceAllocationJobSpecific[];
}

export interface GetSourceFilloutResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceFilloutResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceFilloutResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceFilloutResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceFinageResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceFinageResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceFinageResourceAllocationJobSpecific[];
}

export interface GetSourceFinageResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceFinageResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceFinageResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceFinageResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceFinancialModellingResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceFinancialModellingResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceFinancialModellingResourceAllocationJobSpecific[];
}

export interface GetSourceFinancialModellingResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceFinancialModellingResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceFinancialModellingResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceFinancialModellingResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceFinnhubResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceFinnhubResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceFinnhubResourceAllocationJobSpecific[];
}

export interface GetSourceFinnhubResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceFinnhubResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceFinnhubResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceFinnhubResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceFinnworldsResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceFinnworldsResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceFinnworldsResourceAllocationJobSpecific[];
}

export interface GetSourceFinnworldsResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceFinnworldsResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceFinnworldsResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceFinnworldsResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceFireboltResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceFireboltResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceFireboltResourceAllocationJobSpecific[];
}

export interface GetSourceFireboltResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceFireboltResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceFireboltResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceFireboltResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceFirehydrantResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceFirehydrantResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceFirehydrantResourceAllocationJobSpecific[];
}

export interface GetSourceFirehydrantResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceFirehydrantResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceFirehydrantResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceFirehydrantResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceFleetioResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceFleetioResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceFleetioResourceAllocationJobSpecific[];
}

export interface GetSourceFleetioResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceFleetioResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceFleetioResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceFleetioResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceFlexmailResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceFlexmailResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceFlexmailResourceAllocationJobSpecific[];
}

export interface GetSourceFlexmailResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceFlexmailResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceFlexmailResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceFlexmailResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceFlexportResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceFlexportResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceFlexportResourceAllocationJobSpecific[];
}

export interface GetSourceFlexportResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceFlexportResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceFlexportResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceFlexportResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceFloatResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceFloatResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceFloatResourceAllocationJobSpecific[];
}

export interface GetSourceFloatResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceFloatResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceFloatResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceFloatResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceFlowluResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceFlowluResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceFlowluResourceAllocationJobSpecific[];
}

export interface GetSourceFlowluResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceFlowluResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceFlowluResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceFlowluResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceFormbricksResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceFormbricksResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceFormbricksResourceAllocationJobSpecific[];
}

export interface GetSourceFormbricksResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceFormbricksResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceFormbricksResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceFormbricksResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceFreeAgentConnectorResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceFreeAgentConnectorResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceFreeAgentConnectorResourceAllocationJobSpecific[];
}

export interface GetSourceFreeAgentConnectorResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceFreeAgentConnectorResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceFreeAgentConnectorResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceFreeAgentConnectorResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceFreightviewResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceFreightviewResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceFreightviewResourceAllocationJobSpecific[];
}

export interface GetSourceFreightviewResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceFreightviewResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceFreightviewResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceFreightviewResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceFreshbooksResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceFreshbooksResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceFreshbooksResourceAllocationJobSpecific[];
}

export interface GetSourceFreshbooksResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceFreshbooksResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceFreshbooksResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceFreshbooksResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceFreshcallerResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceFreshcallerResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceFreshcallerResourceAllocationJobSpecific[];
}

export interface GetSourceFreshcallerResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceFreshcallerResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceFreshcallerResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceFreshcallerResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceFreshchatResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceFreshchatResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceFreshchatResourceAllocationJobSpecific[];
}

export interface GetSourceFreshchatResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceFreshchatResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceFreshchatResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceFreshchatResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceFreshdeskResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceFreshdeskResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceFreshdeskResourceAllocationJobSpecific[];
}

export interface GetSourceFreshdeskResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceFreshdeskResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceFreshdeskResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceFreshdeskResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceFreshsalesResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceFreshsalesResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceFreshsalesResourceAllocationJobSpecific[];
}

export interface GetSourceFreshsalesResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceFreshsalesResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceFreshsalesResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceFreshsalesResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceFreshserviceResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceFreshserviceResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceFreshserviceResourceAllocationJobSpecific[];
}

export interface GetSourceFreshserviceResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceFreshserviceResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceFreshserviceResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceFreshserviceResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceFrontResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceFrontResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceFrontResourceAllocationJobSpecific[];
}

export interface GetSourceFrontResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceFrontResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceFrontResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceFrontResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceFulcrumResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceFulcrumResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceFulcrumResourceAllocationJobSpecific[];
}

export interface GetSourceFulcrumResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceFulcrumResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceFulcrumResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceFulcrumResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceFullstoryResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceFullstoryResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceFullstoryResourceAllocationJobSpecific[];
}

export interface GetSourceFullstoryResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceFullstoryResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceFullstoryResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceFullstoryResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceGainsightPxResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceGainsightPxResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceGainsightPxResourceAllocationJobSpecific[];
}

export interface GetSourceGainsightPxResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceGainsightPxResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceGainsightPxResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceGainsightPxResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceGcsResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceGcsResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceGcsResourceAllocationJobSpecific[];
}

export interface GetSourceGcsResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceGcsResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceGcsResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceGcsResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceGetgistResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceGetgistResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceGetgistResourceAllocationJobSpecific[];
}

export interface GetSourceGetgistResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceGetgistResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceGetgistResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceGetgistResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceGetlagoResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceGetlagoResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceGetlagoResourceAllocationJobSpecific[];
}

export interface GetSourceGetlagoResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceGetlagoResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceGetlagoResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceGetlagoResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceGitbookResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceGitbookResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceGitbookResourceAllocationJobSpecific[];
}

export interface GetSourceGitbookResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceGitbookResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceGitbookResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceGitbookResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceGithubResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceGithubResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceGithubResourceAllocationJobSpecific[];
}

export interface GetSourceGithubResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceGithubResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceGithubResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceGithubResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceGitlabResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceGitlabResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceGitlabResourceAllocationJobSpecific[];
}

export interface GetSourceGitlabResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceGitlabResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceGitlabResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceGitlabResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceGlassfrogResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceGlassfrogResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceGlassfrogResourceAllocationJobSpecific[];
}

export interface GetSourceGlassfrogResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceGlassfrogResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceGlassfrogResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceGlassfrogResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceGmailResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceGmailResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceGmailResourceAllocationJobSpecific[];
}

export interface GetSourceGmailResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceGmailResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceGmailResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceGmailResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceGnewsResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceGnewsResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceGnewsResourceAllocationJobSpecific[];
}

export interface GetSourceGnewsResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceGnewsResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceGnewsResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceGnewsResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceGocardlessResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceGocardlessResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceGocardlessResourceAllocationJobSpecific[];
}

export interface GetSourceGocardlessResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceGocardlessResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceGocardlessResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceGocardlessResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceGoldcastResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceGoldcastResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceGoldcastResourceAllocationJobSpecific[];
}

export interface GetSourceGoldcastResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceGoldcastResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceGoldcastResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceGoldcastResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceGologinResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceGologinResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceGologinResourceAllocationJobSpecific[];
}

export interface GetSourceGologinResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceGologinResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceGologinResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceGologinResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceGongResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceGongResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceGongResourceAllocationJobSpecific[];
}

export interface GetSourceGongResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceGongResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceGongResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceGongResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceGoogleAdsResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceGoogleAdsResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceGoogleAdsResourceAllocationJobSpecific[];
}

export interface GetSourceGoogleAdsResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceGoogleAdsResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceGoogleAdsResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceGoogleAdsResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceGoogleAnalyticsDataApiResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceGoogleAnalyticsDataApiResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceGoogleAnalyticsDataApiResourceAllocationJobSpecific[];
}

export interface GetSourceGoogleAnalyticsDataApiResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceGoogleAnalyticsDataApiResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceGoogleAnalyticsDataApiResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceGoogleAnalyticsDataApiResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceGoogleCalendarResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceGoogleCalendarResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceGoogleCalendarResourceAllocationJobSpecific[];
}

export interface GetSourceGoogleCalendarResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceGoogleCalendarResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceGoogleCalendarResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceGoogleCalendarResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceGoogleClassroomResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceGoogleClassroomResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceGoogleClassroomResourceAllocationJobSpecific[];
}

export interface GetSourceGoogleClassroomResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceGoogleClassroomResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceGoogleClassroomResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceGoogleClassroomResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceGoogleDirectoryResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceGoogleDirectoryResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceGoogleDirectoryResourceAllocationJobSpecific[];
}

export interface GetSourceGoogleDirectoryResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceGoogleDirectoryResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceGoogleDirectoryResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceGoogleDirectoryResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceGoogleDriveResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceGoogleDriveResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceGoogleDriveResourceAllocationJobSpecific[];
}

export interface GetSourceGoogleDriveResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceGoogleDriveResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceGoogleDriveResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceGoogleDriveResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceGoogleFormsResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceGoogleFormsResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceGoogleFormsResourceAllocationJobSpecific[];
}

export interface GetSourceGoogleFormsResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceGoogleFormsResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceGoogleFormsResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceGoogleFormsResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceGooglePagespeedInsightsResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceGooglePagespeedInsightsResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceGooglePagespeedInsightsResourceAllocationJobSpecific[];
}

export interface GetSourceGooglePagespeedInsightsResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceGooglePagespeedInsightsResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceGooglePagespeedInsightsResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceGooglePagespeedInsightsResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceGoogleSearchConsoleResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceGoogleSearchConsoleResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceGoogleSearchConsoleResourceAllocationJobSpecific[];
}

export interface GetSourceGoogleSearchConsoleResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceGoogleSearchConsoleResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceGoogleSearchConsoleResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceGoogleSearchConsoleResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceGoogleSheetsResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceGoogleSheetsResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceGoogleSheetsResourceAllocationJobSpecific[];
}

export interface GetSourceGoogleSheetsResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceGoogleSheetsResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceGoogleSheetsResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceGoogleSheetsResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceGoogleTasksResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceGoogleTasksResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceGoogleTasksResourceAllocationJobSpecific[];
}

export interface GetSourceGoogleTasksResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceGoogleTasksResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceGoogleTasksResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceGoogleTasksResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceGoogleWebfontsResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceGoogleWebfontsResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceGoogleWebfontsResourceAllocationJobSpecific[];
}

export interface GetSourceGoogleWebfontsResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceGoogleWebfontsResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceGoogleWebfontsResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceGoogleWebfontsResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceGorgiasResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceGorgiasResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceGorgiasResourceAllocationJobSpecific[];
}

export interface GetSourceGorgiasResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceGorgiasResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceGorgiasResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceGorgiasResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceGreenhouseResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceGreenhouseResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceGreenhouseResourceAllocationJobSpecific[];
}

export interface GetSourceGreenhouseResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceGreenhouseResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceGreenhouseResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceGreenhouseResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceGreythrResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceGreythrResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceGreythrResourceAllocationJobSpecific[];
}

export interface GetSourceGreythrResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceGreythrResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceGreythrResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceGreythrResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceGridlyResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceGridlyResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceGridlyResourceAllocationJobSpecific[];
}

export interface GetSourceGridlyResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceGridlyResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceGridlyResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceGridlyResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceGuruResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceGuruResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceGuruResourceAllocationJobSpecific[];
}

export interface GetSourceGuruResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceGuruResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceGuruResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceGuruResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceGutendexResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceGutendexResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceGutendexResourceAllocationJobSpecific[];
}

export interface GetSourceGutendexResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceGutendexResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceGutendexResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceGutendexResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceHardcodedRecordsResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceHardcodedRecordsResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceHardcodedRecordsResourceAllocationJobSpecific[];
}

export interface GetSourceHardcodedRecordsResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceHardcodedRecordsResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceHardcodedRecordsResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceHardcodedRecordsResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceHarnessResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceHarnessResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceHarnessResourceAllocationJobSpecific[];
}

export interface GetSourceHarnessResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceHarnessResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceHarnessResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceHarnessResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceHarvestResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceHarvestResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceHarvestResourceAllocationJobSpecific[];
}

export interface GetSourceHarvestResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceHarvestResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceHarvestResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceHarvestResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceHeightResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceHeightResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceHeightResourceAllocationJobSpecific[];
}

export interface GetSourceHeightResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceHeightResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceHeightResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceHeightResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceHellobatonResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceHellobatonResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceHellobatonResourceAllocationJobSpecific[];
}

export interface GetSourceHellobatonResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceHellobatonResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceHellobatonResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceHellobatonResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceHelpScoutResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceHelpScoutResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceHelpScoutResourceAllocationJobSpecific[];
}

export interface GetSourceHelpScoutResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceHelpScoutResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceHelpScoutResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceHelpScoutResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceHibobResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceHibobResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceHibobResourceAllocationJobSpecific[];
}

export interface GetSourceHibobResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceHibobResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceHibobResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceHibobResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceHighLevelResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceHighLevelResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceHighLevelResourceAllocationJobSpecific[];
}

export interface GetSourceHighLevelResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceHighLevelResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceHighLevelResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceHighLevelResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceHoorayhrResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceHoorayhrResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceHoorayhrResourceAllocationJobSpecific[];
}

export interface GetSourceHoorayhrResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceHoorayhrResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceHoorayhrResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceHoorayhrResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceHubplannerResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceHubplannerResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceHubplannerResourceAllocationJobSpecific[];
}

export interface GetSourceHubplannerResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceHubplannerResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceHubplannerResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceHubplannerResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceHubspotResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceHubspotResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceHubspotResourceAllocationJobSpecific[];
}

export interface GetSourceHubspotResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceHubspotResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceHubspotResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceHubspotResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceHuggingFaceDatasetsResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceHuggingFaceDatasetsResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceHuggingFaceDatasetsResourceAllocationJobSpecific[];
}

export interface GetSourceHuggingFaceDatasetsResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceHuggingFaceDatasetsResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceHuggingFaceDatasetsResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceHuggingFaceDatasetsResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceHumanitixResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceHumanitixResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceHumanitixResourceAllocationJobSpecific[];
}

export interface GetSourceHumanitixResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceHumanitixResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceHumanitixResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceHumanitixResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceHuntrResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceHuntrResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceHuntrResourceAllocationJobSpecific[];
}

export interface GetSourceHuntrResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceHuntrResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceHuntrResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceHuntrResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceIlluminaBasespaceResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceIlluminaBasespaceResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceIlluminaBasespaceResourceAllocationJobSpecific[];
}

export interface GetSourceIlluminaBasespaceResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceIlluminaBasespaceResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceIlluminaBasespaceResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceIlluminaBasespaceResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceIncidentIoResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceIncidentIoResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceIncidentIoResourceAllocationJobSpecific[];
}

export interface GetSourceIncidentIoResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceIncidentIoResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceIncidentIoResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceIncidentIoResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceInflowinventoryResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceInflowinventoryResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceInflowinventoryResourceAllocationJobSpecific[];
}

export interface GetSourceInflowinventoryResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceInflowinventoryResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceInflowinventoryResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceInflowinventoryResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceInsightlyResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceInsightlyResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceInsightlyResourceAllocationJobSpecific[];
}

export interface GetSourceInsightlyResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceInsightlyResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceInsightlyResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceInsightlyResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceInstagramResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceInstagramResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceInstagramResourceAllocationJobSpecific[];
}

export interface GetSourceInstagramResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceInstagramResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceInstagramResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceInstagramResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceInstatusResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceInstatusResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceInstatusResourceAllocationJobSpecific[];
}

export interface GetSourceInstatusResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceInstatusResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceInstatusResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceInstatusResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceIntercomResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceIntercomResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceIntercomResourceAllocationJobSpecific[];
}

export interface GetSourceIntercomResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceIntercomResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceIntercomResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceIntercomResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceIntruderResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceIntruderResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceIntruderResourceAllocationJobSpecific[];
}

export interface GetSourceIntruderResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceIntruderResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceIntruderResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceIntruderResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceInvoicedResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceInvoicedResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceInvoicedResourceAllocationJobSpecific[];
}

export interface GetSourceInvoicedResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceInvoicedResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceInvoicedResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceInvoicedResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceInvoiceninjaResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceInvoiceninjaResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceInvoiceninjaResourceAllocationJobSpecific[];
}

export interface GetSourceInvoiceninjaResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceInvoiceninjaResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceInvoiceninjaResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceInvoiceninjaResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceIp2whoisResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceIp2whoisResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceIp2whoisResourceAllocationJobSpecific[];
}

export interface GetSourceIp2whoisResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceIp2whoisResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceIp2whoisResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceIp2whoisResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceIterableResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceIterableResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceIterableResourceAllocationJobSpecific[];
}

export interface GetSourceIterableResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceIterableResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceIterableResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceIterableResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceJiraResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceJiraResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceJiraResourceAllocationJobSpecific[];
}

export interface GetSourceJiraResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceJiraResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceJiraResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceJiraResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceJobnimbusResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceJobnimbusResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceJobnimbusResourceAllocationJobSpecific[];
}

export interface GetSourceJobnimbusResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceJobnimbusResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceJobnimbusResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceJobnimbusResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceJotformResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceJotformResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceJotformResourceAllocationJobSpecific[];
}

export interface GetSourceJotformResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceJotformResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceJotformResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceJotformResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceJustSiftResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceJustSiftResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceJustSiftResourceAllocationJobSpecific[];
}

export interface GetSourceJustSiftResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceJustSiftResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceJustSiftResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceJustSiftResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceJustcallResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceJustcallResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceJustcallResourceAllocationJobSpecific[];
}

export interface GetSourceJustcallResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceJustcallResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceJustcallResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceJustcallResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceK6CloudResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceK6CloudResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceK6CloudResourceAllocationJobSpecific[];
}

export interface GetSourceK6CloudResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceK6CloudResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceK6CloudResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceK6CloudResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceKatanaResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceKatanaResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceKatanaResourceAllocationJobSpecific[];
}

export interface GetSourceKatanaResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceKatanaResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceKatanaResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceKatanaResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceKekaResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceKekaResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceKekaResourceAllocationJobSpecific[];
}

export interface GetSourceKekaResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceKekaResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceKekaResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceKekaResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceKisiResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceKisiResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceKisiResourceAllocationJobSpecific[];
}

export interface GetSourceKisiResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceKisiResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceKisiResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceKisiResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceKissmetricsResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceKissmetricsResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceKissmetricsResourceAllocationJobSpecific[];
}

export interface GetSourceKissmetricsResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceKissmetricsResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceKissmetricsResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceKissmetricsResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceKlarnaResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceKlarnaResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceKlarnaResourceAllocationJobSpecific[];
}

export interface GetSourceKlarnaResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceKlarnaResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceKlarnaResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceKlarnaResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceKlausApiResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceKlausApiResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceKlausApiResourceAllocationJobSpecific[];
}

export interface GetSourceKlausApiResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceKlausApiResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceKlausApiResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceKlausApiResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceKlaviyoResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceKlaviyoResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceKlaviyoResourceAllocationJobSpecific[];
}

export interface GetSourceKlaviyoResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceKlaviyoResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceKlaviyoResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceKlaviyoResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceKyveResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceKyveResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceKyveResourceAllocationJobSpecific[];
}

export interface GetSourceKyveResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceKyveResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceKyveResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceKyveResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceLaunchdarklyResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceLaunchdarklyResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceLaunchdarklyResourceAllocationJobSpecific[];
}

export interface GetSourceLaunchdarklyResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceLaunchdarklyResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceLaunchdarklyResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceLaunchdarklyResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceLeadfeederResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceLeadfeederResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceLeadfeederResourceAllocationJobSpecific[];
}

export interface GetSourceLeadfeederResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceLeadfeederResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceLeadfeederResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceLeadfeederResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceLemlistResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceLemlistResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceLemlistResourceAllocationJobSpecific[];
}

export interface GetSourceLemlistResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceLemlistResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceLemlistResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceLemlistResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceLessAnnoyingCrmResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceLessAnnoyingCrmResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceLessAnnoyingCrmResourceAllocationJobSpecific[];
}

export interface GetSourceLessAnnoyingCrmResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceLessAnnoyingCrmResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceLessAnnoyingCrmResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceLessAnnoyingCrmResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceLeverHiringResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceLeverHiringResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceLeverHiringResourceAllocationJobSpecific[];
}

export interface GetSourceLeverHiringResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceLeverHiringResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceLeverHiringResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceLeverHiringResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceLightspeedRetailResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceLightspeedRetailResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceLightspeedRetailResourceAllocationJobSpecific[];
}

export interface GetSourceLightspeedRetailResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceLightspeedRetailResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceLightspeedRetailResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceLightspeedRetailResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceLinkedinAdsResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceLinkedinAdsResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceLinkedinAdsResourceAllocationJobSpecific[];
}

export interface GetSourceLinkedinAdsResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceLinkedinAdsResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceLinkedinAdsResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceLinkedinAdsResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceLinkedinPagesResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceLinkedinPagesResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceLinkedinPagesResourceAllocationJobSpecific[];
}

export interface GetSourceLinkedinPagesResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceLinkedinPagesResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceLinkedinPagesResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceLinkedinPagesResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceLinnworksResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceLinnworksResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceLinnworksResourceAllocationJobSpecific[];
}

export interface GetSourceLinnworksResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceLinnworksResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceLinnworksResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceLinnworksResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceLobResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceLobResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceLobResourceAllocationJobSpecific[];
}

export interface GetSourceLobResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceLobResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceLobResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceLobResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceLokaliseResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceLokaliseResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceLokaliseResourceAllocationJobSpecific[];
}

export interface GetSourceLokaliseResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceLokaliseResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceLokaliseResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceLokaliseResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceLookerResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceLookerResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceLookerResourceAllocationJobSpecific[];
}

export interface GetSourceLookerResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceLookerResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceLookerResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceLookerResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceLumaResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceLumaResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceLumaResourceAllocationJobSpecific[];
}

export interface GetSourceLumaResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceLumaResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceLumaResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceLumaResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceMailchimpResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceMailchimpResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceMailchimpResourceAllocationJobSpecific[];
}

export interface GetSourceMailchimpResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceMailchimpResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceMailchimpResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceMailchimpResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceMailerliteResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceMailerliteResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceMailerliteResourceAllocationJobSpecific[];
}

export interface GetSourceMailerliteResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceMailerliteResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceMailerliteResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceMailerliteResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceMailersendResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceMailersendResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceMailersendResourceAllocationJobSpecific[];
}

export interface GetSourceMailersendResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceMailersendResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceMailersendResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceMailersendResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceMailgunResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceMailgunResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceMailgunResourceAllocationJobSpecific[];
}

export interface GetSourceMailgunResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceMailgunResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceMailgunResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceMailgunResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceMailjetMailResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceMailjetMailResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceMailjetMailResourceAllocationJobSpecific[];
}

export interface GetSourceMailjetMailResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceMailjetMailResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceMailjetMailResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceMailjetMailResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceMailjetSmsResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceMailjetSmsResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceMailjetSmsResourceAllocationJobSpecific[];
}

export interface GetSourceMailjetSmsResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceMailjetSmsResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceMailjetSmsResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceMailjetSmsResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceMailosaurResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceMailosaurResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceMailosaurResourceAllocationJobSpecific[];
}

export interface GetSourceMailosaurResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceMailosaurResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceMailosaurResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceMailosaurResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceMailtrapResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceMailtrapResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceMailtrapResourceAllocationJobSpecific[];
}

export interface GetSourceMailtrapResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceMailtrapResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceMailtrapResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceMailtrapResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceMarketoResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceMarketoResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceMarketoResourceAllocationJobSpecific[];
}

export interface GetSourceMarketoResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceMarketoResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceMarketoResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceMarketoResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceMarketstackResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceMarketstackResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceMarketstackResourceAllocationJobSpecific[];
}

export interface GetSourceMarketstackResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceMarketstackResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceMarketstackResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceMarketstackResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceMentionResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceMentionResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceMentionResourceAllocationJobSpecific[];
}

export interface GetSourceMentionResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceMentionResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceMentionResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceMentionResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceMergeResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceMergeResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceMergeResourceAllocationJobSpecific[];
}

export interface GetSourceMergeResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceMergeResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceMergeResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceMergeResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceMetabaseResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceMetabaseResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceMetabaseResourceAllocationJobSpecific[];
}

export interface GetSourceMetabaseResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceMetabaseResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceMetabaseResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceMetabaseResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceMicrosoftDataverseResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceMicrosoftDataverseResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceMicrosoftDataverseResourceAllocationJobSpecific[];
}

export interface GetSourceMicrosoftDataverseResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceMicrosoftDataverseResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceMicrosoftDataverseResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceMicrosoftDataverseResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceMicrosoftEntraIdResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceMicrosoftEntraIdResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceMicrosoftEntraIdResourceAllocationJobSpecific[];
}

export interface GetSourceMicrosoftEntraIdResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceMicrosoftEntraIdResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceMicrosoftEntraIdResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceMicrosoftEntraIdResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceMicrosoftListsResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceMicrosoftListsResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceMicrosoftListsResourceAllocationJobSpecific[];
}

export interface GetSourceMicrosoftListsResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceMicrosoftListsResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceMicrosoftListsResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceMicrosoftListsResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceMicrosoftOnedriveResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceMicrosoftOnedriveResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceMicrosoftOnedriveResourceAllocationJobSpecific[];
}

export interface GetSourceMicrosoftOnedriveResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceMicrosoftOnedriveResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceMicrosoftOnedriveResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceMicrosoftOnedriveResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceMicrosoftSharepointResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceMicrosoftSharepointResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceMicrosoftSharepointResourceAllocationJobSpecific[];
}

export interface GetSourceMicrosoftSharepointResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceMicrosoftSharepointResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceMicrosoftSharepointResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceMicrosoftSharepointResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceMicrosoftTeamsResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceMicrosoftTeamsResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceMicrosoftTeamsResourceAllocationJobSpecific[];
}

export interface GetSourceMicrosoftTeamsResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceMicrosoftTeamsResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceMicrosoftTeamsResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceMicrosoftTeamsResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceMiroResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceMiroResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceMiroResourceAllocationJobSpecific[];
}

export interface GetSourceMiroResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceMiroResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceMiroResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceMiroResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceMissiveResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceMissiveResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceMissiveResourceAllocationJobSpecific[];
}

export interface GetSourceMissiveResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceMissiveResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceMissiveResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceMissiveResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceMixmaxResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceMixmaxResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceMixmaxResourceAllocationJobSpecific[];
}

export interface GetSourceMixmaxResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceMixmaxResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceMixmaxResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceMixmaxResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceMixpanelResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceMixpanelResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceMixpanelResourceAllocationJobSpecific[];
}

export interface GetSourceMixpanelResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceMixpanelResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceMixpanelResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceMixpanelResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceModeResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceModeResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceModeResourceAllocationJobSpecific[];
}

export interface GetSourceModeResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceModeResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceModeResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceModeResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceMondayResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceMondayResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceMondayResourceAllocationJobSpecific[];
}

export interface GetSourceMondayResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceMondayResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceMondayResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceMondayResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceMongodbV2ResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceMongodbV2ResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceMongodbV2ResourceAllocationJobSpecific[];
}

export interface GetSourceMongodbV2ResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceMongodbV2ResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceMongodbV2ResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceMongodbV2ResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceMssqlResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceMssqlResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceMssqlResourceAllocationJobSpecific[];
}

export interface GetSourceMssqlResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceMssqlResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceMssqlResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceMssqlResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceMuxResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceMuxResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceMuxResourceAllocationJobSpecific[];
}

export interface GetSourceMuxResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceMuxResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceMuxResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceMuxResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceMyHoursResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceMyHoursResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceMyHoursResourceAllocationJobSpecific[];
}

export interface GetSourceMyHoursResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceMyHoursResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceMyHoursResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceMyHoursResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceMysqlResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceMysqlResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceMysqlResourceAllocationJobSpecific[];
}

export interface GetSourceMysqlResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceMysqlResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceMysqlResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceMysqlResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceN8nResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceN8nResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceN8nResourceAllocationJobSpecific[];
}

export interface GetSourceN8nResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceN8nResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceN8nResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceN8nResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceNasaResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceNasaResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceNasaResourceAllocationJobSpecific[];
}

export interface GetSourceNasaResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceNasaResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceNasaResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceNasaResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceNavanResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceNavanResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceNavanResourceAllocationJobSpecific[];
}

export interface GetSourceNavanResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceNavanResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceNavanResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceNavanResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceNebiusAiResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceNebiusAiResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceNebiusAiResourceAllocationJobSpecific[];
}

export interface GetSourceNebiusAiResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceNebiusAiResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceNebiusAiResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceNebiusAiResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceNetsuiteEnterpriseResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceNetsuiteEnterpriseResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceNetsuiteEnterpriseResourceAllocationJobSpecific[];
}

export interface GetSourceNetsuiteEnterpriseResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceNetsuiteEnterpriseResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceNetsuiteEnterpriseResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceNetsuiteEnterpriseResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceNetsuiteResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceNetsuiteResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceNetsuiteResourceAllocationJobSpecific[];
}

export interface GetSourceNetsuiteResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceNetsuiteResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceNetsuiteResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceNetsuiteResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceNewsApiResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceNewsApiResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceNewsApiResourceAllocationJobSpecific[];
}

export interface GetSourceNewsApiResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceNewsApiResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceNewsApiResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceNewsApiResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceNewsdataIoResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceNewsdataIoResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceNewsdataIoResourceAllocationJobSpecific[];
}

export interface GetSourceNewsdataIoResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceNewsdataIoResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceNewsdataIoResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceNewsdataIoResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceNewsdataResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceNewsdataResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceNewsdataResourceAllocationJobSpecific[];
}

export interface GetSourceNewsdataResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceNewsdataResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceNewsdataResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceNewsdataResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceNinjaoneRmmResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceNinjaoneRmmResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceNinjaoneRmmResourceAllocationJobSpecific[];
}

export interface GetSourceNinjaoneRmmResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceNinjaoneRmmResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceNinjaoneRmmResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceNinjaoneRmmResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceNocrmResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceNocrmResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceNocrmResourceAllocationJobSpecific[];
}

export interface GetSourceNocrmResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceNocrmResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceNocrmResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceNocrmResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceNorthpassLmsResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceNorthpassLmsResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceNorthpassLmsResourceAllocationJobSpecific[];
}

export interface GetSourceNorthpassLmsResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceNorthpassLmsResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceNorthpassLmsResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceNorthpassLmsResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceNotionResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceNotionResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceNotionResourceAllocationJobSpecific[];
}

export interface GetSourceNotionResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceNotionResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceNotionResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceNotionResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceNutshellResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceNutshellResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceNutshellResourceAllocationJobSpecific[];
}

export interface GetSourceNutshellResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceNutshellResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceNutshellResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceNutshellResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceNylasResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceNylasResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceNylasResourceAllocationJobSpecific[];
}

export interface GetSourceNylasResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceNylasResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceNylasResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceNylasResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceNytimesResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceNytimesResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceNytimesResourceAllocationJobSpecific[];
}

export interface GetSourceNytimesResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceNytimesResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceNytimesResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceNytimesResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceOktaResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceOktaResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceOktaResourceAllocationJobSpecific[];
}

export interface GetSourceOktaResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceOktaResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceOktaResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceOktaResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceOmnisendResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceOmnisendResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceOmnisendResourceAllocationJobSpecific[];
}

export interface GetSourceOmnisendResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceOmnisendResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceOmnisendResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceOmnisendResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceOncehubResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceOncehubResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceOncehubResourceAllocationJobSpecific[];
}

export interface GetSourceOncehubResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceOncehubResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceOncehubResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceOncehubResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceOnepagecrmResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceOnepagecrmResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceOnepagecrmResourceAllocationJobSpecific[];
}

export interface GetSourceOnepagecrmResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceOnepagecrmResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceOnepagecrmResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceOnepagecrmResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceOnesignalResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceOnesignalResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceOnesignalResourceAllocationJobSpecific[];
}

export interface GetSourceOnesignalResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceOnesignalResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceOnesignalResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceOnesignalResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceOnfleetResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceOnfleetResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceOnfleetResourceAllocationJobSpecific[];
}

export interface GetSourceOnfleetResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceOnfleetResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceOnfleetResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceOnfleetResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceOpenDataDcResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceOpenDataDcResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceOpenDataDcResourceAllocationJobSpecific[];
}

export interface GetSourceOpenDataDcResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceOpenDataDcResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceOpenDataDcResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceOpenDataDcResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceOpenaqResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceOpenaqResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceOpenaqResourceAllocationJobSpecific[];
}

export interface GetSourceOpenaqResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceOpenaqResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceOpenaqResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceOpenaqResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceOpenfdaResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceOpenfdaResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceOpenfdaResourceAllocationJobSpecific[];
}

export interface GetSourceOpenfdaResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceOpenfdaResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceOpenfdaResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceOpenfdaResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceOpenweatherResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceOpenweatherResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceOpenweatherResourceAllocationJobSpecific[];
}

export interface GetSourceOpenweatherResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceOpenweatherResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceOpenweatherResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceOpenweatherResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceOpinionStageResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceOpinionStageResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceOpinionStageResourceAllocationJobSpecific[];
}

export interface GetSourceOpinionStageResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceOpinionStageResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceOpinionStageResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceOpinionStageResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceOpsgenieResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceOpsgenieResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceOpsgenieResourceAllocationJobSpecific[];
}

export interface GetSourceOpsgenieResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceOpsgenieResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceOpsgenieResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceOpsgenieResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceOracleEnterpriseResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceOracleEnterpriseResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceOracleEnterpriseResourceAllocationJobSpecific[];
}

export interface GetSourceOracleEnterpriseResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceOracleEnterpriseResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceOracleEnterpriseResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceOracleEnterpriseResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceOracleResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceOracleResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceOracleResourceAllocationJobSpecific[];
}

export interface GetSourceOracleResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceOracleResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceOracleResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceOracleResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceOrbResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceOrbResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceOrbResourceAllocationJobSpecific[];
}

export interface GetSourceOrbResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceOrbResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceOrbResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceOrbResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceOuraResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceOuraResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceOuraResourceAllocationJobSpecific[];
}

export interface GetSourceOuraResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceOuraResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceOuraResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceOuraResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceOutbrainAmplifyResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceOutbrainAmplifyResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceOutbrainAmplifyResourceAllocationJobSpecific[];
}

export interface GetSourceOutbrainAmplifyResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceOutbrainAmplifyResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceOutbrainAmplifyResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceOutbrainAmplifyResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceOutreachResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceOutreachResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceOutreachResourceAllocationJobSpecific[];
}

export interface GetSourceOutreachResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceOutreachResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceOutreachResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceOutreachResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceOveitResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceOveitResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceOveitResourceAllocationJobSpecific[];
}

export interface GetSourceOveitResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceOveitResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceOveitResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceOveitResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourcePabblySubscriptionsBillingResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourcePabblySubscriptionsBillingResourceAllocationDefault;
    jobSpecifics: outputs.GetSourcePabblySubscriptionsBillingResourceAllocationJobSpecific[];
}

export interface GetSourcePabblySubscriptionsBillingResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourcePabblySubscriptionsBillingResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourcePabblySubscriptionsBillingResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourcePabblySubscriptionsBillingResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourcePaddleResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourcePaddleResourceAllocationDefault;
    jobSpecifics: outputs.GetSourcePaddleResourceAllocationJobSpecific[];
}

export interface GetSourcePaddleResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourcePaddleResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourcePaddleResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourcePaddleResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourcePagerdutyResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourcePagerdutyResourceAllocationDefault;
    jobSpecifics: outputs.GetSourcePagerdutyResourceAllocationJobSpecific[];
}

export interface GetSourcePagerdutyResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourcePagerdutyResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourcePagerdutyResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourcePagerdutyResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourcePandadocResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourcePandadocResourceAllocationDefault;
    jobSpecifics: outputs.GetSourcePandadocResourceAllocationJobSpecific[];
}

export interface GetSourcePandadocResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourcePandadocResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourcePandadocResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourcePandadocResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourcePaperformResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourcePaperformResourceAllocationDefault;
    jobSpecifics: outputs.GetSourcePaperformResourceAllocationJobSpecific[];
}

export interface GetSourcePaperformResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourcePaperformResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourcePaperformResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourcePaperformResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourcePapersignResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourcePapersignResourceAllocationDefault;
    jobSpecifics: outputs.GetSourcePapersignResourceAllocationJobSpecific[];
}

export interface GetSourcePapersignResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourcePapersignResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourcePapersignResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourcePapersignResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourcePardotResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourcePardotResourceAllocationDefault;
    jobSpecifics: outputs.GetSourcePardotResourceAllocationJobSpecific[];
}

export interface GetSourcePardotResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourcePardotResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourcePardotResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourcePardotResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourcePartnerizeResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourcePartnerizeResourceAllocationDefault;
    jobSpecifics: outputs.GetSourcePartnerizeResourceAllocationJobSpecific[];
}

export interface GetSourcePartnerizeResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourcePartnerizeResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourcePartnerizeResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourcePartnerizeResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourcePartnerstackResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourcePartnerstackResourceAllocationDefault;
    jobSpecifics: outputs.GetSourcePartnerstackResourceAllocationJobSpecific[];
}

export interface GetSourcePartnerstackResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourcePartnerstackResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourcePartnerstackResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourcePartnerstackResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourcePayfitResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourcePayfitResourceAllocationDefault;
    jobSpecifics: outputs.GetSourcePayfitResourceAllocationJobSpecific[];
}

export interface GetSourcePayfitResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourcePayfitResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourcePayfitResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourcePayfitResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourcePaypalTransactionResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourcePaypalTransactionResourceAllocationDefault;
    jobSpecifics: outputs.GetSourcePaypalTransactionResourceAllocationJobSpecific[];
}

export interface GetSourcePaypalTransactionResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourcePaypalTransactionResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourcePaypalTransactionResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourcePaypalTransactionResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourcePaystackResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourcePaystackResourceAllocationDefault;
    jobSpecifics: outputs.GetSourcePaystackResourceAllocationJobSpecific[];
}

export interface GetSourcePaystackResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourcePaystackResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourcePaystackResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourcePaystackResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourcePendoResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourcePendoResourceAllocationDefault;
    jobSpecifics: outputs.GetSourcePendoResourceAllocationJobSpecific[];
}

export interface GetSourcePendoResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourcePendoResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourcePendoResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourcePendoResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourcePennylaneResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourcePennylaneResourceAllocationDefault;
    jobSpecifics: outputs.GetSourcePennylaneResourceAllocationJobSpecific[];
}

export interface GetSourcePennylaneResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourcePennylaneResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourcePennylaneResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourcePennylaneResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourcePersistiqResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourcePersistiqResourceAllocationDefault;
    jobSpecifics: outputs.GetSourcePersistiqResourceAllocationJobSpecific[];
}

export interface GetSourcePersistiqResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourcePersistiqResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourcePersistiqResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourcePersistiqResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourcePersonaResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourcePersonaResourceAllocationDefault;
    jobSpecifics: outputs.GetSourcePersonaResourceAllocationJobSpecific[];
}

export interface GetSourcePersonaResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourcePersonaResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourcePersonaResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourcePersonaResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourcePexelsApiResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourcePexelsApiResourceAllocationDefault;
    jobSpecifics: outputs.GetSourcePexelsApiResourceAllocationJobSpecific[];
}

export interface GetSourcePexelsApiResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourcePexelsApiResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourcePexelsApiResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourcePexelsApiResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourcePhylloResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourcePhylloResourceAllocationDefault;
    jobSpecifics: outputs.GetSourcePhylloResourceAllocationJobSpecific[];
}

export interface GetSourcePhylloResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourcePhylloResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourcePhylloResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourcePhylloResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourcePicqerResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourcePicqerResourceAllocationDefault;
    jobSpecifics: outputs.GetSourcePicqerResourceAllocationJobSpecific[];
}

export interface GetSourcePicqerResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourcePicqerResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourcePicqerResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourcePicqerResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourcePingdomResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourcePingdomResourceAllocationDefault;
    jobSpecifics: outputs.GetSourcePingdomResourceAllocationJobSpecific[];
}

export interface GetSourcePingdomResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourcePingdomResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourcePingdomResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourcePingdomResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourcePinterestResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourcePinterestResourceAllocationDefault;
    jobSpecifics: outputs.GetSourcePinterestResourceAllocationJobSpecific[];
}

export interface GetSourcePinterestResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourcePinterestResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourcePinterestResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourcePinterestResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourcePipedriveResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourcePipedriveResourceAllocationDefault;
    jobSpecifics: outputs.GetSourcePipedriveResourceAllocationJobSpecific[];
}

export interface GetSourcePipedriveResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourcePipedriveResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourcePipedriveResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourcePipedriveResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourcePipelinerResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourcePipelinerResourceAllocationDefault;
    jobSpecifics: outputs.GetSourcePipelinerResourceAllocationJobSpecific[];
}

export interface GetSourcePipelinerResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourcePipelinerResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourcePipelinerResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourcePipelinerResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourcePivotalTrackerResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourcePivotalTrackerResourceAllocationDefault;
    jobSpecifics: outputs.GetSourcePivotalTrackerResourceAllocationJobSpecific[];
}

export interface GetSourcePivotalTrackerResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourcePivotalTrackerResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourcePivotalTrackerResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourcePivotalTrackerResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourcePiwikResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourcePiwikResourceAllocationDefault;
    jobSpecifics: outputs.GetSourcePiwikResourceAllocationJobSpecific[];
}

export interface GetSourcePiwikResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourcePiwikResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourcePiwikResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourcePiwikResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourcePlaidResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourcePlaidResourceAllocationDefault;
    jobSpecifics: outputs.GetSourcePlaidResourceAllocationJobSpecific[];
}

export interface GetSourcePlaidResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourcePlaidResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourcePlaidResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourcePlaidResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourcePlanhatResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourcePlanhatResourceAllocationDefault;
    jobSpecifics: outputs.GetSourcePlanhatResourceAllocationJobSpecific[];
}

export interface GetSourcePlanhatResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourcePlanhatResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourcePlanhatResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourcePlanhatResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourcePlausibleResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourcePlausibleResourceAllocationDefault;
    jobSpecifics: outputs.GetSourcePlausibleResourceAllocationJobSpecific[];
}

export interface GetSourcePlausibleResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourcePlausibleResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourcePlausibleResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourcePlausibleResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourcePocketResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourcePocketResourceAllocationDefault;
    jobSpecifics: outputs.GetSourcePocketResourceAllocationJobSpecific[];
}

export interface GetSourcePocketResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourcePocketResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourcePocketResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourcePocketResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourcePokeapiResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourcePokeapiResourceAllocationDefault;
    jobSpecifics: outputs.GetSourcePokeapiResourceAllocationJobSpecific[];
}

export interface GetSourcePokeapiResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourcePokeapiResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourcePokeapiResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourcePokeapiResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourcePolygonStockApiResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourcePolygonStockApiResourceAllocationDefault;
    jobSpecifics: outputs.GetSourcePolygonStockApiResourceAllocationJobSpecific[];
}

export interface GetSourcePolygonStockApiResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourcePolygonStockApiResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourcePolygonStockApiResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourcePolygonStockApiResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourcePoplarResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourcePoplarResourceAllocationDefault;
    jobSpecifics: outputs.GetSourcePoplarResourceAllocationJobSpecific[];
}

export interface GetSourcePoplarResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourcePoplarResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourcePoplarResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourcePoplarResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourcePostgresResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourcePostgresResourceAllocationDefault;
    jobSpecifics: outputs.GetSourcePostgresResourceAllocationJobSpecific[];
}

export interface GetSourcePostgresResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourcePostgresResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourcePostgresResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourcePostgresResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourcePosthogResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourcePosthogResourceAllocationDefault;
    jobSpecifics: outputs.GetSourcePosthogResourceAllocationJobSpecific[];
}

export interface GetSourcePosthogResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourcePosthogResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourcePosthogResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourcePosthogResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourcePostmarkappResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourcePostmarkappResourceAllocationDefault;
    jobSpecifics: outputs.GetSourcePostmarkappResourceAllocationJobSpecific[];
}

export interface GetSourcePostmarkappResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourcePostmarkappResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourcePostmarkappResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourcePostmarkappResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourcePrestashopResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourcePrestashopResourceAllocationDefault;
    jobSpecifics: outputs.GetSourcePrestashopResourceAllocationJobSpecific[];
}

export interface GetSourcePrestashopResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourcePrestashopResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourcePrestashopResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourcePrestashopResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourcePretixResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourcePretixResourceAllocationDefault;
    jobSpecifics: outputs.GetSourcePretixResourceAllocationJobSpecific[];
}

export interface GetSourcePretixResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourcePretixResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourcePretixResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourcePretixResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourcePrimetricResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourcePrimetricResourceAllocationDefault;
    jobSpecifics: outputs.GetSourcePrimetricResourceAllocationJobSpecific[];
}

export interface GetSourcePrimetricResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourcePrimetricResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourcePrimetricResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourcePrimetricResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceProductboardResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceProductboardResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceProductboardResourceAllocationJobSpecific[];
}

export interface GetSourceProductboardResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceProductboardResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceProductboardResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceProductboardResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceProductiveResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceProductiveResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceProductiveResourceAllocationJobSpecific[];
}

export interface GetSourceProductiveResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceProductiveResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceProductiveResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceProductiveResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourcePypiResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourcePypiResourceAllocationDefault;
    jobSpecifics: outputs.GetSourcePypiResourceAllocationJobSpecific[];
}

export interface GetSourcePypiResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourcePypiResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourcePypiResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourcePypiResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceQualarooResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceQualarooResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceQualarooResourceAllocationJobSpecific[];
}

export interface GetSourceQualarooResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceQualarooResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceQualarooResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceQualarooResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceQuickbooksResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceQuickbooksResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceQuickbooksResourceAllocationJobSpecific[];
}

export interface GetSourceQuickbooksResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceQuickbooksResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceQuickbooksResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceQuickbooksResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceRailzResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceRailzResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceRailzResourceAllocationJobSpecific[];
}

export interface GetSourceRailzResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceRailzResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceRailzResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceRailzResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceRdStationMarketingResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceRdStationMarketingResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceRdStationMarketingResourceAllocationJobSpecific[];
}

export interface GetSourceRdStationMarketingResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceRdStationMarketingResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceRdStationMarketingResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceRdStationMarketingResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceRechargeResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceRechargeResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceRechargeResourceAllocationJobSpecific[];
}

export interface GetSourceRechargeResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceRechargeResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceRechargeResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceRechargeResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceRecreationResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceRecreationResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceRecreationResourceAllocationJobSpecific[];
}

export interface GetSourceRecreationResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceRecreationResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceRecreationResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceRecreationResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceRecruiteeResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceRecruiteeResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceRecruiteeResourceAllocationJobSpecific[];
}

export interface GetSourceRecruiteeResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceRecruiteeResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceRecruiteeResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceRecruiteeResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceRecurlyResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceRecurlyResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceRecurlyResourceAllocationJobSpecific[];
}

export interface GetSourceRecurlyResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceRecurlyResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceRecurlyResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceRecurlyResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceRedditResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceRedditResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceRedditResourceAllocationJobSpecific[];
}

export interface GetSourceRedditResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceRedditResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceRedditResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceRedditResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceRedshiftResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceRedshiftResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceRedshiftResourceAllocationJobSpecific[];
}

export interface GetSourceRedshiftResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceRedshiftResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceRedshiftResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceRedshiftResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceReferralheroResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceReferralheroResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceReferralheroResourceAllocationJobSpecific[];
}

export interface GetSourceReferralheroResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceReferralheroResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceReferralheroResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceReferralheroResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceRentcastResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceRentcastResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceRentcastResourceAllocationJobSpecific[];
}

export interface GetSourceRentcastResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceRentcastResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceRentcastResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceRentcastResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceRepairshoprResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceRepairshoprResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceRepairshoprResourceAllocationJobSpecific[];
}

export interface GetSourceRepairshoprResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceRepairshoprResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceRepairshoprResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceRepairshoprResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceReplyIoResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceReplyIoResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceReplyIoResourceAllocationJobSpecific[];
}

export interface GetSourceReplyIoResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceReplyIoResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceReplyIoResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceReplyIoResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceRetailexpressByMaropostResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceRetailexpressByMaropostResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceRetailexpressByMaropostResourceAllocationJobSpecific[];
}

export interface GetSourceRetailexpressByMaropostResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceRetailexpressByMaropostResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceRetailexpressByMaropostResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceRetailexpressByMaropostResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceRetentlyResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceRetentlyResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceRetentlyResourceAllocationJobSpecific[];
}

export interface GetSourceRetentlyResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceRetentlyResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceRetentlyResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceRetentlyResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceRevenuecatResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceRevenuecatResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceRevenuecatResourceAllocationJobSpecific[];
}

export interface GetSourceRevenuecatResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceRevenuecatResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceRevenuecatResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceRevenuecatResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceRevolutMerchantResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceRevolutMerchantResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceRevolutMerchantResourceAllocationJobSpecific[];
}

export interface GetSourceRevolutMerchantResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceRevolutMerchantResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceRevolutMerchantResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceRevolutMerchantResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceRingcentralResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceRingcentralResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceRingcentralResourceAllocationJobSpecific[];
}

export interface GetSourceRingcentralResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceRingcentralResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceRingcentralResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceRingcentralResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceRkiCovidResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceRkiCovidResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceRkiCovidResourceAllocationJobSpecific[];
}

export interface GetSourceRkiCovidResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceRkiCovidResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceRkiCovidResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceRkiCovidResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceRocketChatResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceRocketChatResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceRocketChatResourceAllocationJobSpecific[];
}

export interface GetSourceRocketChatResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceRocketChatResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceRocketChatResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceRocketChatResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceRocketlaneResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceRocketlaneResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceRocketlaneResourceAllocationJobSpecific[];
}

export interface GetSourceRocketlaneResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceRocketlaneResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceRocketlaneResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceRocketlaneResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceRollbarResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceRollbarResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceRollbarResourceAllocationJobSpecific[];
}

export interface GetSourceRollbarResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceRollbarResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceRollbarResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceRollbarResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceRootlyResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceRootlyResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceRootlyResourceAllocationJobSpecific[];
}

export interface GetSourceRootlyResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceRootlyResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceRootlyResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceRootlyResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceRssResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceRssResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceRssResourceAllocationJobSpecific[];
}

export interface GetSourceRssResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceRssResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceRssResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceRssResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceRuddrResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceRuddrResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceRuddrResourceAllocationJobSpecific[];
}

export interface GetSourceRuddrResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceRuddrResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceRuddrResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceRuddrResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceS3ResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceS3ResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceS3ResourceAllocationJobSpecific[];
}

export interface GetSourceS3ResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceS3ResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceS3ResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceS3ResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSafetycultureResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceSafetycultureResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceSafetycultureResourceAllocationJobSpecific[];
}

export interface GetSourceSafetycultureResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSafetycultureResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceSafetycultureResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceSafetycultureResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSageHrResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceSageHrResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceSageHrResourceAllocationJobSpecific[];
}

export interface GetSourceSageHrResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSageHrResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceSageHrResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceSageHrResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSalesflareResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceSalesflareResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceSalesflareResourceAllocationJobSpecific[];
}

export interface GetSourceSalesflareResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSalesflareResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceSalesflareResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceSalesflareResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSalesforceResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceSalesforceResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceSalesforceResourceAllocationJobSpecific[];
}

export interface GetSourceSalesforceResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSalesforceResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceSalesforceResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceSalesforceResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSalesloftResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceSalesloftResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceSalesloftResourceAllocationJobSpecific[];
}

export interface GetSourceSalesloftResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSalesloftResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceSalesloftResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceSalesloftResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSapFieldglassResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceSapFieldglassResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceSapFieldglassResourceAllocationJobSpecific[];
}

export interface GetSourceSapFieldglassResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSapFieldglassResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceSapFieldglassResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceSapFieldglassResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSapHanaEnterpriseResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceSapHanaEnterpriseResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceSapHanaEnterpriseResourceAllocationJobSpecific[];
}

export interface GetSourceSapHanaEnterpriseResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSapHanaEnterpriseResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceSapHanaEnterpriseResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceSapHanaEnterpriseResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSavvycalResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceSavvycalResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceSavvycalResourceAllocationJobSpecific[];
}

export interface GetSourceSavvycalResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSavvycalResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceSavvycalResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceSavvycalResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceScryfallResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceScryfallResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceScryfallResourceAllocationJobSpecific[];
}

export interface GetSourceScryfallResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceScryfallResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceScryfallResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceScryfallResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSecodaResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceSecodaResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceSecodaResourceAllocationJobSpecific[];
}

export interface GetSourceSecodaResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSecodaResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceSecodaResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceSecodaResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSegmentResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceSegmentResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceSegmentResourceAllocationJobSpecific[];
}

export interface GetSourceSegmentResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSegmentResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceSegmentResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceSegmentResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSendgridResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceSendgridResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceSendgridResourceAllocationJobSpecific[];
}

export interface GetSourceSendgridResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSendgridResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceSendgridResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceSendgridResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSendinblueResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceSendinblueResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceSendinblueResourceAllocationJobSpecific[];
}

export interface GetSourceSendinblueResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSendinblueResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceSendinblueResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceSendinblueResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSendowlResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceSendowlResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceSendowlResourceAllocationJobSpecific[];
}

export interface GetSourceSendowlResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSendowlResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceSendowlResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceSendowlResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSendpulseResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceSendpulseResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceSendpulseResourceAllocationJobSpecific[];
}

export interface GetSourceSendpulseResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSendpulseResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceSendpulseResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceSendpulseResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSenseforceResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceSenseforceResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceSenseforceResourceAllocationJobSpecific[];
}

export interface GetSourceSenseforceResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSenseforceResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceSenseforceResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceSenseforceResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSentryResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceSentryResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceSentryResourceAllocationJobSpecific[];
}

export interface GetSourceSentryResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSentryResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceSentryResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceSentryResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSerpstatResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceSerpstatResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceSerpstatResourceAllocationJobSpecific[];
}

export interface GetSourceSerpstatResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSerpstatResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceSerpstatResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceSerpstatResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceServiceNowResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceServiceNowResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceServiceNowResourceAllocationJobSpecific[];
}

export interface GetSourceServiceNowResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceServiceNowResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceServiceNowResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceServiceNowResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSftpBulkResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceSftpBulkResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceSftpBulkResourceAllocationJobSpecific[];
}

export interface GetSourceSftpBulkResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSftpBulkResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceSftpBulkResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceSftpBulkResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSftpResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceSftpResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceSftpResourceAllocationJobSpecific[];
}

export interface GetSourceSftpResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSftpResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceSftpResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceSftpResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSharetribeResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceSharetribeResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceSharetribeResourceAllocationJobSpecific[];
}

export interface GetSourceSharetribeResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSharetribeResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceSharetribeResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceSharetribeResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceShippoResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceShippoResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceShippoResourceAllocationJobSpecific[];
}

export interface GetSourceShippoResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceShippoResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceShippoResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceShippoResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceShipstationResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceShipstationResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceShipstationResourceAllocationJobSpecific[];
}

export interface GetSourceShipstationResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceShipstationResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceShipstationResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceShipstationResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceShopifyResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceShopifyResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceShopifyResourceAllocationJobSpecific[];
}

export interface GetSourceShopifyResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceShopifyResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceShopifyResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceShopifyResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceShortcutResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceShortcutResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceShortcutResourceAllocationJobSpecific[];
}

export interface GetSourceShortcutResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceShortcutResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceShortcutResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceShortcutResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceShortioResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceShortioResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceShortioResourceAllocationJobSpecific[];
}

export interface GetSourceShortioResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceShortioResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceShortioResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceShortioResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceShutterstockResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceShutterstockResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceShutterstockResourceAllocationJobSpecific[];
}

export interface GetSourceShutterstockResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceShutterstockResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceShutterstockResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceShutterstockResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSigmaComputingResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceSigmaComputingResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceSigmaComputingResourceAllocationJobSpecific[];
}

export interface GetSourceSigmaComputingResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSigmaComputingResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceSigmaComputingResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceSigmaComputingResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSignnowResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceSignnowResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceSignnowResourceAllocationJobSpecific[];
}

export interface GetSourceSignnowResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSignnowResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceSignnowResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceSignnowResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSimfinResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceSimfinResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceSimfinResourceAllocationJobSpecific[];
}

export interface GetSourceSimfinResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSimfinResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceSimfinResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceSimfinResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSimplecastResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceSimplecastResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceSimplecastResourceAllocationJobSpecific[];
}

export interface GetSourceSimplecastResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSimplecastResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceSimplecastResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceSimplecastResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSimplesatResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceSimplesatResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceSimplesatResourceAllocationJobSpecific[];
}

export interface GetSourceSimplesatResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSimplesatResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceSimplesatResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceSimplesatResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSlackResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceSlackResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceSlackResourceAllocationJobSpecific[];
}

export interface GetSourceSlackResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSlackResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceSlackResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceSlackResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSmailyResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceSmailyResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceSmailyResourceAllocationJobSpecific[];
}

export interface GetSourceSmailyResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSmailyResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceSmailyResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceSmailyResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSmartengageResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceSmartengageResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceSmartengageResourceAllocationJobSpecific[];
}

export interface GetSourceSmartengageResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSmartengageResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceSmartengageResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceSmartengageResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSmartreachResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceSmartreachResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceSmartreachResourceAllocationJobSpecific[];
}

export interface GetSourceSmartreachResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSmartreachResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceSmartreachResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceSmartreachResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSmartsheetsResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceSmartsheetsResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceSmartsheetsResourceAllocationJobSpecific[];
}

export interface GetSourceSmartsheetsResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSmartsheetsResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceSmartsheetsResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceSmartsheetsResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSmartwaiverResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceSmartwaiverResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceSmartwaiverResourceAllocationJobSpecific[];
}

export interface GetSourceSmartwaiverResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSmartwaiverResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceSmartwaiverResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceSmartwaiverResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSnapchatMarketingResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceSnapchatMarketingResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceSnapchatMarketingResourceAllocationJobSpecific[];
}

export interface GetSourceSnapchatMarketingResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSnapchatMarketingResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceSnapchatMarketingResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceSnapchatMarketingResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSnowflakeResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceSnowflakeResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceSnowflakeResourceAllocationJobSpecific[];
}

export interface GetSourceSnowflakeResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSnowflakeResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceSnowflakeResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceSnowflakeResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSolarwindsServiceDeskResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceSolarwindsServiceDeskResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceSolarwindsServiceDeskResourceAllocationJobSpecific[];
}

export interface GetSourceSolarwindsServiceDeskResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSolarwindsServiceDeskResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceSolarwindsServiceDeskResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceSolarwindsServiceDeskResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSonarCloudResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceSonarCloudResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceSonarCloudResourceAllocationJobSpecific[];
}

export interface GetSourceSonarCloudResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSonarCloudResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceSonarCloudResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceSonarCloudResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSpacexApiResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceSpacexApiResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceSpacexApiResourceAllocationJobSpecific[];
}

export interface GetSourceSpacexApiResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSpacexApiResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceSpacexApiResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceSpacexApiResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSparkpostResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceSparkpostResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceSparkpostResourceAllocationJobSpecific[];
}

export interface GetSourceSparkpostResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSparkpostResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceSparkpostResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceSparkpostResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSplitIoResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceSplitIoResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceSplitIoResourceAllocationJobSpecific[];
}

export interface GetSourceSplitIoResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSplitIoResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceSplitIoResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceSplitIoResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSpotlercrmResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceSpotlercrmResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceSpotlercrmResourceAllocationJobSpecific[];
}

export interface GetSourceSpotlercrmResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSpotlercrmResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceSpotlercrmResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceSpotlercrmResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSquareResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceSquareResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceSquareResourceAllocationJobSpecific[];
}

export interface GetSourceSquareResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSquareResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceSquareResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceSquareResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSquarespaceResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceSquarespaceResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceSquarespaceResourceAllocationJobSpecific[];
}

export interface GetSourceSquarespaceResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSquarespaceResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceSquarespaceResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceSquarespaceResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceStatsigResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceStatsigResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceStatsigResourceAllocationJobSpecific[];
}

export interface GetSourceStatsigResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceStatsigResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceStatsigResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceStatsigResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceStatuspageResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceStatuspageResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceStatuspageResourceAllocationJobSpecific[];
}

export interface GetSourceStatuspageResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceStatuspageResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceStatuspageResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceStatuspageResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceStockdataResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceStockdataResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceStockdataResourceAllocationJobSpecific[];
}

export interface GetSourceStockdataResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceStockdataResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceStockdataResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceStockdataResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceStravaResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceStravaResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceStravaResourceAllocationJobSpecific[];
}

export interface GetSourceStravaResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceStravaResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceStravaResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceStravaResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceStripeResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceStripeResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceStripeResourceAllocationJobSpecific[];
}

export interface GetSourceStripeResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceStripeResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceStripeResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceStripeResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSurveySparrowResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceSurveySparrowResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceSurveySparrowResourceAllocationJobSpecific[];
}

export interface GetSourceSurveySparrowResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSurveySparrowResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceSurveySparrowResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceSurveySparrowResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSurveymonkeyResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceSurveymonkeyResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceSurveymonkeyResourceAllocationJobSpecific[];
}

export interface GetSourceSurveymonkeyResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSurveymonkeyResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceSurveymonkeyResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceSurveymonkeyResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSurvicateResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceSurvicateResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceSurvicateResourceAllocationJobSpecific[];
}

export interface GetSourceSurvicateResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSurvicateResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceSurvicateResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceSurvicateResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSystemeResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceSystemeResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceSystemeResourceAllocationJobSpecific[];
}

export interface GetSourceSystemeResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceSystemeResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceSystemeResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceSystemeResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceTaboolaResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceTaboolaResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceTaboolaResourceAllocationJobSpecific[];
}

export interface GetSourceTaboolaResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceTaboolaResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceTaboolaResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceTaboolaResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceTeamtailorResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceTeamtailorResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceTeamtailorResourceAllocationJobSpecific[];
}

export interface GetSourceTeamtailorResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceTeamtailorResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceTeamtailorResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceTeamtailorResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceTeamworkResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceTeamworkResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceTeamworkResourceAllocationJobSpecific[];
}

export interface GetSourceTeamworkResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceTeamworkResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceTeamworkResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceTeamworkResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceTempoResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceTempoResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceTempoResourceAllocationJobSpecific[];
}

export interface GetSourceTempoResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceTempoResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceTempoResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceTempoResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceTestrailResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceTestrailResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceTestrailResourceAllocationJobSpecific[];
}

export interface GetSourceTestrailResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceTestrailResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceTestrailResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceTestrailResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceTheGuardianApiResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceTheGuardianApiResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceTheGuardianApiResourceAllocationJobSpecific[];
}

export interface GetSourceTheGuardianApiResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceTheGuardianApiResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceTheGuardianApiResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceTheGuardianApiResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceThinkificCoursesResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceThinkificCoursesResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceThinkificCoursesResourceAllocationJobSpecific[];
}

export interface GetSourceThinkificCoursesResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceThinkificCoursesResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceThinkificCoursesResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceThinkificCoursesResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceThinkificResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceThinkificResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceThinkificResourceAllocationJobSpecific[];
}

export interface GetSourceThinkificResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceThinkificResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceThinkificResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceThinkificResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceTicketmasterResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceTicketmasterResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceTicketmasterResourceAllocationJobSpecific[];
}

export interface GetSourceTicketmasterResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceTicketmasterResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceTicketmasterResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceTicketmasterResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceTickettailorResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceTickettailorResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceTickettailorResourceAllocationJobSpecific[];
}

export interface GetSourceTickettailorResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceTickettailorResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceTickettailorResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceTickettailorResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceTiktokMarketingResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceTiktokMarketingResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceTiktokMarketingResourceAllocationJobSpecific[];
}

export interface GetSourceTiktokMarketingResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceTiktokMarketingResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceTiktokMarketingResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceTiktokMarketingResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceTimelyResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceTimelyResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceTimelyResourceAllocationJobSpecific[];
}

export interface GetSourceTimelyResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceTimelyResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceTimelyResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceTimelyResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceTinyemailResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceTinyemailResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceTinyemailResourceAllocationJobSpecific[];
}

export interface GetSourceTinyemailResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceTinyemailResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceTinyemailResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceTinyemailResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceTmdbResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceTmdbResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceTmdbResourceAllocationJobSpecific[];
}

export interface GetSourceTmdbResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceTmdbResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceTmdbResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceTmdbResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceTodoistResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceTodoistResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceTodoistResourceAllocationJobSpecific[];
}

export interface GetSourceTodoistResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceTodoistResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceTodoistResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceTodoistResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceTogglResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceTogglResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceTogglResourceAllocationJobSpecific[];
}

export interface GetSourceTogglResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceTogglResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceTogglResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceTogglResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceTrackPmsResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceTrackPmsResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceTrackPmsResourceAllocationJobSpecific[];
}

export interface GetSourceTrackPmsResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceTrackPmsResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceTrackPmsResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceTrackPmsResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceTrelloResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceTrelloResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceTrelloResourceAllocationJobSpecific[];
}

export interface GetSourceTrelloResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceTrelloResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceTrelloResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceTrelloResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceTremendousResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceTremendousResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceTremendousResourceAllocationJobSpecific[];
}

export interface GetSourceTremendousResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceTremendousResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceTremendousResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceTremendousResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceTrustpilotResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceTrustpilotResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceTrustpilotResourceAllocationJobSpecific[];
}

export interface GetSourceTrustpilotResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceTrustpilotResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceTrustpilotResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceTrustpilotResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceTvmazeScheduleResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceTvmazeScheduleResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceTvmazeScheduleResourceAllocationJobSpecific[];
}

export interface GetSourceTvmazeScheduleResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceTvmazeScheduleResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceTvmazeScheduleResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceTvmazeScheduleResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceTwelveDataResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceTwelveDataResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceTwelveDataResourceAllocationJobSpecific[];
}

export interface GetSourceTwelveDataResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceTwelveDataResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceTwelveDataResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceTwelveDataResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceTwilioResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceTwilioResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceTwilioResourceAllocationJobSpecific[];
}

export interface GetSourceTwilioResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceTwilioResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceTwilioResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceTwilioResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceTwilioTaskrouterResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceTwilioTaskrouterResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceTwilioTaskrouterResourceAllocationJobSpecific[];
}

export interface GetSourceTwilioTaskrouterResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceTwilioTaskrouterResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceTwilioTaskrouterResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceTwilioTaskrouterResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceTwitterResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceTwitterResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceTwitterResourceAllocationJobSpecific[];
}

export interface GetSourceTwitterResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceTwitterResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceTwitterResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceTwitterResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceTyntecSmsResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceTyntecSmsResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceTyntecSmsResourceAllocationJobSpecific[];
}

export interface GetSourceTyntecSmsResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceTyntecSmsResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceTyntecSmsResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceTyntecSmsResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceTypeformResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceTypeformResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceTypeformResourceAllocationJobSpecific[];
}

export interface GetSourceTypeformResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceTypeformResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceTypeformResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceTypeformResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceUbidotsResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceUbidotsResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceUbidotsResourceAllocationJobSpecific[];
}

export interface GetSourceUbidotsResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceUbidotsResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceUbidotsResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceUbidotsResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceUnleashResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceUnleashResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceUnleashResourceAllocationJobSpecific[];
}

export interface GetSourceUnleashResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceUnleashResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceUnleashResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceUnleashResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceUppromoteResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceUppromoteResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceUppromoteResourceAllocationJobSpecific[];
}

export interface GetSourceUppromoteResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceUppromoteResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceUppromoteResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceUppromoteResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceUsCensusResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceUsCensusResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceUsCensusResourceAllocationJobSpecific[];
}

export interface GetSourceUsCensusResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceUsCensusResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceUsCensusResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceUsCensusResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceUservoiceResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceUservoiceResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceUservoiceResourceAllocationJobSpecific[];
}

export interface GetSourceUservoiceResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceUservoiceResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceUservoiceResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceUservoiceResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceVantageResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceVantageResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceVantageResourceAllocationJobSpecific[];
}

export interface GetSourceVantageResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceVantageResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceVantageResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceVantageResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceVeeqoResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceVeeqoResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceVeeqoResourceAllocationJobSpecific[];
}

export interface GetSourceVeeqoResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceVeeqoResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceVeeqoResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceVeeqoResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceVercelResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceVercelResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceVercelResourceAllocationJobSpecific[];
}

export interface GetSourceVercelResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceVercelResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceVercelResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceVercelResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceVismaEconomicResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceVismaEconomicResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceVismaEconomicResourceAllocationJobSpecific[];
}

export interface GetSourceVismaEconomicResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceVismaEconomicResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceVismaEconomicResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceVismaEconomicResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceVitallyResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceVitallyResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceVitallyResourceAllocationJobSpecific[];
}

export interface GetSourceVitallyResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceVitallyResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceVitallyResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceVitallyResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceVwoResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceVwoResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceVwoResourceAllocationJobSpecific[];
}

export interface GetSourceVwoResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceVwoResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceVwoResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceVwoResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceWaiteraidResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceWaiteraidResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceWaiteraidResourceAllocationJobSpecific[];
}

export interface GetSourceWaiteraidResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceWaiteraidResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceWaiteraidResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceWaiteraidResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceWasabiStatsApiResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceWasabiStatsApiResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceWasabiStatsApiResourceAllocationJobSpecific[];
}

export interface GetSourceWasabiStatsApiResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceWasabiStatsApiResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceWasabiStatsApiResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceWasabiStatsApiResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceWeatherstackResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceWeatherstackResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceWeatherstackResourceAllocationJobSpecific[];
}

export interface GetSourceWeatherstackResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceWeatherstackResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceWeatherstackResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceWeatherstackResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceWebScrapperResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceWebScrapperResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceWebScrapperResourceAllocationJobSpecific[];
}

export interface GetSourceWebScrapperResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceWebScrapperResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceWebScrapperResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceWebScrapperResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceWebflowResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceWebflowResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceWebflowResourceAllocationJobSpecific[];
}

export interface GetSourceWebflowResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceWebflowResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceWebflowResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceWebflowResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceWhenIWorkResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceWhenIWorkResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceWhenIWorkResourceAllocationJobSpecific[];
}

export interface GetSourceWhenIWorkResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceWhenIWorkResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceWhenIWorkResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceWhenIWorkResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceWhiskyHunterResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceWhiskyHunterResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceWhiskyHunterResourceAllocationJobSpecific[];
}

export interface GetSourceWhiskyHunterResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceWhiskyHunterResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceWhiskyHunterResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceWhiskyHunterResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceWikipediaPageviewsResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceWikipediaPageviewsResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceWikipediaPageviewsResourceAllocationJobSpecific[];
}

export interface GetSourceWikipediaPageviewsResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceWikipediaPageviewsResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceWikipediaPageviewsResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceWikipediaPageviewsResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceWoocommerceResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceWoocommerceResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceWoocommerceResourceAllocationJobSpecific[];
}

export interface GetSourceWoocommerceResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceWoocommerceResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceWoocommerceResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceWoocommerceResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceWordpressResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceWordpressResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceWordpressResourceAllocationJobSpecific[];
}

export interface GetSourceWordpressResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceWordpressResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceWordpressResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceWordpressResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceWorkableResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceWorkableResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceWorkableResourceAllocationJobSpecific[];
}

export interface GetSourceWorkableResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceWorkableResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceWorkableResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceWorkableResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceWorkdayResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceWorkdayResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceWorkdayResourceAllocationJobSpecific[];
}

export interface GetSourceWorkdayResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceWorkdayResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceWorkdayResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceWorkdayResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceWorkflowmaxResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceWorkflowmaxResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceWorkflowmaxResourceAllocationJobSpecific[];
}

export interface GetSourceWorkflowmaxResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceWorkflowmaxResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceWorkflowmaxResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceWorkflowmaxResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceWorkrampResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceWorkrampResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceWorkrampResourceAllocationJobSpecific[];
}

export interface GetSourceWorkrampResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceWorkrampResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceWorkrampResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceWorkrampResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceWrikeResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceWrikeResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceWrikeResourceAllocationJobSpecific[];
}

export interface GetSourceWrikeResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceWrikeResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceWrikeResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceWrikeResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceWufooResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceWufooResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceWufooResourceAllocationJobSpecific[];
}

export interface GetSourceWufooResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceWufooResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceWufooResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceWufooResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceXkcdResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceXkcdResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceXkcdResourceAllocationJobSpecific[];
}

export interface GetSourceXkcdResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceXkcdResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceXkcdResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceXkcdResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceXsollaResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceXsollaResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceXsollaResourceAllocationJobSpecific[];
}

export interface GetSourceXsollaResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceXsollaResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceXsollaResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceXsollaResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceYahooFinancePriceResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceYahooFinancePriceResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceYahooFinancePriceResourceAllocationJobSpecific[];
}

export interface GetSourceYahooFinancePriceResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceYahooFinancePriceResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceYahooFinancePriceResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceYahooFinancePriceResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceYandexMetricaResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceYandexMetricaResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceYandexMetricaResourceAllocationJobSpecific[];
}

export interface GetSourceYandexMetricaResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceYandexMetricaResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceYandexMetricaResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceYandexMetricaResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceYotpoResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceYotpoResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceYotpoResourceAllocationJobSpecific[];
}

export interface GetSourceYotpoResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceYotpoResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceYotpoResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceYotpoResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceYouNeedABudgetYnabResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceYouNeedABudgetYnabResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceYouNeedABudgetYnabResourceAllocationJobSpecific[];
}

export interface GetSourceYouNeedABudgetYnabResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceYouNeedABudgetYnabResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceYouNeedABudgetYnabResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceYouNeedABudgetYnabResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceYouniumResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceYouniumResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceYouniumResourceAllocationJobSpecific[];
}

export interface GetSourceYouniumResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceYouniumResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceYouniumResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceYouniumResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceYousignResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceYousignResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceYousignResourceAllocationJobSpecific[];
}

export interface GetSourceYousignResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceYousignResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceYousignResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceYousignResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceYoutubeAnalyticsResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceYoutubeAnalyticsResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceYoutubeAnalyticsResourceAllocationJobSpecific[];
}

export interface GetSourceYoutubeAnalyticsResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceYoutubeAnalyticsResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceYoutubeAnalyticsResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceYoutubeAnalyticsResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceYoutubeDataResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceYoutubeDataResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceYoutubeDataResourceAllocationJobSpecific[];
}

export interface GetSourceYoutubeDataResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceYoutubeDataResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceYoutubeDataResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceYoutubeDataResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceZapierSupportedStorageResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceZapierSupportedStorageResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceZapierSupportedStorageResourceAllocationJobSpecific[];
}

export interface GetSourceZapierSupportedStorageResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceZapierSupportedStorageResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceZapierSupportedStorageResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceZapierSupportedStorageResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceZapsignResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceZapsignResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceZapsignResourceAllocationJobSpecific[];
}

export interface GetSourceZapsignResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceZapsignResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceZapsignResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceZapsignResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceZendeskChatResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceZendeskChatResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceZendeskChatResourceAllocationJobSpecific[];
}

export interface GetSourceZendeskChatResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceZendeskChatResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceZendeskChatResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceZendeskChatResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceZendeskSunshineResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceZendeskSunshineResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceZendeskSunshineResourceAllocationJobSpecific[];
}

export interface GetSourceZendeskSunshineResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceZendeskSunshineResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceZendeskSunshineResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceZendeskSunshineResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceZendeskSupportResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceZendeskSupportResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceZendeskSupportResourceAllocationJobSpecific[];
}

export interface GetSourceZendeskSupportResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceZendeskSupportResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceZendeskSupportResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceZendeskSupportResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceZendeskTalkResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceZendeskTalkResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceZendeskTalkResourceAllocationJobSpecific[];
}

export interface GetSourceZendeskTalkResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceZendeskTalkResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceZendeskTalkResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceZendeskTalkResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceZenefitsResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceZenefitsResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceZenefitsResourceAllocationJobSpecific[];
}

export interface GetSourceZenefitsResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceZenefitsResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceZenefitsResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceZenefitsResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceZenloopResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceZenloopResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceZenloopResourceAllocationJobSpecific[];
}

export interface GetSourceZenloopResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceZenloopResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceZenloopResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceZenloopResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceZohoAnalyticsMetadataApiResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceZohoAnalyticsMetadataApiResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceZohoAnalyticsMetadataApiResourceAllocationJobSpecific[];
}

export interface GetSourceZohoAnalyticsMetadataApiResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceZohoAnalyticsMetadataApiResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceZohoAnalyticsMetadataApiResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceZohoAnalyticsMetadataApiResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceZohoBiginResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceZohoBiginResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceZohoBiginResourceAllocationJobSpecific[];
}

export interface GetSourceZohoBiginResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceZohoBiginResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceZohoBiginResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceZohoBiginResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceZohoBillingResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceZohoBillingResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceZohoBillingResourceAllocationJobSpecific[];
}

export interface GetSourceZohoBillingResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceZohoBillingResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceZohoBillingResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceZohoBillingResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceZohoBooksResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceZohoBooksResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceZohoBooksResourceAllocationJobSpecific[];
}

export interface GetSourceZohoBooksResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceZohoBooksResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceZohoBooksResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceZohoBooksResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceZohoCampaignResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceZohoCampaignResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceZohoCampaignResourceAllocationJobSpecific[];
}

export interface GetSourceZohoCampaignResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceZohoCampaignResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceZohoCampaignResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceZohoCampaignResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceZohoCrmResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceZohoCrmResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceZohoCrmResourceAllocationJobSpecific[];
}

export interface GetSourceZohoCrmResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceZohoCrmResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceZohoCrmResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceZohoCrmResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceZohoDeskResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceZohoDeskResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceZohoDeskResourceAllocationJobSpecific[];
}

export interface GetSourceZohoDeskResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceZohoDeskResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceZohoDeskResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceZohoDeskResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceZohoExpenseResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceZohoExpenseResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceZohoExpenseResourceAllocationJobSpecific[];
}

export interface GetSourceZohoExpenseResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceZohoExpenseResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceZohoExpenseResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceZohoExpenseResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceZohoInventoryResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceZohoInventoryResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceZohoInventoryResourceAllocationJobSpecific[];
}

export interface GetSourceZohoInventoryResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceZohoInventoryResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceZohoInventoryResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceZohoInventoryResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceZohoInvoiceResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceZohoInvoiceResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceZohoInvoiceResourceAllocationJobSpecific[];
}

export interface GetSourceZohoInvoiceResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceZohoInvoiceResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceZohoInvoiceResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceZohoInvoiceResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceZonkaFeedbackResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceZonkaFeedbackResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceZonkaFeedbackResourceAllocationJobSpecific[];
}

export interface GetSourceZonkaFeedbackResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceZonkaFeedbackResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceZonkaFeedbackResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceZonkaFeedbackResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceZoomResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.GetSourceZoomResourceAllocationDefault;
    jobSpecifics: outputs.GetSourceZoomResourceAllocationJobSpecific[];
}

export interface GetSourceZoomResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetSourceZoomResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs.
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.GetSourceZoomResourceAllocationJobSpecificResourceRequirements;
}

export interface GetSourceZoomResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface GetWorkspaceNotifications {
    /**
     * Configures a notification.
     */
    connectionUpdate: outputs.GetWorkspaceNotificationsConnectionUpdate;
    /**
     * Configures a notification.
     */
    connectionUpdateActionRequired: outputs.GetWorkspaceNotificationsConnectionUpdateActionRequired;
    /**
     * Configures a notification.
     */
    failure: outputs.GetWorkspaceNotificationsFailure;
    /**
     * Configures a notification.
     */
    success: outputs.GetWorkspaceNotificationsSuccess;
    /**
     * Configures a notification.
     */
    syncDisabled: outputs.GetWorkspaceNotificationsSyncDisabled;
    /**
     * Configures a notification.
     */
    syncDisabledWarning: outputs.GetWorkspaceNotificationsSyncDisabledWarning;
}

export interface GetWorkspaceNotificationsConnectionUpdate {
    /**
     * Configures an email notification.
     */
    email: outputs.GetWorkspaceNotificationsConnectionUpdateEmail;
    /**
     * Configures a webhook notification.
     */
    webhook: outputs.GetWorkspaceNotificationsConnectionUpdateWebhook;
}

export interface GetWorkspaceNotificationsConnectionUpdateActionRequired {
    /**
     * Configures an email notification.
     */
    email: outputs.GetWorkspaceNotificationsConnectionUpdateActionRequiredEmail;
    /**
     * Configures a webhook notification.
     */
    webhook: outputs.GetWorkspaceNotificationsConnectionUpdateActionRequiredWebhook;
}

export interface GetWorkspaceNotificationsConnectionUpdateActionRequiredEmail {
    enabled: boolean;
}

export interface GetWorkspaceNotificationsConnectionUpdateActionRequiredWebhook {
    enabled: boolean;
    url: string;
}

export interface GetWorkspaceNotificationsConnectionUpdateEmail {
    enabled: boolean;
}

export interface GetWorkspaceNotificationsConnectionUpdateWebhook {
    enabled: boolean;
    url: string;
}

export interface GetWorkspaceNotificationsFailure {
    /**
     * Configures an email notification.
     */
    email: outputs.GetWorkspaceNotificationsFailureEmail;
    /**
     * Configures a webhook notification.
     */
    webhook: outputs.GetWorkspaceNotificationsFailureWebhook;
}

export interface GetWorkspaceNotificationsFailureEmail {
    enabled: boolean;
}

export interface GetWorkspaceNotificationsFailureWebhook {
    enabled: boolean;
    url: string;
}

export interface GetWorkspaceNotificationsSuccess {
    /**
     * Configures an email notification.
     */
    email: outputs.GetWorkspaceNotificationsSuccessEmail;
    /**
     * Configures a webhook notification.
     */
    webhook: outputs.GetWorkspaceNotificationsSuccessWebhook;
}

export interface GetWorkspaceNotificationsSuccessEmail {
    enabled: boolean;
}

export interface GetWorkspaceNotificationsSuccessWebhook {
    enabled: boolean;
    url: string;
}

export interface GetWorkspaceNotificationsSyncDisabled {
    /**
     * Configures an email notification.
     */
    email: outputs.GetWorkspaceNotificationsSyncDisabledEmail;
    /**
     * Configures a webhook notification.
     */
    webhook: outputs.GetWorkspaceNotificationsSyncDisabledWebhook;
}

export interface GetWorkspaceNotificationsSyncDisabledEmail {
    enabled: boolean;
}

export interface GetWorkspaceNotificationsSyncDisabledWarning {
    /**
     * Configures an email notification.
     */
    email: outputs.GetWorkspaceNotificationsSyncDisabledWarningEmail;
    /**
     * Configures a webhook notification.
     */
    webhook: outputs.GetWorkspaceNotificationsSyncDisabledWarningWebhook;
}

export interface GetWorkspaceNotificationsSyncDisabledWarningEmail {
    enabled: boolean;
}

export interface GetWorkspaceNotificationsSyncDisabledWarningWebhook {
    enabled: boolean;
    url: string;
}

export interface GetWorkspaceNotificationsSyncDisabledWebhook {
    enabled: boolean;
    url: string;
}

export interface Source7shiftsConfiguration {
    /**
     * Access token to use for authentication. Generate it in the 7shifts Developer Tools.
     */
    accessToken: string;
    startDate: string;
}

export interface Source7shiftsResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.Source7shiftsResourceAllocationDefault;
    jobSpecifics: outputs.Source7shiftsResourceAllocationJobSpecific[];
}

export interface Source7shiftsResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface Source7shiftsResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.Source7shiftsResourceAllocationJobSpecificResourceRequirements;
}

export interface Source7shiftsResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceActivecampaignConfiguration {
    /**
     * Account Username
     */
    accountUsername: string;
    /**
     * API Key
     */
    apiKey: string;
}

export interface SourceActivecampaignResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceActivecampaignResourceAllocationDefault;
    jobSpecifics: outputs.SourceActivecampaignResourceAllocationJobSpecific[];
}

export interface SourceActivecampaignResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceActivecampaignResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceActivecampaignResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceActivecampaignResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceAgilecrmConfiguration {
    /**
     * API key to use. Find it at Admin Settings > API & Analytics > API Key in your Agile CRM account.
     */
    apiKey: string;
    /**
     * The specific subdomain for your Agile CRM account
     */
    domain: string;
    /**
     * Your Agile CRM account email address. This is used as the username for authentication.
     */
    email: string;
}

export interface SourceAgilecrmResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceAgilecrmResourceAllocationDefault;
    jobSpecifics: outputs.SourceAgilecrmResourceAllocationJobSpecific[];
}

export interface SourceAgilecrmResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceAgilecrmResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceAgilecrmResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceAgilecrmResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceAhaConfiguration {
    /**
     * API Key
     */
    apiKey: string;
    /**
     * URL
     */
    url: string;
}

export interface SourceAhaResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceAhaResourceAllocationDefault;
    jobSpecifics: outputs.SourceAhaResourceAllocationJobSpecific[];
}

export interface SourceAhaResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceAhaResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceAhaResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceAhaResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceAirbyteConfiguration {
    clientId: string;
    clientSecret: string;
    startDate: string;
}

export interface SourceAirbyteResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceAirbyteResourceAllocationDefault;
    jobSpecifics: outputs.SourceAirbyteResourceAllocationJobSpecific[];
}

export interface SourceAirbyteResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceAirbyteResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceAirbyteResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceAirbyteResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceAircallConfiguration {
    /**
     * App ID found at settings https://dashboard.aircall.io/integrations/api-keys
     */
    apiId: string;
    /**
     * App token found at settings (Ref- https://dashboard.aircall.io/integrations/api-keys)
     */
    apiToken: string;
    /**
     * Date time filter for incremental filter, Specify which date to extract from.
     */
    startDate: string;
}

export interface SourceAircallResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceAircallResourceAllocationDefault;
    jobSpecifics: outputs.SourceAircallResourceAllocationJobSpecific[];
}

export interface SourceAircallResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceAircallResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceAircallResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceAircallResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceAirtableConfiguration {
    credentials?: outputs.SourceAirtableConfigurationCredentials;
}

export interface SourceAirtableConfigurationCredentials {
    oAuth20?: outputs.SourceAirtableConfigurationCredentialsOAuth20;
    personalAccessToken?: outputs.SourceAirtableConfigurationCredentialsPersonalAccessToken;
}

export interface SourceAirtableConfigurationCredentialsOAuth20 {
    /**
     * Access Token for making authenticated requests.
     */
    accessToken?: string;
    /**
     * The client ID of the Airtable developer application.
     */
    clientId: string;
    /**
     * The client secret of the Airtable developer application.
     */
    clientSecret: string;
    /**
     * The key to refresh the expired access token.
     */
    refreshToken: string;
    /**
     * The date-time when the access token should be refreshed.
     */
    tokenExpiryDate?: string;
}

export interface SourceAirtableConfigurationCredentialsPersonalAccessToken {
    /**
     * The Personal Access Token for the Airtable account. See the <a href="https://airtable.com/developers/web/guides/personal-access-tokens">Support Guide</a> for more information on how to obtain this token.
     */
    apiKey: string;
}

export interface SourceAirtableResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceAirtableResourceAllocationDefault;
    jobSpecifics: outputs.SourceAirtableResourceAllocationJobSpecific[];
}

export interface SourceAirtableResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceAirtableResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceAirtableResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceAirtableResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceAkeneoConfiguration {
    apiUsername: string;
    clientId: string;
    /**
     * https://cb8715249e.trial.akeneo.cloud
     */
    host: string;
    password: string;
    secret?: string;
}

export interface SourceAkeneoResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceAkeneoResourceAllocationDefault;
    jobSpecifics: outputs.SourceAkeneoResourceAllocationJobSpecific[];
}

export interface SourceAkeneoResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceAkeneoResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceAkeneoResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceAkeneoResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceAlgoliaConfiguration {
    apiKey: string;
    /**
     * The application ID for your application found in settings
     */
    applicationId: string;
    /**
     * Object ID within index for search queries. Default: "ecommerce-sample-data-9999996"
     */
    objectId: string;
    /**
     * Search query to be used with indexes_query stream with format defined in `https://www.algolia.com/doc/rest-api/search/#tag/Search/operation/searchSingleIndex`. Default: "hitsPerPage=2&getRankingInfo=1"
     */
    searchQuery: string;
    startDate: string;
}

export interface SourceAlgoliaResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceAlgoliaResourceAllocationDefault;
    jobSpecifics: outputs.SourceAlgoliaResourceAllocationJobSpecific[];
}

export interface SourceAlgoliaResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceAlgoliaResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceAlgoliaResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceAlgoliaResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceAlpacaBrokerApiConfiguration {
    /**
     * The trading environment, either 'live', 'paper' or 'broker-api.sandbox'. Default: "broker-api.sandbox"; must be one of ["api", "paper-api", "broker-api.sandbox"]
     */
    environment: string;
    /**
     * Limit for each response objects. Default: "20"
     */
    limit: string;
    /**
     * Your Alpaca API Secret Key. You can find this in the Alpaca developer web console under your account settings.
     */
    password?: string;
    startDate: string;
    /**
     * API Key ID for the alpaca market
     */
    username: string;
}

export interface SourceAlpacaBrokerApiResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceAlpacaBrokerApiResourceAllocationDefault;
    jobSpecifics: outputs.SourceAlpacaBrokerApiResourceAllocationJobSpecific[];
}

export interface SourceAlpacaBrokerApiResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceAlpacaBrokerApiResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceAlpacaBrokerApiResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceAlpacaBrokerApiResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceAlphaVantageConfiguration {
    /**
     * Whether to return adjusted data. Only applicable to intraday endpoints. Default: false
     */
    adjusted: boolean;
    /**
     * API Key
     */
    apiKey: string;
    /**
     * Time-series data point interval. Required for intraday endpoints. Default: "1min"; must be one of ["1min", "5min", "15min", "30min", "60min"]
     */
    interval: string;
    /**
     * Whether to return full or compact data (the last 100 data points). Default: "compact"; must be one of ["compact", "full"]
     */
    outputsize: string;
    /**
     * Stock symbol (with exchange code)
     */
    symbol: string;
}

export interface SourceAlphaVantageResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceAlphaVantageResourceAllocationDefault;
    jobSpecifics: outputs.SourceAlphaVantageResourceAllocationJobSpecific[];
}

export interface SourceAlphaVantageResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceAlphaVantageResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceAlphaVantageResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceAlphaVantageResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceAmazonAdsConfiguration {
    /**
     * The client ID of your Amazon Ads developer application. See the <a href="https://advertising.amazon.com/API/docs/en-us/get-started/generate-api-tokens#retrieve-your-client-id-and-client-secret">docs</a> for more information.
     */
    clientId: string;
    /**
     * The client secret of your Amazon Ads developer application. See the <a href="https://advertising.amazon.com/API/docs/en-us/get-started/generate-api-tokens#retrieve-your-client-id-and-client-secret">docs</a> for more information.
     */
    clientSecret: string;
    /**
     * The amount of days to go back in time to get the updated data from Amazon Ads. Default: 3
     */
    lookBackWindow: number;
    /**
     * Marketplace IDs you want to fetch data for. Note: If Profile IDs are also selected, profiles will be selected if they match the Profile ID OR the Marketplace ID.
     */
    marketplaceIds?: string[];
    /**
     * Profile IDs you want to fetch data for. The Amazon Ads source connector supports only profiles with seller and vendor type, profiles with agency type will be ignored. See <a href="https://advertising.amazon.com/API/docs/en-us/concepts/authorization/profiles">docs</a> for more details. Note: If Marketplace IDs are also selected, profiles will be selected if they match the Profile ID OR the Marketplace ID.
     */
    profiles?: number[];
    /**
     * Amazon Ads refresh token. See the <a href="https://advertising.amazon.com/API/docs/en-us/get-started/generate-api-tokens">docs</a> for more information on how to obtain this token.
     */
    refreshToken: string;
    /**
     * Region to pull data from (EU/NA/FE). See <a href="https://advertising.amazon.com/API/docs/en-us/info/api-overview#api-endpoints">docs</a> for more details. Default: "NA"; must be one of ["NA", "EU", "FE"]
     */
    region: string;
    /**
     * The Start date for collecting reports, should not be more than 60 days in the past. In YYYY-MM-DD format
     */
    startDate?: string;
}

export interface SourceAmazonAdsResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceAmazonAdsResourceAllocationDefault;
    jobSpecifics: outputs.SourceAmazonAdsResourceAllocationJobSpecific[];
}

export interface SourceAmazonAdsResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceAmazonAdsResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceAmazonAdsResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceAmazonAdsResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceAmazonSellerPartnerConfiguration {
    /**
     * Type of the Account you're going to authorize the Airbyte application by. Default: "Seller"; must be one of ["Seller", "Vendor"]
     */
    accountType: string;
    /**
     * Your Amazon Application ID.
     */
    appId?: string;
    /**
     * Select the AWS Environment. Default: "PRODUCTION"; must be one of ["PRODUCTION", "SANDBOX"]
     */
    awsEnvironment: string;
    /**
     * Your Login with Amazon Client ID.
     */
    lwaAppId: string;
    /**
     * Your Login with Amazon Client Secret.
     */
    lwaClientSecret: string;
    /**
     * For syncs spanning a large date range, this option is used to request data in a smaller fixed window to improve sync reliability. This time window can be configured granularly by day. Default: 90
     */
    periodInDays: number;
    /**
     * The Refresh Token obtained via OAuth flow authorization.
     */
    refreshToken: string;
    /**
     * Select the AWS Region. Default: "US"; must be one of ["AE", "AU", "BE", "BR", "CA", "DE", "EG", "ES", "FR", "GB", "IN", "IT", "JP", "MX", "NL", "PL", "SA", "SE", "SG", "TR", "UK", "US"]
     */
    region: string;
    /**
     * UTC date and time in the format 2017-01-25T00:00:00Z. Any data after this date will not be replicated.
     */
    replicationEndDate?: string;
    /**
     * UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated. If start date is not provided or older than 2 years ago from today, the date 2 years ago from today will be used.
     */
    replicationStartDate?: string;
    /**
     * Additional information passed to reports. This varies by report type.
     */
    reportOptionsLists?: outputs.SourceAmazonSellerPartnerConfigurationReportOptionsList[];
    /**
     * For report based streams with known amount of requests per time period, this option will use waiting time between requests to avoid fatal statuses in reports. See <a href="https://docs.airbyte.com/integrations/sources/amazon-seller-partner#limitations--troubleshooting" target="_blank">Troubleshooting</a> section for more details. Default: false
     */
    waitToAvoidFatalErrors: boolean;
}

export interface SourceAmazonSellerPartnerConfigurationReportOptionsList {
    /**
     * List of options
     */
    optionsLists: outputs.SourceAmazonSellerPartnerConfigurationReportOptionsListOptionsList[];
    /**
     * must be one of ["GET_AFN_INVENTORY_DATA", "GET_AFN_INVENTORY_DATA_BY_COUNTRY", "GET_AMAZON_FULFILLED_SHIPMENTS_DATA_GENERAL", "GET_FBA_ESTIMATED_FBA_FEES_TXT_DATA", "GET_FBA_FULFILLMENT_CUSTOMER_RETURNS_DATA", "GET_FBA_FULFILLMENT_CUSTOMER_SHIPMENT_PROMOTION_DATA", "GET_FBA_FULFILLMENT_CUSTOMER_SHIPMENT_REPLACEMENT_DATA", "GET_FBA_FULFILLMENT_REMOVAL_ORDER_DETAIL_DATA", "GET_FBA_FULFILLMENT_REMOVAL_SHIPMENT_DETAIL_DATA", "GET_FBA_INVENTORY_PLANNING_DATA", "GET_FBA_MYI_UNSUPPRESSED_INVENTORY_DATA", "GET_FBA_REIMBURSEMENTS_DATA", "GET_FBA_SNS_FORECAST_DATA", "GET_FBA_SNS_PERFORMANCE_DATA", "GET_FBA_STORAGE_FEE_CHARGES_DATA", "GET_FLAT_FILE_ACTIONABLE_ORDER_DATA_SHIPPING", "GET_FLAT_FILE_ALL_ORDERS_DATA_BY_LAST_UPDATE_GENERAL", "GET_FLAT_FILE_ALL_ORDERS_DATA_BY_ORDER_DATE_GENERAL", "GET_FLAT_FILE_ARCHIVED_ORDERS_DATA_BY_ORDER_DATE", "GET_FLAT_FILE_OPEN_LISTINGS_DATA", "GET_FLAT_FILE_RETURNS_DATA_BY_RETURN_DATE", "GET_LEDGER_DETAIL_VIEW_DATA", "GET_LEDGER_SUMMARY_VIEW_DATA", "GET_MERCHANT_CANCELLED_LISTINGS_DATA", "GET_MERCHANT_LISTINGS_ALL_DATA", "GET_MERCHANT_LISTINGS_DATA", "GET_MERCHANT_LISTINGS_DATA_BACK_COMPAT", "GET_MERCHANT_LISTINGS_INACTIVE_DATA", "GET_MERCHANTS_LISTINGS_FYP_REPORT", "GET_ORDER_REPORT_DATA_SHIPPING", "GET_RESTOCK_INVENTORY_RECOMMENDATIONS_REPORT", "GET_SELLER_FEEDBACK_DATA", "GET_STRANDED_INVENTORY_UI_DATA", "GET_V2_SETTLEMENT_REPORT_DATA_FLAT_FILE", "GET_XML_ALL_ORDERS_DATA_BY_ORDER_DATE_GENERAL", "GET_XML_BROWSE_TREE_DATA", "GET_VENDOR_REAL_TIME_INVENTORY_REPORT"]
     */
    reportName: string;
    streamName: string;
}

export interface SourceAmazonSellerPartnerConfigurationReportOptionsListOptionsList {
    optionName: string;
    optionValue: string;
}

export interface SourceAmazonSellerPartnerResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceAmazonSellerPartnerResourceAllocationDefault;
    jobSpecifics: outputs.SourceAmazonSellerPartnerResourceAllocationJobSpecific[];
}

export interface SourceAmazonSellerPartnerResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceAmazonSellerPartnerResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceAmazonSellerPartnerResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceAmazonSellerPartnerResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceAmazonSqsConfiguration {
    /**
     * The Access Key ID of the AWS IAM Role to use for pulling messages
     */
    accessKey: string;
    /**
     * Comma separated list of Mesage Attribute names to return. Default: "All"
     */
    attributesToReturn: string;
    /**
     * Max amount of messages to get in one batch (10 max). Default: 10
     */
    maxBatchSize: number;
    /**
     * Max amount of time in seconds to wait for messages in a single poll (20 max). Default: 20
     */
    maxWaitTime: number;
    /**
     * URL of the SQS Queue
     */
    queueUrl: string;
    /**
     * AWS Region of the SQS Queue. Default: "us-east-1"; must be one of ["af-south-1", "ap-east-1", "ap-northeast-1", "ap-northeast-2", "ap-northeast-3", "ap-south-1", "ap-south-2", "ap-southeast-1", "ap-southeast-2", "ap-southeast-3", "ap-southeast-4", "ca-central-1", "ca-west-1", "cn-north-1", "cn-northwest-1", "eu-central-1", "eu-central-2", "eu-north-1", "eu-south-1", "eu-south-2", "eu-west-1", "eu-west-2", "eu-west-3", "il-central-1", "me-central-1", "me-south-1", "sa-east-1", "us-east-1", "us-east-2", "us-gov-east-1", "us-gov-west-1", "us-west-1", "us-west-2"]
     */
    region: string;
    /**
     * The Secret Key of the AWS IAM Role to use for pulling messages
     */
    secretKey: string;
    /**
     * Note - Different targets have different attribute enum requirements, please refer actions sections in https://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/Welcome.html. Default: "ReceiveMessage"; must be one of ["GetQueueAttributes", "ReceiveMessage"]
     */
    target: string;
    /**
     * Modify the Visibility Timeout of the individual message from the Queue's default (seconds). Default: 20
     */
    visibilityTimeout: number;
}

export interface SourceAmazonSqsResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceAmazonSqsResourceAllocationDefault;
    jobSpecifics: outputs.SourceAmazonSqsResourceAllocationJobSpecific[];
}

export interface SourceAmazonSqsResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceAmazonSqsResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceAmazonSqsResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceAmazonSqsResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceAmplitudeConfiguration {
    /**
     * According to <a href="https://amplitude.com/docs/apis/analytics/dashboard-rest#query-parameters">Amplitude documentation</a>, grouping by `Country` is optional. If you face issues fetching the stream or checking the connection please set this field to `False`. Default: true
     */
    activeUsersGroupByCountry: boolean;
    /**
     * Amplitude API Key. See the <a href="https://docs.airbyte.com/integrations/sources/amplitude#setup-guide">setup guide</a> for more information on how to obtain this key.
     */
    apiKey: string;
    /**
     * Amplitude data region server. Default: "Standard Server"; must be one of ["Standard Server", "EU Residency Server"]
     */
    dataRegion: string;
    /**
     * According to <a href="https://www.docs.developers.amplitude.com/analytics/apis/export-api/#considerations">Considerations</a> too large of a time range in te request can cause a timeout error. In this case, please provide a shorter time interval in hours. Default: 24
     */
    requestTimeRange: number;
    /**
     * Amplitude Secret Key. See the <a href="https://docs.airbyte.com/integrations/sources/amplitude#setup-guide">setup guide</a> for more information on how to obtain this key.
     */
    secretKey: string;
    /**
     * UTC date and time in the format 2021-01-25T00:00:00Z. Any data before this date will not be replicated.
     */
    startDate: string;
}

export interface SourceAmplitudeResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceAmplitudeResourceAllocationDefault;
    jobSpecifics: outputs.SourceAmplitudeResourceAllocationJobSpecific[];
}

export interface SourceAmplitudeResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceAmplitudeResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceAmplitudeResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceAmplitudeResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceApifyDatasetConfiguration {
    /**
     * ID of the dataset you would like to load to Airbyte. In Apify Console, you can view your datasets in the <a href="https://console.apify.com/storage/datasets">Storage section under the Datasets tab</a> after you login. See the <a href="https://docs.apify.com/platform/storage/dataset">Apify Docs</a> for more information.
     */
    datasetId: string;
    /**
     * Personal API token of your Apify account. In Apify Console, you can find your API token in the <a href="https://console.apify.com/account/integrations">Settings section under the Integrations tab</a> after you login. See the <a href="https://docs.apify.com/platform/integrations/api#api-token">Apify Docs</a> for more information.
     */
    token: string;
}

export interface SourceApifyDatasetResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceApifyDatasetResourceAllocationDefault;
    jobSpecifics: outputs.SourceApifyDatasetResourceAllocationJobSpecific[];
}

export interface SourceApifyDatasetResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceApifyDatasetResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceApifyDatasetResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceApifyDatasetResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceAppcuesConfiguration {
    /**
     * Account ID of Appcues found in account settings page (https://studio.appcues.com/settings/account)
     */
    accountId: string;
    password?: string;
    startDate: string;
    username: string;
}

export interface SourceAppcuesResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceAppcuesResourceAllocationDefault;
    jobSpecifics: outputs.SourceAppcuesResourceAllocationJobSpecific[];
}

export interface SourceAppcuesResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceAppcuesResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceAppcuesResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceAppcuesResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceAppfiguresConfiguration {
    apiKey: string;
    /**
     * Category term for grouping the search results. Default: "product"; must be one of ["network", "product", "country", "date"]
     */
    groupBy: string;
    /**
     * The store which needs to be searched in streams. Default: "apple"
     */
    searchStore: string;
    startDate: string;
}

export interface SourceAppfiguresResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceAppfiguresResourceAllocationDefault;
    jobSpecifics: outputs.SourceAppfiguresResourceAllocationJobSpecific[];
}

export interface SourceAppfiguresResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceAppfiguresResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceAppfiguresResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceAppfiguresResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceAppfollowConfiguration {
    /**
     * API Key provided by Appfollow
     */
    apiSecret?: string;
}

export interface SourceAppfollowResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceAppfollowResourceAllocationDefault;
    jobSpecifics: outputs.SourceAppfollowResourceAllocationJobSpecific[];
}

export interface SourceAppfollowResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceAppfollowResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceAppfollowResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceAppfollowResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceAppleSearchAdsConfiguration {
    /**
     * This factor factor determines the delay increase factor between retryable failures. Valid values are integers between 1 and 20. Default: 5
     */
    backoffFactor: number;
    /**
     * A user identifier for the token request. See <a href="https://developer.apple.com/documentation/apple_search_ads/implementing_oauth_for_the_apple_search_ads_api">here</a>
     */
    clientId: string;
    /**
     * A string that authenticates the user’s setup request. See <a href="https://developer.apple.com/documentation/apple_search_ads/implementing_oauth_for_the_apple_search_ads_api">here</a>
     */
    clientSecret: string;
    /**
     * Data is retrieved until that date (included)
     */
    endDate?: string;
    /**
     * Apple Search Ads uses a 30-day attribution window. However, you may consider smaller values in order to shorten sync durations, at the cost of missing late data attributions. Default: 30
     */
    lookbackWindow: number;
    /**
     * The identifier of the organization that owns the campaign. Your Org Id is the same as your account in the Apple Search Ads UI.
     */
    orgId: number;
    /**
     * Start getting data from that date.
     */
    startDate: string;
    /**
     * The timezone for the reporting data. Use 'ORTZ' for Organization Time Zone or 'UTC' for Coordinated Universal Time. Default is UTC. Default: "UTC"; must be one of ["ORTZ", "UTC"]
     */
    timezone: string;
}

export interface SourceAppleSearchAdsResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceAppleSearchAdsResourceAllocationDefault;
    jobSpecifics: outputs.SourceAppleSearchAdsResourceAllocationJobSpecific[];
}

export interface SourceAppleSearchAdsResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceAppleSearchAdsResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceAppleSearchAdsResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceAppleSearchAdsResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceApptivoConfiguration {
    accessKey: string;
    /**
     * API key to use. Find it in your Apptivo account under Business Settings > API Access.
     */
    apiKey: string;
}

export interface SourceApptivoResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceApptivoResourceAllocationDefault;
    jobSpecifics: outputs.SourceApptivoResourceAllocationJobSpecific[];
}

export interface SourceApptivoResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceApptivoResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceApptivoResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceApptivoResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceAsanaConfiguration {
    /**
     * Choose how to authenticate to Github
     */
    credentials?: outputs.SourceAsanaConfigurationCredentials;
    /**
     * The number of worker threads to use for the sync. The performance upper boundary is based on the limit of your Asana pricing plan. More info about the rate limit tiers can be found on Asana's API <a href="https://developers.asana.com/docs/rate-limits">docs</a>. Default: 10
     */
    numWorkers: number;
    /**
     * Globally unique identifiers for the organization exports
     */
    organizationExportIds?: string[];
}

export interface SourceAsanaConfigurationCredentials {
    authenticateViaAsanaOauth?: outputs.SourceAsanaConfigurationCredentialsAuthenticateViaAsanaOauth;
    authenticateWithPersonalAccessToken?: outputs.SourceAsanaConfigurationCredentialsAuthenticateWithPersonalAccessToken;
}

export interface SourceAsanaConfigurationCredentialsAuthenticateViaAsanaOauth {
    clientId: string;
    clientSecret: string;
    refreshToken: string;
}

export interface SourceAsanaConfigurationCredentialsAuthenticateWithPersonalAccessToken {
    /**
     * Asana Personal Access Token (generate yours <a href="https://app.asana.com/0/developer-console">here</a>).
     */
    personalAccessToken: string;
}

export interface SourceAsanaResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceAsanaResourceAllocationDefault;
    jobSpecifics: outputs.SourceAsanaResourceAllocationJobSpecific[];
}

export interface SourceAsanaResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceAsanaResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceAsanaResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceAsanaResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceAshbyConfiguration {
    /**
     * The Ashby API Key, see <a href=\"https://developers.ashbyhq.com/reference/authentication\">doc</a> here.
     */
    apiKey: string;
    /**
     * UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated.
     */
    startDate: string;
}

export interface SourceAshbyResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceAshbyResourceAllocationDefault;
    jobSpecifics: outputs.SourceAshbyResourceAllocationJobSpecific[];
}

export interface SourceAshbyResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceAshbyResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceAshbyResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceAshbyResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceAuth0Configuration {
    /**
     * The Authentication API is served over HTTPS. All URLs referenced in the documentation have the following base `https://YOUR_DOMAIN`
     */
    baseUrl: string;
    credentials: outputs.SourceAuth0ConfigurationCredentials;
    /**
     * UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated. Default: "2023-08-05T00:43:59.244Z"
     */
    startDate: string;
}

export interface SourceAuth0ConfigurationCredentials {
    oAuth2AccessToken?: outputs.SourceAuth0ConfigurationCredentialsOAuth2AccessToken;
    oAuth2ConfidentialApplication?: outputs.SourceAuth0ConfigurationCredentialsOAuth2ConfidentialApplication;
}

export interface SourceAuth0ConfigurationCredentialsOAuth2AccessToken {
    /**
     * Also called <a href="https://auth0.com/docs/secure/tokens/access-tokens/get-management-api-access-tokens-for-testing">API Access Token </a> The access token used to call the Auth0 Management API Token. It's a JWT that contains specific grant permissions knowns as scopes.
     */
    accessToken: string;
}

export interface SourceAuth0ConfigurationCredentialsOAuth2ConfidentialApplication {
    /**
     * The audience for the token, which is your API. You can find this in the Identifier field on your  <a href="https://manage.auth0.com/#/apis">API's settings tab</a>
     */
    audience: string;
    /**
     * Your application's Client ID. You can find this value on the <a href="https://manage.auth0.com/#/applications">application's settings tab</a> after you login the admin portal.
     */
    clientId: string;
    /**
     * Your application's Client Secret. You can find this value on the <a href="https://manage.auth0.com/#/applications">application's settings tab</a> after you login the admin portal.
     */
    clientSecret: string;
}

export interface SourceAuth0ResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceAuth0ResourceAllocationDefault;
    jobSpecifics: outputs.SourceAuth0ResourceAllocationJobSpecific[];
}

export interface SourceAuth0ResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceAuth0ResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceAuth0ResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceAuth0ResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceAwsCloudtrailConfiguration {
    /**
     * AWS CloudTrail Access Key ID. See the <a href="https://docs.airbyte.com/integrations/sources/aws-cloudtrail">docs</a> for more information on how to obtain this key.
     */
    awsKeyId: string;
    /**
     * The default AWS Region to use, for example, us-west-1 or us-west-2. When specifying a Region inline during client initialization, this property is named region_name. Default: "us-east-1"
     */
    awsRegionName: string;
    /**
     * AWS CloudTrail Access Key ID. See the <a href="https://docs.airbyte.com/integrations/sources/aws-cloudtrail">docs</a> for more information on how to obtain this key.
     */
    awsSecretKey: string;
    lookupAttributesFilter?: outputs.SourceAwsCloudtrailConfigurationLookupAttributesFilter;
    /**
     * The date you would like to replicate data. Data in AWS CloudTrail is available for last 90 days only. Format: YYYY-MM-DD.
     */
    startDate?: string;
}

export interface SourceAwsCloudtrailConfigurationLookupAttributesFilter {
    /**
     * Default: "EventName"
     */
    attributeKey: string;
    /**
     * Default: "ListInstanceAssociations"
     */
    attributeValue: string;
}

export interface SourceAwsCloudtrailResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceAwsCloudtrailResourceAllocationDefault;
    jobSpecifics: outputs.SourceAwsCloudtrailResourceAllocationJobSpecific[];
}

export interface SourceAwsCloudtrailResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceAwsCloudtrailResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceAwsCloudtrailResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceAwsCloudtrailResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceAzureBlobStorageConfiguration {
    /**
     * The account's name of the Azure Blob Storage.
     */
    azureBlobStorageAccountName: string;
    /**
     * The name of the Azure blob storage container.
     */
    azureBlobStorageContainerName: string;
    /**
     * This is Azure Blob Storage endpoint domain name. Leave default value (or leave it empty if run container from command line) to use Microsoft native from example.
     */
    azureBlobStorageEndpoint?: string;
    /**
     * Credentials for connecting to the Azure Blob Storage
     */
    credentials: outputs.SourceAzureBlobStorageConfigurationCredentials;
    /**
     * UTC date and time in the format 2017-01-25T00:00:00.000000Z. Any file modified before this date will not be replicated.
     */
    startDate?: string;
    /**
     * Each instance of this configuration defines a <a href="https://docs.airbyte.com/cloud/core-concepts#stream">stream</a>. Use this to define which files belong in the stream, their format, and how they should be parsed and validated. When sending data to warehouse destination such as Snowflake or BigQuery, each stream is a separate table.
     */
    streams: outputs.SourceAzureBlobStorageConfigurationStream[];
}

export interface SourceAzureBlobStorageConfigurationCredentials {
    authenticateViaClientCredentials?: outputs.SourceAzureBlobStorageConfigurationCredentialsAuthenticateViaClientCredentials;
    authenticateViaOauth2?: outputs.SourceAzureBlobStorageConfigurationCredentialsAuthenticateViaOauth2;
    authenticateViaStorageAccountKey?: outputs.SourceAzureBlobStorageConfigurationCredentialsAuthenticateViaStorageAccountKey;
}

export interface SourceAzureBlobStorageConfigurationCredentialsAuthenticateViaClientCredentials {
    /**
     * Client ID of your Microsoft developer application
     */
    appClientId: string;
    /**
     * Client Secret of your Microsoft developer application
     */
    appClientSecret: string;
    /**
     * Tenant ID of the Microsoft Azure Application
     */
    appTenantId: string;
}

export interface SourceAzureBlobStorageConfigurationCredentialsAuthenticateViaOauth2 {
    /**
     * Client ID of your Microsoft developer application
     */
    clientId: string;
    /**
     * Client Secret of your Microsoft developer application
     */
    clientSecret: string;
    /**
     * Refresh Token of your Microsoft developer application
     */
    refreshToken: string;
    /**
     * Tenant ID of the Microsoft Azure Application user
     */
    tenantId: string;
}

export interface SourceAzureBlobStorageConfigurationCredentialsAuthenticateViaStorageAccountKey {
    /**
     * The Azure blob storage account key.
     */
    azureBlobStorageAccountKey: string;
}

export interface SourceAzureBlobStorageConfigurationStream {
    /**
     * When the state history of the file store is full, syncs will only read files that were last modified in the provided day range. Default: 3
     */
    daysToSyncIfHistoryIsFull: number;
    /**
     * The configuration options that are used to alter how to read incoming files that deviate from the standard formatting.
     */
    format: outputs.SourceAzureBlobStorageConfigurationStreamFormat;
    /**
     * The pattern used to specify which files should be selected from the file system. For more information on glob pattern matching look <a href="https://en.wikipedia.org/wiki/Glob_(programming)">here</a>.
     */
    globs?: string[];
    /**
     * The schema that will be used to validate records extracted from the file. This will override the stream schema that is auto-detected from incoming files.
     */
    inputSchema?: string;
    /**
     * The name of the stream.
     */
    name: string;
    /**
     * The number of resent files which will be used to discover the schema for this stream.
     */
    recentNFilesToReadForSchemaDiscovery?: number;
    /**
     * When enabled, syncs will not validate or structure records against the stream's schema. Default: false
     */
    schemaless: boolean;
    /**
     * The name of the validation policy that dictates sync behavior when a record does not adhere to the stream schema. Default: "Emit Record"; must be one of ["Emit Record", "Skip Record", "Wait for Discover"]
     */
    validationPolicy: string;
}

export interface SourceAzureBlobStorageConfigurationStreamFormat {
    avroFormat?: outputs.SourceAzureBlobStorageConfigurationStreamFormatAvroFormat;
    csvFormat?: outputs.SourceAzureBlobStorageConfigurationStreamFormatCsvFormat;
    jsonlFormat?: outputs.SourceAzureBlobStorageConfigurationStreamFormatJsonlFormat;
    parquetFormat?: outputs.SourceAzureBlobStorageConfigurationStreamFormatParquetFormat;
    /**
     * Extract text from document formats (.pdf, .docx, .md, .pptx) and emit as one record per file.
     */
    unstructuredDocumentFormat?: outputs.SourceAzureBlobStorageConfigurationStreamFormatUnstructuredDocumentFormat;
}

export interface SourceAzureBlobStorageConfigurationStreamFormatAvroFormat {
    /**
     * Whether to convert double fields to strings. This is recommended if you have decimal numbers with a high degree of precision because there can be a loss precision when handling floating point numbers. Default: false
     */
    doubleAsString: boolean;
}

export interface SourceAzureBlobStorageConfigurationStreamFormatCsvFormat {
    /**
     * The character delimiting individual cells in the CSV data. This may only be a 1-character string. For tab-delimited data enter '\t'. Default: ","
     */
    delimiter: string;
    /**
     * Whether two quotes in a quoted CSV value denote a single quote in the data. Default: true
     */
    doubleQuote: boolean;
    /**
     * The character encoding of the CSV data. Leave blank to default to <strong>UTF8</strong>. See <a href="https://docs.python.org/3/library/codecs.html#standard-encodings" target="_blank">list of python encodings</a> for allowable options. Default: "utf8"
     */
    encoding: string;
    /**
     * The character used for escaping special characters. To disallow escaping, leave this field blank.
     */
    escapeChar?: string;
    /**
     * A set of case-sensitive strings that should be interpreted as false values.
     */
    falseValues?: string[];
    /**
     * How headers will be defined. `User Provided` assumes the CSV does not have a header row and uses the headers provided and `Autogenerated` assumes the CSV does not have a header row and the CDK will generate headers using for `f{i}` where `i` is the index starting from 0. Else, the default behavior is to use the header from the CSV file. If a user wants to autogenerate or provide column names for a CSV having headers, they can skip rows.
     */
    headerDefinition?: outputs.SourceAzureBlobStorageConfigurationStreamFormatCsvFormatHeaderDefinition;
    /**
     * Whether to ignore errors that occur when the number of fields in the CSV does not match the number of columns in the schema. Default: false
     */
    ignoreErrorsOnFieldsMismatch: boolean;
    /**
     * A set of case-sensitive strings that should be interpreted as null values. For example, if the value 'NA' should be interpreted as null, enter 'NA' in this field.
     */
    nullValues: string[];
    /**
     * The character used for quoting CSV values. To disallow quoting, make this field blank. Default: "\""
     */
    quoteChar: string;
    /**
     * The number of rows to skip after the header row. Default: 0
     */
    skipRowsAfterHeader: number;
    /**
     * The number of rows to skip before the header row. For example, if the header row is on the 3rd row, enter 2 in this field. Default: 0
     */
    skipRowsBeforeHeader: number;
    /**
     * Whether strings can be interpreted as null values. If true, strings that match the null_values set will be interpreted as null. If false, strings that match the null_values set will be interpreted as the string itself. Default: true
     */
    stringsCanBeNull: boolean;
    /**
     * A set of case-sensitive strings that should be interpreted as true values.
     */
    trueValues?: string[];
}

export interface SourceAzureBlobStorageConfigurationStreamFormatCsvFormatHeaderDefinition {
    autogenerated?: outputs.SourceAzureBlobStorageConfigurationStreamFormatCsvFormatHeaderDefinitionAutogenerated;
    fromCsv?: outputs.SourceAzureBlobStorageConfigurationStreamFormatCsvFormatHeaderDefinitionFromCsv;
    userProvided?: outputs.SourceAzureBlobStorageConfigurationStreamFormatCsvFormatHeaderDefinitionUserProvided;
}

export interface SourceAzureBlobStorageConfigurationStreamFormatCsvFormatHeaderDefinitionAutogenerated {
}

export interface SourceAzureBlobStorageConfigurationStreamFormatCsvFormatHeaderDefinitionFromCsv {
}

export interface SourceAzureBlobStorageConfigurationStreamFormatCsvFormatHeaderDefinitionUserProvided {
    /**
     * The column names that will be used while emitting the CSV records
     */
    columnNames: string[];
}

export interface SourceAzureBlobStorageConfigurationStreamFormatJsonlFormat {
}

export interface SourceAzureBlobStorageConfigurationStreamFormatParquetFormat {
    /**
     * Whether to convert decimal fields to floats. There is a loss of precision when converting decimals to floats, so this is not recommended. Default: false
     */
    decimalAsFloat: boolean;
}

export interface SourceAzureBlobStorageConfigurationStreamFormatUnstructuredDocumentFormat {
    /**
     * Processing configuration
     */
    processing?: outputs.SourceAzureBlobStorageConfigurationStreamFormatUnstructuredDocumentFormatProcessing;
    /**
     * If true, skip files that cannot be parsed and pass the error message along as the _ab_source_file_parse_error field. If false, fail the sync. Default: true
     */
    skipUnprocessableFiles: boolean;
    /**
     * The strategy used to parse documents. `fast` extracts text directly from the document which doesn't work for all files. `ocr_only` is more reliable, but slower. `hi_res` is the most reliable, but requires an API key and a hosted instance of unstructured and can't be used with local mode. See the unstructured.io documentation for more details: https://unstructured-io.github.io/unstructured/core/partition.html#partition-pdf. Default: "auto"; must be one of ["auto", "fast", "ocr_only", "hi_res"]
     */
    strategy: string;
}

export interface SourceAzureBlobStorageConfigurationStreamFormatUnstructuredDocumentFormatProcessing {
    /**
     * Process files locally, supporting `fast` and `ocr` modes. This is the default option.
     */
    local?: outputs.SourceAzureBlobStorageConfigurationStreamFormatUnstructuredDocumentFormatProcessingLocal;
}

export interface SourceAzureBlobStorageConfigurationStreamFormatUnstructuredDocumentFormatProcessingLocal {
}

export interface SourceAzureBlobStorageResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceAzureBlobStorageResourceAllocationDefault;
    jobSpecifics: outputs.SourceAzureBlobStorageResourceAllocationJobSpecific[];
}

export interface SourceAzureBlobStorageResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceAzureBlobStorageResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceAzureBlobStorageResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceAzureBlobStorageResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceAzureTableConfiguration {
    /**
     * Azure Table Storage Access Key. See the <a href="https://docs.airbyte.com/integrations/sources/azure-table">docs</a> for more information on how to obtain this key.
     */
    storageAccessKey: string;
    /**
     * The name of your storage account.
     */
    storageAccountName: string;
    /**
     * Azure Table Storage service account URL suffix. See the <a href="https://docs.airbyte.com/integrations/sources/azure-table">docs</a> for more information on how to obtain endpoint suffix. Default: "core.windows.net"
     */
    storageEndpointSuffix: string;
}

export interface SourceAzureTableResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceAzureTableResourceAllocationDefault;
    jobSpecifics: outputs.SourceAzureTableResourceAllocationJobSpecific[];
}

export interface SourceAzureTableResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceAzureTableResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceAzureTableResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceAzureTableResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceBabelforceConfiguration {
    /**
     * The Babelforce access key ID
     */
    accessKeyId: string;
    /**
     * The Babelforce access token
     */
    accessToken: string;
    /**
     * Timestamp in Unix the replication from Babelforce API will start from. For example 1651363200 which corresponds to 2022-05-01 00:00:00.
     */
    dateCreatedFrom?: number;
    /**
     * Timestamp in Unix the replication from Babelforce will be up to. For example 1651363200 which corresponds to 2022-05-01 00:00:00.
     */
    dateCreatedTo?: number;
    /**
     * Babelforce region. Default: "services"; must be one of ["services", "us-east", "ap-southeast"]
     */
    region: string;
}

export interface SourceBabelforceResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceBabelforceResourceAllocationDefault;
    jobSpecifics: outputs.SourceBabelforceResourceAllocationJobSpecific[];
}

export interface SourceBabelforceResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceBabelforceResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceBabelforceResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceBabelforceResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceBambooHrConfiguration {
    /**
     * Api key of bamboo hr
     */
    apiKey: string;
    /**
     * Comma-separated list of fields to include in custom reports.
     */
    customReportsFields?: string;
    /**
     * If true, the custom reports endpoint will include the default fields defined here: https://documentation.bamboohr.com/docs/list-of-field-names. Default: true
     */
    customReportsIncludeDefaultFields: boolean;
    /**
     * Comma-separated list of fields to include for employees. Default: "firstName,lastName"
     */
    employeeFields: string;
    startDate?: string;
    /**
     * Sub Domain of bamboo hr
     */
    subdomain: string;
}

export interface SourceBambooHrResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceBambooHrResourceAllocationDefault;
    jobSpecifics: outputs.SourceBambooHrResourceAllocationJobSpecific[];
}

export interface SourceBambooHrResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceBambooHrResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceBambooHrResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceBambooHrResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceBasecampConfiguration {
    accountId: number;
    clientId: string;
    clientRefreshToken2: string;
    clientSecret: string;
    startDate: string;
}

export interface SourceBasecampResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceBasecampResourceAllocationDefault;
    jobSpecifics: outputs.SourceBasecampResourceAllocationJobSpecific[];
}

export interface SourceBasecampResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceBasecampResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceBasecampResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceBasecampResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceBeamerConfiguration {
    apiKey: string;
    startDate: string;
}

export interface SourceBeamerResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceBeamerResourceAllocationDefault;
    jobSpecifics: outputs.SourceBeamerResourceAllocationJobSpecific[];
}

export interface SourceBeamerResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceBeamerResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceBeamerResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceBeamerResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceBigmailerConfiguration {
    /**
     * API key to use. You can create and find it on the API key management page in your BigMailer account.
     */
    apiKey: string;
}

export interface SourceBigmailerResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceBigmailerResourceAllocationDefault;
    jobSpecifics: outputs.SourceBigmailerResourceAllocationJobSpecific[];
}

export interface SourceBigmailerResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceBigmailerResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceBigmailerResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceBigmailerResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceBigqueryConfiguration {
    /**
     * The contents of your Service Account Key JSON file. See the <a href="https://docs.airbyte.com/integrations/sources/bigquery#setup-the-bigquery-source-in-airbyte">docs</a> for more information on how to obtain this key.
     */
    credentialsJson: string;
    /**
     * The dataset ID to search for tables and views. If you are only loading data from one dataset, setting this option could result in much faster schema discovery.
     */
    datasetId?: string;
    /**
     * The GCP project ID for the project containing the target BigQuery dataset.
     */
    projectId: string;
}

export interface SourceBigqueryResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceBigqueryResourceAllocationDefault;
    jobSpecifics: outputs.SourceBigqueryResourceAllocationJobSpecific[];
}

export interface SourceBigqueryResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceBigqueryResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceBigqueryResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceBigqueryResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceBingAdsConfiguration {
    /**
     * Predicates that will be used to sync data by specific accounts.
     */
    accountNames?: outputs.SourceBingAdsConfigurationAccountName[];
    /**
     * The Client ID of your Microsoft Advertising developer application.
     */
    clientId: string;
    /**
     * The Client Secret of your Microsoft Advertising developer application. Default: ""
     */
    clientSecret: string;
    /**
     * You can add your Custom Bing Ads report by creating one.
     */
    customReports?: outputs.SourceBingAdsConfigurationCustomReport[];
    /**
     * Developer token associated with user. See more info <a href="https://docs.microsoft.com/en-us/advertising/guides/get-started?view=bingads-13#get-developer-token"> in the docs</a>.
     */
    developerToken: string;
    /**
     * Also known as attribution or conversion window. How far into the past to look for records (in days). If your conversion window has an hours/minutes granularity, round it up to the number of days exceeding. Used only for performance report streams in incremental mode without specified Reports Start Date. Default: 0
     */
    lookbackWindow: number;
    /**
     * Refresh Token to renew the expired Access Token.
     */
    refreshToken: string;
    /**
     * The start date from which to begin replicating report data. Any data generated before this date will not be replicated in reports. This is a UTC date in YYYY-MM-DD format. If not set, data from previous and current calendar year will be replicated.
     */
    reportsStartDate?: string;
    /**
     * The Tenant ID of your Microsoft Advertising developer application. Set this to "common" unless you know you need a different value. Default: "common"
     */
    tenantId: string;
}

export interface SourceBingAdsConfigurationAccountName {
    /**
     * Account Name is a string value for comparing with the specified predicate.
     */
    name: string;
    /**
     * An Operator that will be used to filter accounts. The Contains predicate has features for matching words, matching inflectional forms of words, searching using wildcard characters, and searching using proximity. The Equals is used to return all rows where account name is equal(=) to the string that you provided. must be one of ["Contains", "Equals"]
     */
    operator: string;
}

export interface SourceBingAdsConfigurationCustomReport {
    /**
     * The name of the custom report, this name would be used as stream name
     */
    name: string;
    /**
     * A list of available aggregations. Default: "[Hourly]"
     */
    reportAggregation: string;
    /**
     * A list of available report object columns. You can find it in description of reporting object that you want to add to custom report.
     */
    reportColumns: string[];
    /**
     * The name of the the object derives from the ReportRequest object. You can find it in Bing Ads Api docs - Reporting API - Reporting Data Objects. must be one of ["AccountPerformanceReportRequest", "AdDynamicTextPerformanceReportRequest", "AdExtensionByAdReportRequest", "AdExtensionByKeywordReportRequest", "AdExtensionDetailReportRequest", "AdGroupPerformanceReportRequest", "AdPerformanceReportRequest", "AgeGenderAudienceReportRequest", "AudiencePerformanceReportRequest", "CallDetailReportRequest", "CampaignPerformanceReportRequest", "ConversionPerformanceReportRequest", "DestinationUrlPerformanceReportRequest", "DSAAutoTargetPerformanceReportRequest", "DSACategoryPerformanceReportRequest", "DSASearchQueryPerformanceReportRequest", "GeographicPerformanceReportRequest", "GoalsAndFunnelsReportRequest", "HotelDimensionPerformanceReportRequest", "HotelGroupPerformanceReportRequest", "KeywordPerformanceReportRequest", "NegativeKeywordConflictReportRequest", "ProductDimensionPerformanceReportRequest", "ProductMatchCountReportRequest", "ProductNegativeKeywordConflictReportRequest", "ProductPartitionPerformanceReportRequest", "ProductPartitionUnitPerformanceReportRequest", "ProductSearchQueryPerformanceReportRequest", "ProfessionalDemographicsAudienceReportRequest", "PublisherUsagePerformanceReportRequest", "SearchCampaignChangeHistoryReportRequest", "SearchQueryPerformanceReportRequest", "ShareOfVoiceReportRequest", "UserLocationPerformanceReportRequest"]
     */
    reportingObject: string;
}

export interface SourceBingAdsResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceBingAdsResourceAllocationDefault;
    jobSpecifics: outputs.SourceBingAdsResourceAllocationJobSpecific[];
}

export interface SourceBingAdsResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceBingAdsResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceBingAdsResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceBingAdsResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceBitlyConfiguration {
    apiKey: string;
    endDate: string;
    startDate: string;
}

export interface SourceBitlyResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceBitlyResourceAllocationDefault;
    jobSpecifics: outputs.SourceBitlyResourceAllocationJobSpecific[];
}

export interface SourceBitlyResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceBitlyResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceBitlyResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceBitlyResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceBloggerConfiguration {
    clientId: string;
    clientRefreshToken: string;
    clientSecret: string;
}

export interface SourceBloggerResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceBloggerResourceAllocationDefault;
    jobSpecifics: outputs.SourceBloggerResourceAllocationJobSpecific[];
}

export interface SourceBloggerResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceBloggerResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceBloggerResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceBloggerResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceBoldsignConfiguration {
    /**
     * Your BoldSign API key. You can generate it by navigating to the API menu in the BoldSign app, selecting 'API Key', and clicking 'Generate API Key'. Copy the generated key and paste it here.
     */
    apiKey: string;
    startDate: string;
}

export interface SourceBoldsignResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceBoldsignResourceAllocationDefault;
    jobSpecifics: outputs.SourceBoldsignResourceAllocationJobSpecific[];
}

export interface SourceBoldsignResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceBoldsignResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceBoldsignResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceBoldsignResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceBoxConfiguration {
    clientId: string;
    clientSecret: string;
    user: number;
}

export interface SourceBoxResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceBoxResourceAllocationDefault;
    jobSpecifics: outputs.SourceBoxResourceAllocationJobSpecific[];
}

export interface SourceBoxResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceBoxResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceBoxResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceBoxResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceBraintreeConfiguration {
    /**
     * Environment specifies where the data will come from. must be one of ["Development", "Sandbox", "Qa", "Production"]
     */
    environment: string;
    /**
     * The unique identifier for your entire gateway account. See the <a href="https://docs.airbyte.com/integrations/sources/braintree">docs</a> for more information on how to obtain this ID.
     */
    merchantId: string;
    /**
     * Braintree Private Key. See the <a href="https://docs.airbyte.com/integrations/sources/braintree">docs</a> for more information on how to obtain this key.
     */
    privateKey: string;
    /**
     * Braintree Public Key. See the <a href="https://docs.airbyte.com/integrations/sources/braintree">docs</a> for more information on how to obtain this key.
     */
    publicKey: string;
    /**
     * UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated.
     */
    startDate?: string;
}

export interface SourceBraintreeResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceBraintreeResourceAllocationDefault;
    jobSpecifics: outputs.SourceBraintreeResourceAllocationJobSpecific[];
}

export interface SourceBraintreeResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceBraintreeResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceBraintreeResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceBraintreeResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceBrazeConfiguration {
    /**
     * Braze REST API key
     */
    apiKey: string;
    /**
     * Rows after this date will be synced
     */
    startDate: string;
    /**
     * Braze REST API endpoint
     */
    url: string;
}

export interface SourceBrazeResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceBrazeResourceAllocationDefault;
    jobSpecifics: outputs.SourceBrazeResourceAllocationJobSpecific[];
}

export interface SourceBrazeResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceBrazeResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceBrazeResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceBrazeResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceBreezometerConfiguration {
    /**
     * Your API Access Key. See <a href="https://docs.breezometer.com/api-documentation/introduction/#authentication/">here</a>.
     */
    apiKey: string;
    /**
     * Number of days to forecast. Minimum 1, maximum 3. Valid for Polen and Weather Forecast streams.
     */
    daysToForecast?: number;
    /**
     * Number of hours retireve from Air Quality History stream. Minimum 1, maximum 720.
     */
    historicHours?: number;
    /**
     * Number of hours to forecast. Minimum 1, maximum 96. Valid for Air Quality Forecast stream.
     */
    hoursToForecast?: number;
    /**
     * Latitude of the monitored location.
     */
    latitude: string;
    /**
     * Longitude of the monitored location.
     */
    longitude: string;
    /**
     * Desired radius from the location provided. Minimum 5, maximum 100. Valid for Wildfires streams.
     */
    radius?: number;
}

export interface SourceBreezometerResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceBreezometerResourceAllocationDefault;
    jobSpecifics: outputs.SourceBreezometerResourceAllocationJobSpecific[];
}

export interface SourceBreezometerResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceBreezometerResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceBreezometerResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceBreezometerResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceBreezyHrConfiguration {
    apiKey: string;
    companyId: string;
}

export interface SourceBreezyHrResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceBreezyHrResourceAllocationDefault;
    jobSpecifics: outputs.SourceBreezyHrResourceAllocationJobSpecific[];
}

export interface SourceBreezyHrResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceBreezyHrResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceBreezyHrResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceBreezyHrResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceBrevoConfiguration {
    apiKey: string;
    startDate: string;
}

export interface SourceBrevoResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceBrevoResourceAllocationDefault;
    jobSpecifics: outputs.SourceBrevoResourceAllocationJobSpecific[];
}

export interface SourceBrevoResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceBrevoResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceBrevoResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceBrevoResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceBrexConfiguration {
    startDate: string;
    /**
     * User token to authenticate API requests. Generate it from your Brex dashboard under Developer > Settings.
     */
    userToken: string;
}

export interface SourceBrexResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceBrexResourceAllocationDefault;
    jobSpecifics: outputs.SourceBrexResourceAllocationJobSpecific[];
}

export interface SourceBrexResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceBrexResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceBrexResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceBrexResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceBugsnagConfiguration {
    /**
     * Personal auth token for accessing the Bugsnag API. Generate it in the My Account section of Bugsnag settings.
     */
    authToken: string;
    startDate: string;
}

export interface SourceBugsnagResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceBugsnagResourceAllocationDefault;
    jobSpecifics: outputs.SourceBugsnagResourceAllocationJobSpecific[];
}

export interface SourceBugsnagResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceBugsnagResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceBugsnagResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceBugsnagResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceBuildkiteConfiguration {
    apiKey: string;
    startDate: string;
}

export interface SourceBuildkiteResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceBuildkiteResourceAllocationDefault;
    jobSpecifics: outputs.SourceBuildkiteResourceAllocationJobSpecific[];
}

export interface SourceBuildkiteResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceBuildkiteResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceBuildkiteResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceBuildkiteResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceBunnyIncConfiguration {
    apikey: string;
    startDate?: string;
    /**
     * The subdomain specific to your Bunny account or service.
     */
    subdomain: string;
}

export interface SourceBunnyIncResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceBunnyIncResourceAllocationDefault;
    jobSpecifics: outputs.SourceBunnyIncResourceAllocationJobSpecific[];
}

export interface SourceBunnyIncResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceBunnyIncResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceBunnyIncResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceBunnyIncResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceBuzzsproutConfiguration {
    apiKey: string;
    /**
     * Podcast ID found in `https://www.buzzsprout.com/my/profile/api`
     */
    podcastId: string;
    startDate: string;
}

export interface SourceBuzzsproutResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceBuzzsproutResourceAllocationDefault;
    jobSpecifics: outputs.SourceBuzzsproutResourceAllocationJobSpecific[];
}

export interface SourceBuzzsproutResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceBuzzsproutResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceBuzzsproutResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceBuzzsproutResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceCalComConfiguration {
    /**
     * API key to use. Find it at https://cal.com/account
     */
    apiKey: string;
    orgId: string;
}

export interface SourceCalComResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceCalComResourceAllocationDefault;
    jobSpecifics: outputs.SourceCalComResourceAllocationJobSpecific[];
}

export interface SourceCalComResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceCalComResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceCalComResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceCalComResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceCalendlyConfiguration {
    /**
     * Go to Integrations → API & Webhooks to obtain your bearer token. https://calendly.com/integrations/api_webhooks
     */
    apiKey: string;
    startDate: string;
}

export interface SourceCalendlyResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceCalendlyResourceAllocationDefault;
    jobSpecifics: outputs.SourceCalendlyResourceAllocationJobSpecific[];
}

export interface SourceCalendlyResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceCalendlyResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceCalendlyResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceCalendlyResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceCallrailConfiguration {
    /**
     * Account ID
     */
    accountId: string;
    /**
     * API access key
     */
    apiKey: string;
    /**
     * Start getting data from that date.
     */
    startDate: string;
}

export interface SourceCallrailResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceCallrailResourceAllocationDefault;
    jobSpecifics: outputs.SourceCallrailResourceAllocationJobSpecific[];
}

export interface SourceCallrailResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceCallrailResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceCallrailResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceCallrailResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceCampaignMonitorConfiguration {
    password?: string;
    /**
     * Date from when the sync should start
     */
    startDate?: string;
    username: string;
}

export interface SourceCampaignMonitorResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceCampaignMonitorResourceAllocationDefault;
    jobSpecifics: outputs.SourceCampaignMonitorResourceAllocationJobSpecific[];
}

export interface SourceCampaignMonitorResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceCampaignMonitorResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceCampaignMonitorResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceCampaignMonitorResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceCampaynConfiguration {
    /**
     * API key to use. Find it in your Campayn account settings. Keep it secure as it grants access to your Campayn data.
     */
    apiKey: string;
    subDomain: string;
}

export interface SourceCampaynResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceCampaynResourceAllocationDefault;
    jobSpecifics: outputs.SourceCampaynResourceAllocationJobSpecific[];
}

export interface SourceCampaynResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceCampaynResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceCampaynResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceCampaynResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceCannyConfiguration {
    /**
     * You can find your secret API key in Your Canny Subdomain > Settings > API
     */
    apiKey: string;
}

export interface SourceCannyResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceCannyResourceAllocationDefault;
    jobSpecifics: outputs.SourceCannyResourceAllocationJobSpecific[];
}

export interface SourceCannyResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceCannyResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceCannyResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceCannyResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceCapsuleCrmConfiguration {
    /**
     * Bearer token to authenticate API requests. Generate it from the 'My Preferences' > 'API Authentication Tokens' page in your Capsule account.
     */
    bearerToken: string;
    /**
     * must be one of ["parties", "opportunities", "kases"]
     */
    entity: string;
    startDate: string;
}

export interface SourceCapsuleCrmResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceCapsuleCrmResourceAllocationDefault;
    jobSpecifics: outputs.SourceCapsuleCrmResourceAllocationJobSpecific[];
}

export interface SourceCapsuleCrmResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceCapsuleCrmResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceCapsuleCrmResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceCapsuleCrmResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceCaptainDataConfiguration {
    /**
     * Your Captain Data project API key.
     */
    apiKey: string;
    /**
     * Your Captain Data project uuid.
     */
    projectUid: string;
}

export interface SourceCaptainDataResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceCaptainDataResourceAllocationDefault;
    jobSpecifics: outputs.SourceCaptainDataResourceAllocationJobSpecific[];
}

export interface SourceCaptainDataResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceCaptainDataResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceCaptainDataResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceCaptainDataResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceCareQualityCommissionConfiguration {
    /**
     * Your CQC Primary Key. See https://www.cqc.org.uk/about-us/transparency/using-cqc-data#api for steps to generate one.
     */
    apiKey: string;
}

export interface SourceCareQualityCommissionResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceCareQualityCommissionResourceAllocationDefault;
    jobSpecifics: outputs.SourceCareQualityCommissionResourceAllocationJobSpecific[];
}

export interface SourceCareQualityCommissionResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceCareQualityCommissionResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceCareQualityCommissionResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceCareQualityCommissionResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceCartConfiguration {
    credentials?: outputs.SourceCartConfigurationCredentials;
    /**
     * The date from which you'd like to replicate the data
     */
    startDate: string;
}

export interface SourceCartConfigurationCredentials {
    centralApiRouter?: outputs.SourceCartConfigurationCredentialsCentralApiRouter;
    singleStoreAccessToken?: outputs.SourceCartConfigurationCredentialsSingleStoreAccessToken;
}

export interface SourceCartConfigurationCredentialsCentralApiRouter {
    /**
     * You can determine a site provisioning site Id by hitting https://site.com/store/sitemonitor.aspx and reading the response param PSID
     */
    siteId: string;
    /**
     * Enter your application's User Name
     */
    userName: string;
    /**
     * Enter your application's User Secret
     */
    userSecret: string;
}

export interface SourceCartConfigurationCredentialsSingleStoreAccessToken {
    /**
     * Access Token for making authenticated requests.
     */
    accessToken: string;
    /**
     * The name of Cart.com Online Store. All API URLs start with https://[mystorename.com]/api/v1/, where [mystorename.com] is the domain name of your store.
     */
    storeName: string;
}

export interface SourceCartResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceCartResourceAllocationDefault;
    jobSpecifics: outputs.SourceCartResourceAllocationJobSpecific[];
}

export interface SourceCartResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceCartResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceCartResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceCartResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceCastorEdcConfiguration {
    /**
     * Visit `https://YOUR_REGION.castoredc.com/account/settings`
     */
    clientId: string;
    /**
     * Visit `https://YOUR_REGION.castoredc.com/account/settings`
     */
    clientSecret: string;
    startDate: string;
    /**
     * The url region given at time of registration. Default: "uk"; must be one of ["uk", "nl", "us"]
     */
    urlRegion: string;
}

export interface SourceCastorEdcResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceCastorEdcResourceAllocationDefault;
    jobSpecifics: outputs.SourceCastorEdcResourceAllocationJobSpecific[];
}

export interface SourceCastorEdcResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceCastorEdcResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceCastorEdcResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceCastorEdcResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceChameleonConfiguration {
    apiKey: string;
    /**
     * End date for incremental sync
     */
    endDate?: string;
    /**
     * Filter for using in the `segments_experiences` stream. Default: "tour"; must be one of ["tour", "survey", "launcher"]
     */
    filter: string;
    /**
     * Max records per page limit. Default: "50"
     */
    limit: string;
    startDate: string;
}

export interface SourceChameleonResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceChameleonResourceAllocationDefault;
    jobSpecifics: outputs.SourceChameleonResourceAllocationJobSpecific[];
}

export interface SourceChameleonResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceChameleonResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceChameleonResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceChameleonResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceChargebeeConfiguration {
    /**
     * The number of worker threads to use for the sync. The performance upper boundary is based on the limit of your Chargebee plan. More info about the rate limit plan tiers can be found on Chargebee's API <a href="https://support.chargebee.com/support/solutions/articles/243576-what-are-the-chargebee-api-limits-">docs</a>. Default: 3
     */
    numWorkers: number;
    /**
     * Product Catalog version of your Chargebee site. Instructions on how to find your version you may find <a href="https://apidocs.chargebee.com/docs/api?prod_cat_ver=2">here</a> under `API Version` section. If left blank, the product catalog version will be set to 2.0. Default: "2.0"; must be one of ["1.0", "2.0"]
     */
    productCatalog: string;
    /**
     * The site prefix for your Chargebee instance.
     */
    site: string;
    /**
     * Chargebee API Key. See the <a href="https://docs.airbyte.com/integrations/sources/chargebee">docs</a> for more information on how to obtain this key.
     */
    siteApiKey: string;
    /**
     * UTC date and time in the format 2017-01-25T00:00:00.000Z. Any data before this date will not be replicated.
     */
    startDate: string;
}

export interface SourceChargebeeResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceChargebeeResourceAllocationDefault;
    jobSpecifics: outputs.SourceChargebeeResourceAllocationJobSpecific[];
}

export interface SourceChargebeeResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceChargebeeResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceChargebeeResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceChargebeeResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceChargedeskConfiguration {
    password?: string;
    /**
     * Date from when the sync should start in epoch Unix timestamp
     */
    startDate?: number;
    username: string;
}

export interface SourceChargedeskResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceChargedeskResourceAllocationDefault;
    jobSpecifics: outputs.SourceChargedeskResourceAllocationJobSpecific[];
}

export interface SourceChargedeskResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceChargedeskResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceChargedeskResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceChargedeskResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceChargifyConfiguration {
    /**
     * Maxio Advanced Billing/Chargify API Key.
     */
    apiKey: string;
    /**
     * Chargify domain. Normally this domain follows the following format
     */
    domain: string;
    password?: string;
    username: string;
}

export interface SourceChargifyResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceChargifyResourceAllocationDefault;
    jobSpecifics: outputs.SourceChargifyResourceAllocationJobSpecific[];
}

export interface SourceChargifyResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceChargifyResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceChargifyResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceChargifyResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceChartmogulConfiguration {
    /**
     * Your Chartmogul API key. See <a href="https://help.chartmogul.com/hc/en-us/articles/4407796325906-Creating-and-Managing-API-keys#creating-an-api-key"> the docs </a> for info on how to obtain this.
     */
    apiKey: string;
    /**
     * UTC date and time in the format 2017-01-25T00:00:00Z. When feasible, any data before this date will not be replicated.
     */
    startDate: string;
}

export interface SourceChartmogulResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceChartmogulResourceAllocationDefault;
    jobSpecifics: outputs.SourceChartmogulResourceAllocationJobSpecific[];
}

export interface SourceChartmogulResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceChartmogulResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceChartmogulResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceChartmogulResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceCimisConfiguration {
    apiKey: string;
    dailyDataItems?: string[];
    endDate: string;
    hourlyDataItems?: string[];
    startDate: string;
    targets: string[];
    /**
     * must be one of ["WSN station numbers", "California zip codes", "decimal-degree coordinates", "street addresses"]
     */
    targetsType: string;
    /**
     * must be one of ["E", "M"]
     */
    unitOfMeasure?: string;
}

export interface SourceCimisResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceCimisResourceAllocationDefault;
    jobSpecifics: outputs.SourceCimisResourceAllocationJobSpecific[];
}

export interface SourceCimisResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceCimisResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceCimisResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceCimisResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceCin7Configuration {
    /**
     * The ID associated with your account.
     */
    accountid: string;
    /**
     * The API key associated with your account.
     */
    apiKey: string;
    /**
     * 1970-01-01T00:00:00Z
     */
    startDate: string;
}

export interface SourceCin7ResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceCin7ResourceAllocationDefault;
    jobSpecifics: outputs.SourceCin7ResourceAllocationJobSpecific[];
}

export interface SourceCin7ResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceCin7ResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceCin7ResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceCin7ResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceCircaConfiguration {
    /**
     * API key to use. Find it at https://app.circa.co/settings/integrations/api
     */
    apiKey: string;
    startDate: string;
}

export interface SourceCircaResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceCircaResourceAllocationDefault;
    jobSpecifics: outputs.SourceCircaResourceAllocationJobSpecific[];
}

export interface SourceCircaResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceCircaResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceCircaResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceCircaResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceCircleciConfiguration {
    apiKey: string;
    /**
     * Job Number of the workflow for `jobs` stream, Auto fetches from `workflow_jobs` stream, if not configured. Default: "2"
     */
    jobNumber: string;
    /**
     * The org ID found in `https://app.circleci.com/settings/organization/circleci/xxxxx/overview`
     */
    orgId: string;
    /**
     * Project ID found in the project settings, Visit `https://app.circleci.com/settings/project/circleci/ORG_SLUG/YYYYY`
     */
    projectId: string;
    startDate: string;
    /**
     * Workflow ID of a project pipeline, Could be seen in the URL of pipeline build, Example `https://app.circleci.com/pipelines/circleci/55555xxxxxx/7yyyyyyyyxxxxx/2/workflows/WORKFLOW_ID`
     */
    workflowIds?: string[];
}

export interface SourceCircleciResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceCircleciResourceAllocationDefault;
    jobSpecifics: outputs.SourceCircleciResourceAllocationJobSpecific[];
}

export interface SourceCircleciResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceCircleciResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceCircleciResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceCircleciResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceCiscoMerakiConfiguration {
    /**
     * Your Meraki API key. Obtain it by logging into your Meraki Dashboard at https://dashboard.meraki.com/, navigating to 'My Profile' via the avatar icon in the top right corner, and generating the API key. Save this key securely as it represents your admin credentials.
     */
    apiKey: string;
    startDate: string;
}

export interface SourceCiscoMerakiResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceCiscoMerakiResourceAllocationDefault;
    jobSpecifics: outputs.SourceCiscoMerakiResourceAllocationJobSpecific[];
}

export interface SourceCiscoMerakiResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceCiscoMerakiResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceCiscoMerakiResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceCiscoMerakiResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceClarifAiConfiguration {
    apiKey: string;
    startDate: string;
    /**
     * User ID found in settings
     */
    userId: string;
}

export interface SourceClarifAiResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceClarifAiResourceAllocationDefault;
    jobSpecifics: outputs.SourceClarifAiResourceAllocationJobSpecific[];
}

export interface SourceClarifAiResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceClarifAiResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceClarifAiResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceClarifAiResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceClazarConfiguration {
    clientId: string;
    clientSecret: string;
}

export interface SourceClazarResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceClazarResourceAllocationDefault;
    jobSpecifics: outputs.SourceClazarResourceAllocationJobSpecific[];
}

export interface SourceClazarResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceClazarResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceClazarResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceClazarResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceClickhouseConfiguration {
    /**
     * The name of the database.
     */
    database: string;
    /**
     * The host endpoint of the Clickhouse cluster.
     */
    host: string;
    /**
     * Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '&'. (Eg. key1=value1&key2=value2&key3=value3). For more information read about <a href="https://jdbc.postgresql.org/documentation/head/connect.html">JDBC URL parameters</a>.
     */
    jdbcUrlParams?: string;
    /**
     * The password associated with this username.
     */
    password?: string;
    /**
     * The port of the database. Default: 8123
     */
    port: number;
    /**
     * Encrypt data using SSL. Default: true
     */
    ssl: boolean;
    /**
     * Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
     */
    tunnelMethod?: outputs.SourceClickhouseConfigurationTunnelMethod;
    /**
     * The username which is used to access the database.
     */
    username: string;
}

export interface SourceClickhouseConfigurationTunnelMethod {
    noTunnel?: outputs.SourceClickhouseConfigurationTunnelMethodNoTunnel;
    passwordAuthentication?: outputs.SourceClickhouseConfigurationTunnelMethodPasswordAuthentication;
    sshKeyAuthentication?: outputs.SourceClickhouseConfigurationTunnelMethodSshKeyAuthentication;
}

export interface SourceClickhouseConfigurationTunnelMethodNoTunnel {
}

export interface SourceClickhouseConfigurationTunnelMethodPasswordAuthentication {
    /**
     * Hostname of the jump server host that allows inbound ssh tunnel.
     */
    tunnelHost: string;
    /**
     * Port on the proxy/jump server that accepts inbound ssh connections. Default: 22
     */
    tunnelPort: number;
    /**
     * OS-level username for logging into the jump server host
     */
    tunnelUser: string;
    /**
     * OS-level password for logging into the jump server host
     */
    tunnelUserPassword: string;
}

export interface SourceClickhouseConfigurationTunnelMethodSshKeyAuthentication {
    /**
     * OS-level user account ssh key credentials in RSA PEM format ( created with ssh-keygen -t rsa -m PEM -f myuser_rsa )
     */
    sshKey: string;
    /**
     * Hostname of the jump server host that allows inbound ssh tunnel.
     */
    tunnelHost: string;
    /**
     * Port on the proxy/jump server that accepts inbound ssh connections. Default: 22
     */
    tunnelPort: number;
    /**
     * OS-level username for logging into the jump server host.
     */
    tunnelUser: string;
}

export interface SourceClickhouseResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceClickhouseResourceAllocationDefault;
    jobSpecifics: outputs.SourceClickhouseResourceAllocationJobSpecific[];
}

export interface SourceClickhouseResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceClickhouseResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceClickhouseResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceClickhouseResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceClickupApiConfiguration {
    /**
     * Every ClickUp API call required authentication. This field is your personal API token. See <a href="https://clickup.com/api/developer-portal/authentication/#personal-token">here</a>.
     */
    apiToken: string;
    /**
     * Include or exclude closed tasks. By default, they are excluded. See <a https://clickup.com/api/clickupreference/operation/GetTasks/#!in=query&path=include_closed&t=request">here</a>. Default: false
     */
    includeClosedTasks: boolean;
}

export interface SourceClickupApiResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceClickupApiResourceAllocationDefault;
    jobSpecifics: outputs.SourceClickupApiResourceAllocationJobSpecific[];
}

export interface SourceClickupApiResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceClickupApiResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceClickupApiResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceClickupApiResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceClockifyConfiguration {
    /**
     * You can get your api access_key <a href="https://app.clockify.me/user/settings">here</a> This API is Case Sensitive.
     */
    apiKey: string;
    /**
     * The URL for the Clockify API. This should only need to be modified if connecting to an enterprise version of Clockify. Default: "https://api.clockify.me"
     */
    apiUrl: string;
    /**
     * WorkSpace Id
     */
    workspaceId: string;
}

export interface SourceClockifyResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceClockifyResourceAllocationDefault;
    jobSpecifics: outputs.SourceClockifyResourceAllocationJobSpecific[];
}

export interface SourceClockifyResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceClockifyResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceClockifyResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceClockifyResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceClockodoConfiguration {
    /**
     * API key to use. Find it in the 'Personal data' section of your Clockodo account.
     */
    apiKey: string;
    /**
     * Your Clockodo account email address. Find it in your Clockodo account settings.
     */
    emailAddress: string;
    /**
     * Identification of the calling application, including the email address of a technical contact person. Format: [name of application or company];[email address]. Default: "Airbyte"
     */
    externalApplication: string;
    startDate: string;
    /**
     * 2024, 2025
     */
    years: string[];
}

export interface SourceClockodoResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceClockodoResourceAllocationDefault;
    jobSpecifics: outputs.SourceClockodoResourceAllocationJobSpecific[];
}

export interface SourceClockodoResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceClockodoResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceClockodoResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceClockodoResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceCloseComConfiguration {
    /**
     * Close.com API key (usually starts with 'api_'; find yours <a href="https://app.close.com/settings/api/">here</a>).
     */
    apiKey: string;
    /**
     * The start date to sync data; all data after this date will be replicated. Leave blank to retrieve all the data available in the account. Format: YYYY-MM-DD. Default: "2021-01-01"
     */
    startDate: string;
}

export interface SourceCloseComResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceCloseComResourceAllocationDefault;
    jobSpecifics: outputs.SourceCloseComResourceAllocationJobSpecific[];
}

export interface SourceCloseComResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceCloseComResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceCloseComResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceCloseComResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceCloudbedsConfiguration {
    apiKey: string;
}

export interface SourceCloudbedsResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceCloudbedsResourceAllocationDefault;
    jobSpecifics: outputs.SourceCloudbedsResourceAllocationJobSpecific[];
}

export interface SourceCloudbedsResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceCloudbedsResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceCloudbedsResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceCloudbedsResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceCoassembleConfiguration {
    userId: string;
    userToken: string;
}

export interface SourceCoassembleResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceCoassembleResourceAllocationDefault;
    jobSpecifics: outputs.SourceCoassembleResourceAllocationJobSpecific[];
}

export interface SourceCoassembleResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceCoassembleResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceCoassembleResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceCoassembleResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceCodaConfiguration {
    /**
     * Bearer token
     */
    authToken: string;
}

export interface SourceCodaResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceCodaResourceAllocationDefault;
    jobSpecifics: outputs.SourceCodaResourceAllocationJobSpecific[];
}

export interface SourceCodaResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceCodaResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceCodaResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceCodaResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceCodefreshConfiguration {
    accountId: string;
    apiKey: string;
    reportDateRanges?: string[];
    reportGranularity?: string;
    startDate: string;
}

export interface SourceCodefreshResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceCodefreshResourceAllocationDefault;
    jobSpecifics: outputs.SourceCodefreshResourceAllocationJobSpecific[];
}

export interface SourceCodefreshResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceCodefreshResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceCodefreshResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceCodefreshResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceCoinApiConfiguration {
    /**
     * API Key
     */
    apiKey: string;
    /**
     * The end date in ISO 8601 format. If not supplied, data will be returned
     * from the start date to the current time, or when the count of result
     * elements reaches its limit.
     */
    endDate?: string;
    /**
     * The environment to use. Either sandbox or production. Default: "sandbox"; must be one of ["sandbox", "production"]
     */
    environment: string;
    /**
     * The maximum number of elements to return. If not supplied, the default
     * is 100. For numbers larger than 100, each 100 items is counted as one
     * request for pricing purposes. Maximum value is 100000.
     * Default: 100
     */
    limit: number;
    /**
     * The period to use. See the documentation for a list. https://docs.coinapi.io/#list-all-periods-get
     */
    period: string;
    /**
     * The start date in ISO 8601 format.
     */
    startDate: string;
    /**
     * The symbol ID to use. See the documentation for a list.
     * https://docs.coinapi.io/#list-all-symbols-get
     */
    symbolId: string;
}

export interface SourceCoinApiResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceCoinApiResourceAllocationDefault;
    jobSpecifics: outputs.SourceCoinApiResourceAllocationJobSpecific[];
}

export interface SourceCoinApiResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceCoinApiResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceCoinApiResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceCoinApiResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceCoingeckoCoinsConfiguration {
    /**
     * API Key (for pro users)
     */
    apiKey?: string;
    /**
     * CoinGecko coin ID (e.g. bitcoin). Can be retrieved from the
     * `/coins/list` endpoint.
     */
    coinId: string;
    /**
     * The number of days of data for market chart. Default: "30"; must be one of ["1", "7", "14", "30", "90", "180", "365", "max"]
     */
    days: string;
    /**
     * The end date for the historical data stream in dd-mm-yyyy format.
     */
    endDate?: string;
    /**
     * The start date for the historical data stream in dd-mm-yyyy format.
     */
    startDate: string;
    /**
     * The target currency of market data (e.g. usd, eur, jpy, etc.)
     */
    vsCurrency: string;
}

export interface SourceCoingeckoCoinsResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceCoingeckoCoinsResourceAllocationDefault;
    jobSpecifics: outputs.SourceCoingeckoCoinsResourceAllocationJobSpecific[];
}

export interface SourceCoingeckoCoinsResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceCoingeckoCoinsResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceCoingeckoCoinsResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceCoingeckoCoinsResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceCoinmarketcapConfiguration {
    /**
     * Your API Key. See <a href="https://coinmarketcap.com/api/documentation/v1/#section/Authentication">here</a>. The token is case sensitive.
     */
    apiKey: string;
    /**
     * /latest: Latest market ticker quotes and averages for cryptocurrencies and exchanges. /historical: Intervals of historic market data like OHLCV data or data for use in charting libraries. See <a href="https://coinmarketcap.com/api/documentation/v1/#section/Endpoint-Overview">here</a>. must be one of ["latest", "historical"]
     */
    dataType: string;
    /**
     * Cryptocurrency symbols. (only used for quotes stream)
     */
    symbols?: string[];
}

export interface SourceCoinmarketcapResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceCoinmarketcapResourceAllocationDefault;
    jobSpecifics: outputs.SourceCoinmarketcapResourceAllocationJobSpecific[];
}

export interface SourceCoinmarketcapResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceCoinmarketcapResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceCoinmarketcapResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceCoinmarketcapResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceConcordConfiguration {
    apiKey: string;
    /**
     * The environment from where you want to access the API. must be one of ["uat", "api"]
     */
    env: string;
}

export interface SourceConcordResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceConcordResourceAllocationDefault;
    jobSpecifics: outputs.SourceConcordResourceAllocationJobSpecific[];
}

export interface SourceConcordResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceConcordResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceConcordResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceConcordResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceConfigcatConfiguration {
    /**
     * Basic auth password. See <a href="https://api.configcat.com/docs/#section/Authentication">here</a>.
     */
    password: string;
    /**
     * Basic auth user name. See <a href="https://api.configcat.com/docs/#section/Authentication">here</a>.
     */
    username: string;
}

export interface SourceConfigcatResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceConfigcatResourceAllocationDefault;
    jobSpecifics: outputs.SourceConfigcatResourceAllocationJobSpecific[];
}

export interface SourceConfigcatResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceConfigcatResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceConfigcatResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceConfigcatResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceConfluenceConfiguration {
    /**
     * Please follow the Jira confluence for generating an API token: <a href="https://support.atlassian.com/atlassian-account/docs/manage-api-tokens-for-your-atlassian-account/">generating an API token</a>.
     */
    apiToken: string;
    /**
     * Your Confluence domain name
     */
    domainName: string;
    /**
     * Your Confluence login email
     */
    email: string;
}

export interface SourceConfluenceResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceConfluenceResourceAllocationDefault;
    jobSpecifics: outputs.SourceConfluenceResourceAllocationJobSpecific[];
}

export interface SourceConfluenceResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceConfluenceResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceConfluenceResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceConfluenceResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceConvertkitConfiguration {
    /**
     * API Secret
     */
    apiSecret: string;
}

export interface SourceConvertkitResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceConvertkitResourceAllocationDefault;
    jobSpecifics: outputs.SourceConvertkitResourceAllocationJobSpecific[];
}

export interface SourceConvertkitResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceConvertkitResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceConvertkitResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceConvertkitResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceConvexConfiguration {
    /**
     * API access key used to retrieve data from Convex.
     */
    accessKey: string;
    deploymentUrl: string;
}

export interface SourceConvexResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceConvexResourceAllocationDefault;
    jobSpecifics: outputs.SourceConvexResourceAllocationJobSpecific[];
}

export interface SourceConvexResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceConvexResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceConvexResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceConvexResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceCopperConfiguration {
    /**
     * Copper API key
     */
    apiKey: string;
    /**
     * user email used to login in to Copper
     */
    userEmail: string;
}

export interface SourceCopperResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceCopperResourceAllocationDefault;
    jobSpecifics: outputs.SourceCopperResourceAllocationJobSpecific[];
}

export interface SourceCopperResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceCopperResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceCopperResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceCopperResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceCouchbaseConfiguration {
    /**
     * The name of the bucket to sync data from
     */
    bucket: string;
    /**
     * The connection string for the Couchbase server (e.g., couchbase://localhost or couchbases://example.com)
     */
    connectionString: string;
    /**
     * The password to use for authentication
     */
    password: string;
    /**
     * The date from which you'd like to replicate data for incremental streams, in the format YYYY-MM-DDT00:00:00Z. All data generated after this date will be replicated. If not set, all data will be replicated.
     */
    startDate?: string;
    /**
     * The username to use for authentication
     */
    username: string;
}

export interface SourceCouchbaseResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceCouchbaseResourceAllocationDefault;
    jobSpecifics: outputs.SourceCouchbaseResourceAllocationJobSpecific[];
}

export interface SourceCouchbaseResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceCouchbaseResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceCouchbaseResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceCouchbaseResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceCountercyclicalConfiguration {
    apiKey: string;
}

export interface SourceCountercyclicalResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceCountercyclicalResourceAllocationDefault;
    jobSpecifics: outputs.SourceCountercyclicalResourceAllocationJobSpecific[];
}

export interface SourceCountercyclicalResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceCountercyclicalResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceCountercyclicalResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceCountercyclicalResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceCustomResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceCustomResourceAllocationDefault;
    jobSpecifics: outputs.SourceCustomResourceAllocationJobSpecific[];
}

export interface SourceCustomResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceCustomResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceCustomResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceCustomResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceCustomerIoConfiguration {
    appApiKey: string;
}

export interface SourceCustomerIoResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceCustomerIoResourceAllocationDefault;
    jobSpecifics: outputs.SourceCustomerIoResourceAllocationJobSpecific[];
}

export interface SourceCustomerIoResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceCustomerIoResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceCustomerIoResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceCustomerIoResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceCustomerlyConfiguration {
    apiKey: string;
}

export interface SourceCustomerlyResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceCustomerlyResourceAllocationDefault;
    jobSpecifics: outputs.SourceCustomerlyResourceAllocationJobSpecific[];
}

export interface SourceCustomerlyResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceCustomerlyResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceCustomerlyResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceCustomerlyResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceDatadogConfiguration {
    /**
     * Datadog API key
     */
    apiKey: string;
    /**
     * Datadog application key
     */
    applicationKey: string;
    /**
     * UTC date and time in the format 2017-01-25T00:00:00Z. Data after this date will  not be replicated. An empty value will represent the current datetime for each  execution. This just applies to Incremental syncs.
     */
    endDate?: string;
    /**
     * Maximum number of records to collect per request. Default: 5000
     */
    maxRecordsPerRequest: number;
    /**
     * List of queries to be run and used as inputs.
     */
    queries?: outputs.SourceDatadogConfigurationQuery[];
    /**
     * The search query. This just applies to Incremental syncs. If empty, it'll collect all logs.
     */
    query?: string;
    /**
     * The site where Datadog data resides in. Default: "datadoghq.com"; must be one of ["datadoghq.com", "us3.datadoghq.com", "us5.datadoghq.com", "datadoghq.eu", "ddog-gov.com"]
     */
    site: string;
    /**
     * UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated. This just applies to Incremental syncs. Default: "2023-12-01T00:00:00Z"
     */
    startDate: string;
}

export interface SourceDatadogConfigurationQuery {
    /**
     * A data source that is powered by the platform. must be one of ["metrics", "cloud_cost", "logs", "rum"]
     */
    dataSource: string;
    /**
     * The variable name for use in queries.
     */
    name: string;
    /**
     * A classic query string.
     */
    query: string;
}

export interface SourceDatadogResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceDatadogResourceAllocationDefault;
    jobSpecifics: outputs.SourceDatadogResourceAllocationJobSpecific[];
}

export interface SourceDatadogResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceDatadogResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceDatadogResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceDatadogResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceDatascopeConfiguration {
    /**
     * API Key
     */
    apiKey: string;
    /**
     * Start date for the data to be replicated
     */
    startDate: string;
}

export interface SourceDatascopeResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceDatascopeResourceAllocationDefault;
    jobSpecifics: outputs.SourceDatascopeResourceAllocationJobSpecific[];
}

export interface SourceDatascopeResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceDatascopeResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceDatascopeResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceDatascopeResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceDbtConfiguration {
    accountId: string;
    apiKey2: string;
}

export interface SourceDbtResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceDbtResourceAllocationDefault;
    jobSpecifics: outputs.SourceDbtResourceAllocationJobSpecific[];
}

export interface SourceDbtResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceDbtResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceDbtResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceDbtResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceDelightedConfiguration {
    /**
     * A Delighted API key.
     */
    apiKey: string;
    /**
     * The date from which you'd like to replicate the data
     */
    since: string;
}

export interface SourceDelightedResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceDelightedResourceAllocationDefault;
    jobSpecifics: outputs.SourceDelightedResourceAllocationJobSpecific[];
}

export interface SourceDelightedResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceDelightedResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceDelightedResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceDelightedResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceDeputyConfiguration {
    apiKey: string;
    /**
     * The base url for your deputy account to make API requests
     */
    baseUrl: string;
}

export interface SourceDeputyResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceDeputyResourceAllocationDefault;
    jobSpecifics: outputs.SourceDeputyResourceAllocationJobSpecific[];
}

export interface SourceDeputyResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceDeputyResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceDeputyResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceDeputyResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceDingConnectConfiguration {
    /**
     * Your API key for authenticating with the DingConnect API. You can generate this key by navigating to the Developer tab in the Account Settings section of your DingConnect account.
     */
    apiKey: string;
    startDate: string;
    /**
     * Optional header to correlate HTTP requests between a client and server.
     */
    xCorrelationId?: string;
}

export interface SourceDingConnectResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceDingConnectResourceAllocationDefault;
    jobSpecifics: outputs.SourceDingConnectResourceAllocationJobSpecific[];
}

export interface SourceDingConnectResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceDingConnectResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceDingConnectResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceDingConnectResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceDixaConfiguration {
    /**
     * Dixa API token
     */
    apiToken: string;
    /**
     * Number of days to batch into one request. Max 31. Default: 31
     */
    batchSize: number;
    /**
     * The connector pulls records updated from this date onwards.
     */
    startDate: string;
}

export interface SourceDixaResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceDixaResourceAllocationDefault;
    jobSpecifics: outputs.SourceDixaResourceAllocationJobSpecific[];
}

export interface SourceDixaResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceDixaResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceDixaResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceDixaResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceDockerhubConfiguration {
    /**
     * Username of DockerHub person or organization (for https://hub.docker.com/v2/repositories/USERNAME/ API call)
     */
    dockerUsername: string;
}

export interface SourceDockerhubResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceDockerhubResourceAllocationDefault;
    jobSpecifics: outputs.SourceDockerhubResourceAllocationJobSpecific[];
}

export interface SourceDockerhubResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceDockerhubResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceDockerhubResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceDockerhubResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceDocusealConfiguration {
    /**
     * Your API key for authenticating with the DocuSeal API. Obtain it from the DocuSeal API Console at https://console.docuseal.com/api.
     */
    apiKey: string;
    /**
     * The pagination limit. Default: "5"
     */
    limit: string;
    startDate: string;
}

export interface SourceDocusealResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceDocusealResourceAllocationDefault;
    jobSpecifics: outputs.SourceDocusealResourceAllocationJobSpecific[];
}

export interface SourceDocusealResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceDocusealResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceDocusealResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceDocusealResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceDremioConfiguration {
    /**
     * API Key that is generated when you authenticate to Dremio API
     */
    apiKey: string;
    /**
     * URL of your Dremio instance. Default: "https://app.dremio.cloud"
     */
    baseUrl: string;
}

export interface SourceDremioResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceDremioResourceAllocationDefault;
    jobSpecifics: outputs.SourceDremioResourceAllocationJobSpecific[];
}

export interface SourceDremioResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceDremioResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceDremioResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceDremioResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceDriftConfiguration {
    credentials?: outputs.SourceDriftConfigurationCredentials;
    /**
     * Email used as parameter for contacts stream. Default: "test@test.com"
     */
    email: string;
}

export interface SourceDriftConfigurationCredentials {
    accessToken?: outputs.SourceDriftConfigurationCredentialsAccessToken;
    oAuth20?: outputs.SourceDriftConfigurationCredentialsOAuth20;
}

export interface SourceDriftConfigurationCredentialsAccessToken {
    /**
     * Drift Access Token. See the <a href="https://docs.airbyte.com/integrations/sources/drift">docs</a> for more information on how to generate this key.
     */
    accessToken: string;
}

export interface SourceDriftConfigurationCredentialsOAuth20 {
    /**
     * Access Token for making authenticated requests.
     */
    accessToken: string;
    /**
     * The Client ID of your Drift developer application.
     */
    clientId: string;
    /**
     * The Client Secret of your Drift developer application.
     */
    clientSecret: string;
    /**
     * Refresh Token to renew the expired Access Token.
     */
    refreshToken: string;
}

export interface SourceDriftResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceDriftResourceAllocationDefault;
    jobSpecifics: outputs.SourceDriftResourceAllocationJobSpecific[];
}

export interface SourceDriftResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceDriftResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceDriftResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceDriftResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceDripConfiguration {
    /**
     * API key to use. Find it at https://www.getdrip.com/user/edit
     */
    apiKey: string;
}

export interface SourceDripResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceDripResourceAllocationDefault;
    jobSpecifics: outputs.SourceDripResourceAllocationJobSpecific[];
}

export interface SourceDripResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceDripResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceDripResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceDripResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceDropboxSignConfiguration {
    /**
     * API key to use. Find it at https://app.hellosign.com/home/myAccount#api
     */
    apiKey: string;
    startDate: string;
}

export interface SourceDropboxSignResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceDropboxSignResourceAllocationDefault;
    jobSpecifics: outputs.SourceDropboxSignResourceAllocationJobSpecific[];
}

export interface SourceDropboxSignResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceDropboxSignResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceDropboxSignResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceDropboxSignResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceDwollaConfiguration {
    clientId: string;
    clientSecret: string;
    /**
     * The environment for the Dwolla API, either 'api-sandbox' or 'api'. Default: "api"; must be one of ["api", "api-sandbox"]
     */
    environment: string;
    startDate: string;
}

export interface SourceDwollaResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceDwollaResourceAllocationDefault;
    jobSpecifics: outputs.SourceDwollaResourceAllocationJobSpecific[];
}

export interface SourceDwollaResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceDwollaResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceDwollaResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceDwollaResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceDynamodbConfiguration {
    /**
     * Credentials for the service
     */
    credentials?: outputs.SourceDynamodbConfigurationCredentials;
    /**
     * the URL of the Dynamodb database. Default: ""
     */
    endpoint: string;
    /**
     * Ignore tables with missing scan/read permissions. Default: false
     */
    ignoreMissingReadPermissionsTables: boolean;
    /**
     * The region of the Dynamodb database. Default: ""; must be one of ["", "af-south-1", "ap-east-1", "ap-northeast-1", "ap-northeast-2", "ap-northeast-3", "ap-south-1", "ap-south-2", "ap-southeast-1", "ap-southeast-2", "ap-southeast-3", "ap-southeast-4", "ca-central-1", "ca-west-1", "cn-north-1", "cn-northwest-1", "eu-central-1", "eu-central-2", "eu-north-1", "eu-south-1", "eu-south-2", "eu-west-1", "eu-west-2", "eu-west-3", "il-central-1", "me-central-1", "me-south-1", "sa-east-1", "us-east-1", "us-east-2", "us-gov-east-1", "us-gov-west-1", "us-west-1", "us-west-2"]
     */
    region: string;
    /**
     * Comma separated reserved attribute names present in your tables
     */
    reservedAttributeNames?: string;
}

export interface SourceDynamodbConfigurationCredentials {
    authenticateViaAccessKeys?: outputs.SourceDynamodbConfigurationCredentialsAuthenticateViaAccessKeys;
    roleBasedAuthentication?: outputs.SourceDynamodbConfigurationCredentialsRoleBasedAuthentication;
}

export interface SourceDynamodbConfigurationCredentialsAuthenticateViaAccessKeys {
    /**
     * The access key id to access Dynamodb. Airbyte requires read permissions to the database
     */
    accessKeyId: string;
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * The corresponding secret to the access key id.
     */
    secretAccessKey: string;
}

export interface SourceDynamodbConfigurationCredentialsRoleBasedAuthentication {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
}

export interface SourceDynamodbResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceDynamodbResourceAllocationDefault;
    jobSpecifics: outputs.SourceDynamodbResourceAllocationJobSpecific[];
}

export interface SourceDynamodbResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceDynamodbResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceDynamodbResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceDynamodbResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceEConomicConfiguration {
    /**
     * Token that identifies the grant issued by an agreement, allowing your app to access data. Obtain it from your e-conomic account settings.
     */
    agreementGrantToken: string;
    /**
     * Your private token that identifies your app. Find it in your e-conomic account settings.
     */
    appSecretToken: string;
}

export interface SourceEConomicResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceEConomicResourceAllocationDefault;
    jobSpecifics: outputs.SourceEConomicResourceAllocationJobSpecific[];
}

export interface SourceEConomicResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceEConomicResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceEConomicResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceEConomicResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceEasypostConfiguration {
    startDate: string;
    /**
     * The API Key from your easypost settings
     */
    username: string;
}

export interface SourceEasypostResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceEasypostResourceAllocationDefault;
    jobSpecifics: outputs.SourceEasypostResourceAllocationJobSpecific[];
}

export interface SourceEasypostResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceEasypostResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceEasypostResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceEasypostResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceEasypromosConfiguration {
    bearerToken: string;
}

export interface SourceEasypromosResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceEasypromosResourceAllocationDefault;
    jobSpecifics: outputs.SourceEasypromosResourceAllocationJobSpecific[];
}

export interface SourceEasypromosResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceEasypromosResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceEasypromosResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceEasypromosResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceEbayFinanceConfiguration {
    /**
     * https://apiz.sandbox.ebay.com for sandbox & https://apiz.ebay.com for production. Default: "https://apiz.ebay.com"; must be one of ["https://apiz.sandbox.ebay.com", "https://apiz.ebay.com"]
     */
    apiHost: string;
    /**
     * Ebay Client Secret
     */
    password?: string;
    redirectUri: string;
    refreshToken: string;
    startDate: string;
    /**
     * Default: "https://api.ebay.com/identity/v1/oauth2/token"; must be one of ["https://api.sandbox.ebay.com/identity/v1/oauth2/token", "https://api.ebay.com/identity/v1/oauth2/token"]
     */
    tokenRefreshEndpoint: string;
    /**
     * Ebay Developer Client ID
     */
    username: string;
}

export interface SourceEbayFinanceResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceEbayFinanceResourceAllocationDefault;
    jobSpecifics: outputs.SourceEbayFinanceResourceAllocationJobSpecific[];
}

export interface SourceEbayFinanceResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceEbayFinanceResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceEbayFinanceResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceEbayFinanceResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceElasticemailConfiguration {
    apiKey: string;
    from?: string;
    /**
     * must be one of ["Personal", "Global"]
     */
    scopeType?: string;
    startDate: string;
}

export interface SourceElasticemailResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceElasticemailResourceAllocationDefault;
    jobSpecifics: outputs.SourceElasticemailResourceAllocationJobSpecific[];
}

export interface SourceElasticemailResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceElasticemailResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceElasticemailResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceElasticemailResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceEmailoctopusConfiguration {
    /**
     * EmailOctopus API Key. See the <a href="https://help.emailoctopus.com/article/165-how-to-create-and-delete-api-keys">docs</a> for information on how to generate this key.
     */
    apiKey: string;
}

export interface SourceEmailoctopusResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceEmailoctopusResourceAllocationDefault;
    jobSpecifics: outputs.SourceEmailoctopusResourceAllocationJobSpecific[];
}

export interface SourceEmailoctopusResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceEmailoctopusResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceEmailoctopusResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceEmailoctopusResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceEmploymentHeroConfiguration {
    apiKey: string;
    /**
     * Employees IDs in the given organisation found in `employees` stream for passing to sub-streams
     */
    employeesConfigids?: string[];
    /**
     * Organization ID which could be found as result of `organizations` stream to be used in other substreams
     */
    organizationConfigids?: string[];
}

export interface SourceEmploymentHeroResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceEmploymentHeroResourceAllocationDefault;
    jobSpecifics: outputs.SourceEmploymentHeroResourceAllocationJobSpecific[];
}

export interface SourceEmploymentHeroResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceEmploymentHeroResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceEmploymentHeroResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceEmploymentHeroResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceEnchargeConfiguration {
    /**
     * The API key to use for authentication
     */
    apiKey: string;
}

export interface SourceEnchargeResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceEnchargeResourceAllocationDefault;
    jobSpecifics: outputs.SourceEnchargeResourceAllocationJobSpecific[];
}

export interface SourceEnchargeResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceEnchargeResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceEnchargeResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceEnchargeResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceEventbriteConfiguration {
    /**
     * The private token to use for authenticating API requests.
     */
    privateToken: string;
    startDate: string;
}

export interface SourceEventbriteResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceEventbriteResourceAllocationDefault;
    jobSpecifics: outputs.SourceEventbriteResourceAllocationJobSpecific[];
}

export interface SourceEventbriteResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceEventbriteResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceEventbriteResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceEventbriteResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceEventeeConfiguration {
    /**
     * API token to use. Generate it at https://admin.eventee.co/ in 'Settings > Features'.
     */
    apiToken: string;
}

export interface SourceEventeeResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceEventeeResourceAllocationDefault;
    jobSpecifics: outputs.SourceEventeeResourceAllocationJobSpecific[];
}

export interface SourceEventeeResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceEventeeResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceEventeeResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceEventeeResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceEventzillaConfiguration {
    /**
     * API key to use. Generate it by creating a new application within your Eventzilla account settings under Settings > App Management.
     */
    xApiKey: string;
}

export interface SourceEventzillaResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceEventzillaResourceAllocationDefault;
    jobSpecifics: outputs.SourceEventzillaResourceAllocationJobSpecific[];
}

export interface SourceEventzillaResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceEventzillaResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceEventzillaResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceEventzillaResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceEverhourConfiguration {
    /**
     * Everhour API Key. See the <a href="https://everhour.docs.apiary.io/#introduction/authentication">docs</a> for information on how to generate this key.
     */
    apiKey: string;
}

export interface SourceEverhourResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceEverhourResourceAllocationDefault;
    jobSpecifics: outputs.SourceEverhourResourceAllocationJobSpecific[];
}

export interface SourceEverhourResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceEverhourResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceEverhourResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceEverhourResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceExchangeRatesConfiguration {
    /**
     * Your API Key. See <a href="https://apilayer.com/marketplace/exchangerates_data-api">here</a>. The key is case sensitive.
     */
    accessKey: string;
    /**
     * ISO reference currency. See <a href="https://www.ecb.europa.eu/stats/policy_and_exchange_rates/euro_reference_exchange_rates/html/index.en.html">here</a>. Free plan doesn't support Source Currency Switching, default base currency is EUR
     */
    base?: string;
    /**
     * Ignore weekends? (Exchanges don't run on weekends). Default: true
     */
    ignoreWeekends: boolean;
    /**
     * Start getting data from that date.
     */
    startDate: string;
}

export interface SourceExchangeRatesResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceExchangeRatesResourceAllocationDefault;
    jobSpecifics: outputs.SourceExchangeRatesResourceAllocationJobSpecific[];
}

export interface SourceExchangeRatesResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceExchangeRatesResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceExchangeRatesResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceExchangeRatesResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceEzofficeinventoryConfiguration {
    /**
     * Your EZOfficeInventory Access Token. API Access is disabled by default. Enable API Access in Settings > Integrations > API Integration and click on Update to generate a new access token
     */
    apiKey: string;
    /**
     * Earliest date you want to sync historical streams (inventory_histories, asset_histories, asset_stock_histories) from
     */
    startDate: string;
    /**
     * The company name used in signup, also visible in the URL when logged in.
     */
    subdomain: string;
}

export interface SourceEzofficeinventoryResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceEzofficeinventoryResourceAllocationDefault;
    jobSpecifics: outputs.SourceEzofficeinventoryResourceAllocationJobSpecific[];
}

export interface SourceEzofficeinventoryResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceEzofficeinventoryResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceEzofficeinventoryResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceEzofficeinventoryResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceFacebookMarketingConfiguration {
    /**
     * The value of the generated access token. From your App’s Dashboard, click on "Marketing API" then "Tools". Select permissions <b>ads_management, ads_read, read_insights, business_management</b>. Then click on "Get token". See the <a href="https://docs.airbyte.com/integrations/sources/facebook-marketing">docs</a> for more information.
     */
    accessToken?: string;
    /**
     * The Facebook Ad account ID(s) to pull data from. The Ad account ID number is in the account dropdown menu or in your browser's address bar of your <a href="https://adsmanager.facebook.com/adsmanager/">Meta Ads Manager</a>. See the <a href="https://www.facebook.com/business/help/1492627900875762">docs</a> for more information.
     */
    accountIds: string[];
    /**
     * Select the statuses you want to be loaded in the stream. If no specific statuses are selected, the API's default behavior applies, and some statuses may be filtered out.
     */
    adStatuses: string[];
    /**
     * Select the statuses you want to be loaded in the stream. If no specific statuses are selected, the API's default behavior applies, and some statuses may be filtered out.
     */
    adsetStatuses: string[];
    /**
     * Select the statuses you want to be loaded in the stream. If no specific statuses are selected, the API's default behavior applies, and some statuses may be filtered out.
     */
    campaignStatuses: string[];
    /**
     * Credentials for connecting to the Facebook Marketing API
     */
    credentials: outputs.SourceFacebookMarketingConfigurationCredentials;
    /**
     * A list which contains ad statistics entries, each entry must have a name and can contains fields, breakdowns or action_breakdowns. Click on "add" to fill this field.
     */
    customInsights?: outputs.SourceFacebookMarketingConfigurationCustomInsight[];
    /**
     * The date until which you'd like to replicate data for all incremental streams, in the format YYYY-MM-DDT00:00:00Z. All data generated between the start date and this end date will be replicated. Not setting this option will result in always syncing the latest data.
     */
    endDate?: string;
    /**
     * Set to active if you want to fetch the thumbnail_url and store the result in thumbnail_data_url for each Ad Creative. Default: false
     */
    fetchThumbnailImages: boolean;
    /**
     * Insights Job Timeout establishes the maximum amount of time (in minutes) of waiting for the report job to complete. When timeout is reached the job is considered failed and we are trying to request smaller amount of data by breaking the job to few smaller ones. If you definitely know that 60 minutes is not enough for your report to be processed then you can decrease the timeout value, so we start breaking job to smaller parts faster. Default: 60
     */
    insightsJobTimeout: number;
    /**
     * The attribution window. Facebook freezes insight data 28 days after it was generated, which means that all data from the past 28 days may have changed since we last emitted it, so you can retrieve refreshed insights from the past by setting this parameter. If you set a custom lookback window value in Facebook account, please provide the same value here. Default: 28
     */
    insightsLookbackWindow: number;
    /**
     * Page size used when sending requests to Facebook API to specify number of records per page when response has pagination. Most users do not need to set this field unless they specifically need to tune the connector to address specific issues or use cases. Default: 100
     */
    pageSize: number;
    /**
     * The date from which you'd like to replicate data for all incremental streams, in the format YYYY-MM-DDT00:00:00Z. If not set then all data will be replicated for usual streams and only last 2 years for insight streams.
     */
    startDate?: string;
}

export interface SourceFacebookMarketingConfigurationCredentials {
    authenticateViaFacebookMarketingOauth?: outputs.SourceFacebookMarketingConfigurationCredentialsAuthenticateViaFacebookMarketingOauth;
    serviceAccountKeyAuthentication?: outputs.SourceFacebookMarketingConfigurationCredentialsServiceAccountKeyAuthentication;
}

export interface SourceFacebookMarketingConfigurationCredentialsAuthenticateViaFacebookMarketingOauth {
    /**
     * The value of the generated access token. From your App’s Dashboard, click on "Marketing API" then "Tools". Select permissions <b>ads_management, ads_read, read_insights, business_management</b>. Then click on "Get token". See the <a href="https://docs.airbyte.com/integrations/sources/facebook-marketing">docs</a> for more information.
     */
    accessToken?: string;
    /**
     * Client ID for the Facebook Marketing API
     */
    clientId: string;
    /**
     * Client Secret for the Facebook Marketing API
     */
    clientSecret: string;
}

export interface SourceFacebookMarketingConfigurationCredentialsServiceAccountKeyAuthentication {
    /**
     * The value of the generated access token. From your App’s Dashboard, click on "Marketing API" then "Tools". Select permissions <b>ads_management, ads_read, read_insights, business_management</b>. Then click on "Get token". See the <a href="https://docs.airbyte.com/integrations/sources/facebook-marketing">docs</a> for more information.
     */
    accessToken: string;
}

export interface SourceFacebookMarketingConfigurationCustomInsight {
    /**
     * A list of chosen action_breakdowns for action_breakdowns
     */
    actionBreakdowns: string[];
    /**
     * Determines the report time of action stats. For example, if a person saw the ad on Jan 1st but converted on Jan 2nd, when you query the API with action_report_time=impression, you see a conversion on Jan 1st. When you query the API with action_report_time=conversion, you see a conversion on Jan 2nd. Default: "mixed"; must be one of ["conversion", "impression", "mixed"]
     */
    actionReportTime: string;
    /**
     * A list of chosen breakdowns for breakdowns
     */
    breakdowns: string[];
    /**
     * The date until which you'd like to replicate data for this stream, in the format YYYY-MM-DDT00:00:00Z. All data generated between the start date and this end date will be replicated. Not setting this option will result in always syncing the latest data.
     */
    endDate?: string;
    /**
     * A list of chosen fields for fields parameter
     */
    fields: string[];
    /**
     * The insights job timeout. Default: 60
     */
    insightsJobTimeout: number;
    /**
     * The attribution window. Default: 28
     */
    insightsLookbackWindow: number;
    /**
     * Chosen level for API. Default: "ad"; must be one of ["ad", "adset", "campaign", "account"]
     */
    level: string;
    /**
     * The name value of insight
     */
    name: string;
    /**
     * The date from which you'd like to replicate data for this stream, in the format YYYY-MM-DDT00:00:00Z.
     */
    startDate?: string;
    /**
     * Time window in days by which to aggregate statistics. The sync will be chunked into N day intervals, where N is the number of days you specified. For example, if you set this value to 7, then all statistics will be reported as 7-day aggregates by starting from the start_date. If the start and end dates are October 1st and October 30th, then the connector will output 5 records: 01 - 06, 07 - 13, 14 - 20, 21 - 27, and 28 - 30 (3 days only). The minimum allowed value for this field is 1, and the maximum is 89. Default: 1
     */
    timeIncrement: number;
}

export interface SourceFacebookMarketingResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceFacebookMarketingResourceAllocationDefault;
    jobSpecifics: outputs.SourceFacebookMarketingResourceAllocationJobSpecific[];
}

export interface SourceFacebookMarketingResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceFacebookMarketingResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceFacebookMarketingResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceFacebookMarketingResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceFactorialConfiguration {
    apiKey: string;
    /**
     * Max records per page limit. Default: "50"
     */
    limit: string;
    startDate: string;
}

export interface SourceFactorialResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceFactorialResourceAllocationDefault;
    jobSpecifics: outputs.SourceFactorialResourceAllocationJobSpecific[];
}

export interface SourceFactorialResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceFactorialResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceFactorialResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceFactorialResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceFakerConfiguration {
    /**
     * Should the updated_at values for every record be new each sync?  Setting this to false will case the source to stop emitting records after COUNT records have been emitted. Default: true
     */
    alwaysUpdated: boolean;
    /**
     * How many users should be generated in total. The purchases table will be scaled to match, with 10 purchases created per 10 users. This setting does not apply to the products stream. Default: 1000
     */
    count: number;
    /**
     * How many parallel workers should we use to generate fake data?  Choose a value equal to the number of CPUs you will allocate to this source. Default: 4
     */
    parallelism: number;
    /**
     * How many fake records will be in each page (stream slice), before a state message is emitted?. Default: 1000
     */
    recordsPerSlice: number;
    /**
     * Manually control the faker random seed to return the same values on subsequent runs (leave -1 for random). Default: -1
     */
    seed: number;
}

export interface SourceFakerResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceFakerResourceAllocationDefault;
    jobSpecifics: outputs.SourceFakerResourceAllocationJobSpecific[];
}

export interface SourceFakerResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceFakerResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceFakerResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceFakerResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceFastbillConfiguration {
    /**
     * Fastbill API key
     */
    apiKey: string;
    /**
     * Username for Fastbill account
     */
    username: string;
}

export interface SourceFastbillResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceFastbillResourceAllocationDefault;
    jobSpecifics: outputs.SourceFastbillResourceAllocationJobSpecific[];
}

export interface SourceFastbillResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceFastbillResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceFastbillResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceFastbillResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceFaunaConfiguration {
    /**
     * Settings for the Fauna Collection.
     */
    collection?: outputs.SourceFaunaConfigurationCollection;
    /**
     * Domain of Fauna to query. Defaults db.fauna.com. See <a href=https://docs.fauna.com/fauna/current/learn/understanding/region_groups#how-to-use-region-groups>the docs</a>. Default: "db.fauna.com"
     */
    domain: string;
    /**
     * Endpoint port. Default: 443
     */
    port: number;
    /**
     * URL scheme. Default: "https"
     */
    scheme: string;
    /**
     * Fauna secret, used when authenticating with the database.
     */
    secret: string;
}

export interface SourceFaunaConfigurationCollection {
    /**
     * <b>This only applies to incremental syncs.</b> <br>
     * Enabling deletion mode informs your destination of deleted documents.<br>
     * Disabled - Leave this feature disabled, and ignore deleted documents.<br>
     * Enabled - Enables this feature. When a document is deleted, the connector exports a record with a "deleted at" column containing the time that the document was deleted.
     */
    deletions: outputs.SourceFaunaConfigurationCollectionDeletions;
    /**
     * The page size used when reading documents from the database. The larger the page size, the faster the connector processes documents. However, if a page is too large, the connector may fail. <br>
     * Choose your page size based on how large the documents are. <br>
     * See <a href="https://docs.fauna.com/fauna/current/learn/understanding/types#page">the docs</a>.
     * Default: 64
     */
    pageSize: number;
}

export interface SourceFaunaConfigurationCollectionDeletions {
    disabled?: outputs.SourceFaunaConfigurationCollectionDeletionsDisabled;
    enabled?: outputs.SourceFaunaConfigurationCollectionDeletionsEnabled;
}

export interface SourceFaunaConfigurationCollectionDeletionsDisabled {
}

export interface SourceFaunaConfigurationCollectionDeletionsEnabled {
    /**
     * Name of the "deleted at" column. Default: "deleted_at"
     */
    column: string;
}

export interface SourceFaunaResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceFaunaResourceAllocationDefault;
    jobSpecifics: outputs.SourceFaunaResourceAllocationJobSpecific[];
}

export interface SourceFaunaResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceFaunaResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceFaunaResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceFaunaResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceFileConfiguration {
    /**
     * The Name of the final table to replicate this file into (should include letters, numbers dash and underscores only).
     */
    datasetName: string;
    /**
     * The Format of the file which should be replicated (Warning: some formats may be experimental, please refer to the docs). Default: "csv"; must be one of ["csv", "json", "jsonl", "excel", "excel_binary", "fwf", "feather", "parquet", "yaml"]
     */
    format: string;
    /**
     * The storage Provider or Location of the file(s) which should be replicated.
     */
    provider: outputs.SourceFileConfigurationProvider;
    /**
     * This should be a string in JSON format. It depends on the chosen file format to provide additional options and tune its behavior.
     */
    readerOptions?: string;
    /**
     * The URL path to access the file which should be replicated.
     */
    url: string;
}

export interface SourceFileConfigurationProvider {
    azBlobAzureBlobStorage?: outputs.SourceFileConfigurationProviderAzBlobAzureBlobStorage;
    gcsGoogleCloudStorage?: outputs.SourceFileConfigurationProviderGcsGoogleCloudStorage;
    httpsPublicWeb?: outputs.SourceFileConfigurationProviderHttpsPublicWeb;
    localFilesystemLimited?: outputs.SourceFileConfigurationProviderLocalFilesystemLimited;
    s3AmazonWebServices?: outputs.SourceFileConfigurationProviderS3AmazonWebServices;
    scpSecureCopyProtocol?: outputs.SourceFileConfigurationProviderScpSecureCopyProtocol;
    sftpSecureFileTransferProtocol?: outputs.SourceFileConfigurationProviderSftpSecureFileTransferProtocol;
    sshSecureShell?: outputs.SourceFileConfigurationProviderSshSecureShell;
}

export interface SourceFileConfigurationProviderAzBlobAzureBlobStorage {
    /**
     * To access Azure Blob Storage, this connector would need credentials with the proper permissions. One option is a SAS (Shared Access Signature) token. If accessing publicly available data, this field is not necessary.
     */
    sasToken?: string;
    /**
     * To access Azure Blob Storage, this connector would need credentials with the proper permissions. One option is a storage account shared key (aka account key or access key). If accessing publicly available data, this field is not necessary.
     */
    sharedKey?: string;
    /**
     * The globally unique name of the storage account that the desired blob sits within. See <a href="https://docs.microsoft.com/en-us/azure/storage/common/storage-account-overview" target="_blank">here</a> for more details.
     */
    storageAccount: string;
}

export interface SourceFileConfigurationProviderGcsGoogleCloudStorage {
    /**
     * In order to access private Buckets stored on Google Cloud, this connector would need a service account json credentials with the proper permissions as described <a href="https://cloud.google.com/iam/docs/service-accounts" target="_blank">here</a>. Please generate the credentials.json file and copy/paste its content to this field (expecting JSON formats). If accessing publicly available data, this field is not necessary.
     */
    serviceAccountJson?: string;
}

export interface SourceFileConfigurationProviderHttpsPublicWeb {
    /**
     * Add User-Agent to request. Default: false
     */
    userAgent: boolean;
}

export interface SourceFileConfigurationProviderLocalFilesystemLimited {
}

export interface SourceFileConfigurationProviderS3AmazonWebServices {
    /**
     * In order to access private Buckets stored on AWS S3, this connector would need credentials with the proper permissions. If accessing publicly available data, this field is not necessary.
     */
    awsAccessKeyId?: string;
    /**
     * In order to access private Buckets stored on AWS S3, this connector would need credentials with the proper permissions. If accessing publicly available data, this field is not necessary.
     */
    awsSecretAccessKey?: string;
}

export interface SourceFileConfigurationProviderScpSecureCopyProtocol {
    host: string;
    password?: string;
    /**
     * Default: "22"
     */
    port: string;
    user: string;
}

export interface SourceFileConfigurationProviderSftpSecureFileTransferProtocol {
    host: string;
    password?: string;
    /**
     * Default: "22"
     */
    port: string;
    user: string;
}

export interface SourceFileConfigurationProviderSshSecureShell {
    host: string;
    password?: string;
    /**
     * Default: "22"
     */
    port: string;
    user: string;
}

export interface SourceFileResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceFileResourceAllocationDefault;
    jobSpecifics: outputs.SourceFileResourceAllocationJobSpecific[];
}

export interface SourceFileResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceFileResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceFileResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceFileResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceFilloutConfiguration {
    /**
     * API key to use. Find it in the Developer settings tab of your Fillout account.
     */
    apiKey: string;
    startDate: string;
}

export interface SourceFilloutResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceFilloutResourceAllocationDefault;
    jobSpecifics: outputs.SourceFilloutResourceAllocationJobSpecific[];
}

export interface SourceFilloutResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceFilloutResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceFilloutResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceFilloutResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceFinageConfiguration {
    apiKey: string;
    /**
     * Time period. Default is 10
     */
    period?: string;
    startDate: string;
    /**
     * List of symbols
     */
    symbols: string[];
    /**
     * One of DEMA, EMA, SMA, WMA, RSI, TEMA, Williams, ADX. Default: "SMA"; must be one of ["DEMA", "EMA", "SMA", "WMA", "RSI", "TEMA", "Williams", "ADX"]
     */
    techIndicatorType: string;
    /**
     * Default: "daily"; must be one of ["daily", "1min", "5min", "15min", "30min", "1hour", "4hour"]
     */
    time: string;
    /**
     * Size of the time. Default: "day"; must be one of ["minute", "hour", "day", "week", "month", "quarter", "year"]
     */
    timeAggregates: string;
    /**
     * Time Period for cash flow stmts. must be one of ["annual", "quarter"]
     */
    timePeriod?: string;
}

export interface SourceFinageResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceFinageResourceAllocationDefault;
    jobSpecifics: outputs.SourceFinageResourceAllocationJobSpecific[];
}

export interface SourceFinageResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceFinageResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceFinageResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceFinageResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceFinancialModellingConfiguration {
    apiKey: string;
    /**
     * The stock exchange : AMEX, AMS, AQS, ASX, ATH, BER, BME, BRU, BSE, BUD, BUE, BVC, CAI, CBOE, CNQ, CPH, DFM, DOH, DUS, DXE, EGX, EURONEXT, HAM, HEL, HKSE, ICE, IOB, IST, JKT, JNB, JPX, KLS, KOE, KSC, KUW, LSE, MCX, MEX, MIL, MUN, NASDAQ, NEO, NSE, NYSE, NZE, OEM, OQX, OSL, OTC, PNK, PRA, RIS, SAO, SAU, SES, SET, SGO, SHH, SHZ, SIX, STO, STU, TAI, TLV, TSX, TSXV, TWO, VIE, VSE, WSE, XETRA. Default: "NASDAQ"
     */
    exchange: string;
    /**
     * Used in screener to filter out stocks with a market cap lower than the give marketcap
     */
    marketcaplowerthan?: string;
    /**
     * Used in screener to filter out stocks with a market cap more than the give marketcap
     */
    marketcapmorethan?: string;
    startDate: string;
    /**
     * For example 1min, 5min, 15min, 30min, 1hour, 4hour. Default: "4hour"; must be one of ["1min", "5min", "15min", "30min", "1hour", "4hour"]
     */
    timeFrame: string;
}

export interface SourceFinancialModellingResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceFinancialModellingResourceAllocationDefault;
    jobSpecifics: outputs.SourceFinancialModellingResourceAllocationJobSpecific[];
}

export interface SourceFinancialModellingResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceFinancialModellingResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceFinancialModellingResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceFinancialModellingResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceFinnhubConfiguration {
    /**
     * The API key to use for authentication
     */
    apiKey: string;
    /**
     * More info: https://finnhub.io/docs/api/stock-symbols. Default: "US"
     */
    exchange: string;
    /**
     * This parameter can be 1 of the following values general, forex, crypto, merger. Default: "general"; must be one of ["general", "forex", "crypto", "merger"]
     */
    marketNewsCategory: string;
    startDate2: string;
    symbols: string[];
}

export interface SourceFinnhubResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceFinnhubResourceAllocationDefault;
    jobSpecifics: outputs.SourceFinnhubResourceAllocationJobSpecific[];
}

export interface SourceFinnhubResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceFinnhubResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceFinnhubResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceFinnhubResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceFinnworldsConfiguration {
    /**
     * For example 10y, 5y, 2y...
     */
    bondTypes?: string[];
    /**
     * Options Available: beef, cheese, oil, ...
     */
    commodities?: string[];
    /**
     * brazil, united states, italia, japan
     */
    countries?: string[];
    key: string;
    /**
     * Choose isin, ticker, reg_lei or cik. Default: "ticker"
     */
    list: string;
    /**
     * Default: "country"
     */
    listCountriesForBonds: string;
    startDate: string;
    /**
     * AAPL, T, MU, GOOG
     */
    tickers?: string[];
}

export interface SourceFinnworldsResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceFinnworldsResourceAllocationDefault;
    jobSpecifics: outputs.SourceFinnworldsResourceAllocationJobSpecific[];
}

export interface SourceFinnworldsResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceFinnworldsResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceFinnworldsResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceFinnworldsResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceFireboltConfiguration {
    /**
     * Firebolt account to login.
     */
    account: string;
    /**
     * Firebolt service account ID.
     */
    clientId: string;
    /**
     * Firebolt secret, corresponding to the service account ID.
     */
    clientSecret: string;
    /**
     * The database to connect to.
     */
    database: string;
    /**
     * Engine name to connect to.
     */
    engine: string;
    /**
     * The host name of your Firebolt database.
     */
    host?: string;
}

export interface SourceFireboltResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceFireboltResourceAllocationDefault;
    jobSpecifics: outputs.SourceFireboltResourceAllocationJobSpecific[];
}

export interface SourceFireboltResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceFireboltResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceFireboltResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceFireboltResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceFirehydrantConfiguration {
    /**
     * Bot token to use for authenticating with the FireHydrant API. You can find or create a bot token by logging into your organization and visiting the Bot users page at https://app.firehydrant.io/organizations/bots.
     */
    apiToken: string;
}

export interface SourceFirehydrantResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceFirehydrantResourceAllocationDefault;
    jobSpecifics: outputs.SourceFirehydrantResourceAllocationJobSpecific[];
}

export interface SourceFirehydrantResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceFirehydrantResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceFirehydrantResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceFirehydrantResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceFleetioConfiguration {
    accountToken: string;
    apiKey: string;
}

export interface SourceFleetioResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceFleetioResourceAllocationDefault;
    jobSpecifics: outputs.SourceFleetioResourceAllocationJobSpecific[];
}

export interface SourceFleetioResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceFleetioResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceFleetioResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceFleetioResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceFlexmailConfiguration {
    /**
     * Your Flexmail account ID. You can find it in your Flexmail account settings.
     */
    accountId: string;
    /**
     * A personal access token for API authentication. Manage your tokens in Flexmail under Settings > API > Personal access tokens.
     */
    personalAccessToken: string;
}

export interface SourceFlexmailResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceFlexmailResourceAllocationDefault;
    jobSpecifics: outputs.SourceFlexmailResourceAllocationJobSpecific[];
}

export interface SourceFlexmailResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceFlexmailResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceFlexmailResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceFlexmailResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceFlexportConfiguration {
    apiKey: string;
    startDate: string;
}

export interface SourceFlexportResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceFlexportResourceAllocationDefault;
    jobSpecifics: outputs.SourceFlexportResourceAllocationJobSpecific[];
}

export interface SourceFlexportResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceFlexportResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceFlexportResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceFlexportResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceFloatConfiguration {
    /**
     * API token obtained from your Float Account Settings page
     */
    accessToken: string;
    startDate: string;
}

export interface SourceFloatResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceFloatResourceAllocationDefault;
    jobSpecifics: outputs.SourceFloatResourceAllocationJobSpecific[];
}

export interface SourceFloatResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceFloatResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceFloatResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceFloatResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceFlowluConfiguration {
    /**
     * The API key to use for authentication
     */
    apiKey: string;
    company: string;
}

export interface SourceFlowluResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceFlowluResourceAllocationDefault;
    jobSpecifics: outputs.SourceFlowluResourceAllocationJobSpecific[];
}

export interface SourceFlowluResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceFlowluResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceFlowluResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceFlowluResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceFormbricksConfiguration {
    /**
     * API key to use. You can generate and find it in your Postman account settings.
     */
    apiKey: string;
}

export interface SourceFormbricksResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceFormbricksResourceAllocationDefault;
    jobSpecifics: outputs.SourceFormbricksResourceAllocationJobSpecific[];
}

export interface SourceFormbricksResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceFormbricksResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceFormbricksResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceFormbricksResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceFreeAgentConnectorConfiguration {
    clientId: string;
    clientRefreshToken2: string;
    clientSecret: string;
    payrollYear?: number;
    updatedSince?: string;
}

export interface SourceFreeAgentConnectorResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceFreeAgentConnectorResourceAllocationDefault;
    jobSpecifics: outputs.SourceFreeAgentConnectorResourceAllocationJobSpecific[];
}

export interface SourceFreeAgentConnectorResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceFreeAgentConnectorResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceFreeAgentConnectorResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceFreeAgentConnectorResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceFreightviewConfiguration {
    clientId: string;
    clientSecret: string;
}

export interface SourceFreightviewResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceFreightviewResourceAllocationDefault;
    jobSpecifics: outputs.SourceFreightviewResourceAllocationJobSpecific[];
}

export interface SourceFreightviewResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceFreightviewResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceFreightviewResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceFreightviewResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceFreshbooksConfiguration {
    accountId: string;
    businessUuid: string;
    clientId: string;
    clientRefreshToken: string;
    clientSecret: string;
    /**
     * The current access token. This field might be overridden by the connector based on the token refresh endpoint response.
     */
    oauthAccessToken?: string;
    /**
     * The date the current access token expires in. This field might be overridden by the connector based on the token refresh endpoint response.
     */
    oauthTokenExpiryDate?: string;
    redirectUri: string;
}

export interface SourceFreshbooksResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceFreshbooksResourceAllocationDefault;
    jobSpecifics: outputs.SourceFreshbooksResourceAllocationJobSpecific[];
}

export interface SourceFreshbooksResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceFreshbooksResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceFreshbooksResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceFreshbooksResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceFreshcallerConfiguration {
    /**
     * Freshcaller API Key. See the <a href="https://docs.airbyte.com/integrations/sources/freshcaller">docs</a> for more information on how to obtain this key.
     */
    apiKey: string;
    /**
     * Used to construct Base URL for the Freshcaller APIs
     */
    domain: string;
    /**
     * The number of requests per minute that this source allowed to use. There is a rate limit of 50 requests per minute per app per account.
     */
    requestsPerMinute?: number;
    /**
     * UTC date and time. Any data created after this date will be replicated.
     */
    startDate?: string;
    /**
     * Lag in minutes for each sync, i.e., at time T, data for the time range [prev_sync_time, T-30] will be fetched
     */
    syncLagMinutes?: number;
}

export interface SourceFreshcallerResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceFreshcallerResourceAllocationDefault;
    jobSpecifics: outputs.SourceFreshcallerResourceAllocationJobSpecific[];
}

export interface SourceFreshcallerResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceFreshcallerResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceFreshcallerResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceFreshcallerResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceFreshchatConfiguration {
    /**
     * The unique account name for your Freshchat instance
     */
    accountName: string;
    apiKey: string;
    startDate: string;
}

export interface SourceFreshchatResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceFreshchatResourceAllocationDefault;
    jobSpecifics: outputs.SourceFreshchatResourceAllocationJobSpecific[];
}

export interface SourceFreshchatResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceFreshchatResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceFreshchatResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceFreshchatResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceFreshdeskConfiguration {
    /**
     * Freshdesk API Key. See the <a href="https://docs.airbyte.com/integrations/sources/freshdesk">docs</a> for more information on how to obtain this key.
     */
    apiKey: string;
    /**
     * Freshdesk domain
     */
    domain: string;
    /**
     * Number of days for lookback window for the stream Satisfaction Ratings. Default: 14
     */
    lookbackWindowInDays: number;
    /**
     * The number of requests per minute that this source allowed to use. There is a rate limit of 50 requests per minute per app per account.
     */
    requestsPerMinute?: number;
    /**
     * UTC date and time. Any data created after this date will be replicated. If this parameter is not set, all data will be replicated.
     */
    startDate?: string;
}

export interface SourceFreshdeskResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceFreshdeskResourceAllocationDefault;
    jobSpecifics: outputs.SourceFreshdeskResourceAllocationJobSpecific[];
}

export interface SourceFreshdeskResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceFreshdeskResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceFreshdeskResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceFreshdeskResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceFreshsalesConfiguration {
    /**
     * Freshsales API Key. See <a href="https://crmsupport.freshworks.com/support/solutions/articles/50000002503-how-to-find-my-api-key-">here</a>. The key is case sensitive.
     */
    apiKey: string;
    /**
     * The Name of your Freshsales domain
     */
    domainName: string;
}

export interface SourceFreshsalesResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceFreshsalesResourceAllocationDefault;
    jobSpecifics: outputs.SourceFreshsalesResourceAllocationJobSpecific[];
}

export interface SourceFreshsalesResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceFreshsalesResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceFreshsalesResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceFreshsalesResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceFreshserviceConfiguration {
    /**
     * Freshservice API Key. See <a href="https://api.freshservice.com/#authentication">here</a>. The key is case sensitive.
     */
    apiKey: string;
    /**
     * The name of your Freshservice domain
     */
    domainName: string;
    /**
     * UTC date and time in the format 2020-10-01T00:00:00Z. Any data before this date will not be replicated.
     */
    startDate: string;
}

export interface SourceFreshserviceResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceFreshserviceResourceAllocationDefault;
    jobSpecifics: outputs.SourceFreshserviceResourceAllocationJobSpecific[];
}

export interface SourceFreshserviceResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceFreshserviceResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceFreshserviceResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceFreshserviceResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceFrontConfiguration {
    apiKey: string;
    /**
     * Page limit for the responses. Default: "50"
     */
    pageLimit: string;
    startDate: string;
}

export interface SourceFrontResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceFrontResourceAllocationDefault;
    jobSpecifics: outputs.SourceFrontResourceAllocationJobSpecific[];
}

export interface SourceFrontResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceFrontResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceFrontResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceFrontResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceFulcrumConfiguration {
    /**
     * API key to use. Find it at https://web.fulcrumapp.com/settings/api
     */
    apiKey: string;
}

export interface SourceFulcrumResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceFulcrumResourceAllocationDefault;
    jobSpecifics: outputs.SourceFulcrumResourceAllocationJobSpecific[];
}

export interface SourceFulcrumResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceFulcrumResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceFulcrumResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceFulcrumResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceFullstoryConfiguration {
    /**
     * API Key for the fullstory.com API.
     */
    apiKey: string;
    /**
     * User ID for the fullstory.com API.
     */
    uid: string;
}

export interface SourceFullstoryResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceFullstoryResourceAllocationDefault;
    jobSpecifics: outputs.SourceFullstoryResourceAllocationJobSpecific[];
}

export interface SourceFullstoryResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceFullstoryResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceFullstoryResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceFullstoryResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceGainsightPxConfiguration {
    /**
     * The Aptrinsic API Key which is recieved from the dashboard settings (ref - https://app.aptrinsic.com/settings/api-keys)
     */
    apiKey: string;
}

export interface SourceGainsightPxResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceGainsightPxResourceAllocationDefault;
    jobSpecifics: outputs.SourceGainsightPxResourceAllocationJobSpecific[];
}

export interface SourceGainsightPxResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceGainsightPxResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceGainsightPxResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceGainsightPxResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceGcsConfiguration {
    /**
     * Name of the GCS bucket where the file(s) exist.
     */
    bucket: string;
    /**
     * Credentials for connecting to the Google Cloud Storage API
     */
    credentials: outputs.SourceGcsConfigurationCredentials;
    /**
     * UTC date and time in the format 2017-01-25T00:00:00.000000Z. Any file modified before this date will not be replicated.
     */
    startDate?: string;
    /**
     * Each instance of this configuration defines a <a href="https://docs.airbyte.com/cloud/core-concepts#stream">stream</a>. Use this to define which files belong in the stream, their format, and how they should be parsed and validated. When sending data to warehouse destination such as Snowflake or BigQuery, each stream is a separate table.
     */
    streams: outputs.SourceGcsConfigurationStream[];
}

export interface SourceGcsConfigurationCredentials {
    authenticateViaGoogleOAuth?: outputs.SourceGcsConfigurationCredentialsAuthenticateViaGoogleOAuth;
    serviceAccountAuthentication?: outputs.SourceGcsConfigurationCredentialsServiceAccountAuthentication;
}

export interface SourceGcsConfigurationCredentialsAuthenticateViaGoogleOAuth {
    /**
     * Access Token
     */
    accessToken: string;
    /**
     * Client ID
     */
    clientId: string;
    /**
     * Client Secret
     */
    clientSecret: string;
    /**
     * Access Token
     */
    refreshToken: string;
}

export interface SourceGcsConfigurationCredentialsServiceAccountAuthentication {
    /**
     * Enter your Google Cloud <a href="https://cloud.google.com/iam/docs/creating-managing-service-account-keys#creating_service_account_keys">service account key</a> in JSON format
     */
    serviceAccount: string;
}

export interface SourceGcsConfigurationStream {
    /**
     * When the state history of the file store is full, syncs will only read files that were last modified in the provided day range. Default: 3
     */
    daysToSyncIfHistoryIsFull: number;
    /**
     * The configuration options that are used to alter how to read incoming files that deviate from the standard formatting.
     */
    format: outputs.SourceGcsConfigurationStreamFormat;
    /**
     * The pattern used to specify which files should be selected from the file system. For more information on glob pattern matching look <a href="https://en.wikipedia.org/wiki/Glob_(programming)">here</a>.
     */
    globs?: string[];
    /**
     * The schema that will be used to validate records extracted from the file. This will override the stream schema that is auto-detected from incoming files.
     */
    inputSchema?: string;
    /**
     * The name of the stream.
     */
    name: string;
    /**
     * The number of resent files which will be used to discover the schema for this stream.
     */
    recentNFilesToReadForSchemaDiscovery?: number;
    /**
     * When enabled, syncs will not validate or structure records against the stream's schema. Default: false
     */
    schemaless: boolean;
    /**
     * The name of the validation policy that dictates sync behavior when a record does not adhere to the stream schema. Default: "Emit Record"; must be one of ["Emit Record", "Skip Record", "Wait for Discover"]
     */
    validationPolicy: string;
}

export interface SourceGcsConfigurationStreamFormat {
    avroFormat?: outputs.SourceGcsConfigurationStreamFormatAvroFormat;
    csvFormat?: outputs.SourceGcsConfigurationStreamFormatCsvFormat;
    excelFormat?: outputs.SourceGcsConfigurationStreamFormatExcelFormat;
    jsonlFormat?: outputs.SourceGcsConfigurationStreamFormatJsonlFormat;
    parquetFormat?: outputs.SourceGcsConfigurationStreamFormatParquetFormat;
    /**
     * Extract text from document formats (.pdf, .docx, .md, .pptx) and emit as one record per file.
     */
    unstructuredDocumentFormat?: outputs.SourceGcsConfigurationStreamFormatUnstructuredDocumentFormat;
}

export interface SourceGcsConfigurationStreamFormatAvroFormat {
    /**
     * Whether to convert double fields to strings. This is recommended if you have decimal numbers with a high degree of precision because there can be a loss precision when handling floating point numbers. Default: false
     */
    doubleAsString: boolean;
}

export interface SourceGcsConfigurationStreamFormatCsvFormat {
    /**
     * The character delimiting individual cells in the CSV data. This may only be a 1-character string. For tab-delimited data enter '\t'. Default: ","
     */
    delimiter: string;
    /**
     * Whether two quotes in a quoted CSV value denote a single quote in the data. Default: true
     */
    doubleQuote: boolean;
    /**
     * The character encoding of the CSV data. Leave blank to default to <strong>UTF8</strong>. See <a href="https://docs.python.org/3/library/codecs.html#standard-encodings" target="_blank">list of python encodings</a> for allowable options. Default: "utf8"
     */
    encoding: string;
    /**
     * The character used for escaping special characters. To disallow escaping, leave this field blank.
     */
    escapeChar?: string;
    /**
     * A set of case-sensitive strings that should be interpreted as false values.
     */
    falseValues?: string[];
    /**
     * How headers will be defined. `User Provided` assumes the CSV does not have a header row and uses the headers provided and `Autogenerated` assumes the CSV does not have a header row and the CDK will generate headers using for `f{i}` where `i` is the index starting from 0. Else, the default behavior is to use the header from the CSV file. If a user wants to autogenerate or provide column names for a CSV having headers, they can skip rows.
     */
    headerDefinition?: outputs.SourceGcsConfigurationStreamFormatCsvFormatHeaderDefinition;
    /**
     * Whether to ignore errors that occur when the number of fields in the CSV does not match the number of columns in the schema. Default: false
     */
    ignoreErrorsOnFieldsMismatch: boolean;
    /**
     * A set of case-sensitive strings that should be interpreted as null values. For example, if the value 'NA' should be interpreted as null, enter 'NA' in this field.
     */
    nullValues: string[];
    /**
     * The character used for quoting CSV values. To disallow quoting, make this field blank. Default: "\""
     */
    quoteChar: string;
    /**
     * The number of rows to skip after the header row. Default: 0
     */
    skipRowsAfterHeader: number;
    /**
     * The number of rows to skip before the header row. For example, if the header row is on the 3rd row, enter 2 in this field. Default: 0
     */
    skipRowsBeforeHeader: number;
    /**
     * Whether strings can be interpreted as null values. If true, strings that match the null_values set will be interpreted as null. If false, strings that match the null_values set will be interpreted as the string itself. Default: true
     */
    stringsCanBeNull: boolean;
    /**
     * A set of case-sensitive strings that should be interpreted as true values.
     */
    trueValues?: string[];
}

export interface SourceGcsConfigurationStreamFormatCsvFormatHeaderDefinition {
    autogenerated?: outputs.SourceGcsConfigurationStreamFormatCsvFormatHeaderDefinitionAutogenerated;
    fromCsv?: outputs.SourceGcsConfigurationStreamFormatCsvFormatHeaderDefinitionFromCsv;
    userProvided?: outputs.SourceGcsConfigurationStreamFormatCsvFormatHeaderDefinitionUserProvided;
}

export interface SourceGcsConfigurationStreamFormatCsvFormatHeaderDefinitionAutogenerated {
}

export interface SourceGcsConfigurationStreamFormatCsvFormatHeaderDefinitionFromCsv {
}

export interface SourceGcsConfigurationStreamFormatCsvFormatHeaderDefinitionUserProvided {
    /**
     * The column names that will be used while emitting the CSV records
     */
    columnNames: string[];
}

export interface SourceGcsConfigurationStreamFormatExcelFormat {
}

export interface SourceGcsConfigurationStreamFormatJsonlFormat {
}

export interface SourceGcsConfigurationStreamFormatParquetFormat {
    /**
     * Whether to convert decimal fields to floats. There is a loss of precision when converting decimals to floats, so this is not recommended. Default: false
     */
    decimalAsFloat: boolean;
}

export interface SourceGcsConfigurationStreamFormatUnstructuredDocumentFormat {
    /**
     * Processing configuration
     */
    processing?: outputs.SourceGcsConfigurationStreamFormatUnstructuredDocumentFormatProcessing;
    /**
     * If true, skip files that cannot be parsed and pass the error message along as the _ab_source_file_parse_error field. If false, fail the sync. Default: true
     */
    skipUnprocessableFiles: boolean;
    /**
     * The strategy used to parse documents. `fast` extracts text directly from the document which doesn't work for all files. `ocr_only` is more reliable, but slower. `hi_res` is the most reliable, but requires an API key and a hosted instance of unstructured and can't be used with local mode. See the unstructured.io documentation for more details: https://unstructured-io.github.io/unstructured/core/partition.html#partition-pdf. Default: "auto"; must be one of ["auto", "fast", "ocr_only", "hi_res"]
     */
    strategy: string;
}

export interface SourceGcsConfigurationStreamFormatUnstructuredDocumentFormatProcessing {
    /**
     * Process files locally, supporting `fast` and `ocr` modes. This is the default option.
     */
    local?: outputs.SourceGcsConfigurationStreamFormatUnstructuredDocumentFormatProcessingLocal;
    /**
     * Process files via an API, using the `hi_res` mode. This option is useful for increased performance and accuracy, but requires an API key and a hosted instance of unstructured.
     */
    viaApi?: outputs.SourceGcsConfigurationStreamFormatUnstructuredDocumentFormatProcessingViaApi;
}

export interface SourceGcsConfigurationStreamFormatUnstructuredDocumentFormatProcessingLocal {
}

export interface SourceGcsConfigurationStreamFormatUnstructuredDocumentFormatProcessingViaApi {
    /**
     * The API key to use matching the environment. Default: ""
     */
    apiKey: string;
    /**
     * The URL of the unstructured API to use. Default: "https://api.unstructured.io"
     */
    apiUrl: string;
    /**
     * List of parameters send to the API
     */
    parameters?: outputs.SourceGcsConfigurationStreamFormatUnstructuredDocumentFormatProcessingViaApiParameter[];
}

export interface SourceGcsConfigurationStreamFormatUnstructuredDocumentFormatProcessingViaApiParameter {
    /**
     * The name of the unstructured API parameter to use
     */
    name: string;
    /**
     * The value of the parameter
     */
    value: string;
}

export interface SourceGcsResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceGcsResourceAllocationDefault;
    jobSpecifics: outputs.SourceGcsResourceAllocationJobSpecific[];
}

export interface SourceGcsResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceGcsResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceGcsResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceGcsResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceGetgistConfiguration {
    /**
     * API key to use. Find it in the Integration Settings on your Gist dashboard at https://app.getgist.com/projects/_/settings/api-key.
     */
    apiKey: string;
}

export interface SourceGetgistResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceGetgistResourceAllocationDefault;
    jobSpecifics: outputs.SourceGetgistResourceAllocationJobSpecific[];
}

export interface SourceGetgistResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceGetgistResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceGetgistResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceGetgistResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceGetlagoConfiguration {
    /**
     * Your API Key. See <a href="https://doc.getlago.com/docs/api/intro">here</a>.
     */
    apiKey: string;
    /**
     * Your Lago API URL. Default: "https://api.getlago.com/api/v1"
     */
    apiUrl: string;
}

export interface SourceGetlagoResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceGetlagoResourceAllocationDefault;
    jobSpecifics: outputs.SourceGetlagoResourceAllocationJobSpecific[];
}

export interface SourceGetlagoResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceGetlagoResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceGetlagoResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceGetlagoResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceGitbookConfiguration {
    /**
     * Personal access token for authenticating with the GitBook API. You can view and manage your access tokens in the Developer settings of your GitBook user account.
     */
    accessToken: string;
    spaceId: string;
}

export interface SourceGitbookResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceGitbookResourceAllocationDefault;
    jobSpecifics: outputs.SourceGitbookResourceAllocationJobSpecific[];
}

export interface SourceGitbookResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceGitbookResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceGitbookResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceGitbookResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceGithubConfiguration {
    /**
     * Please enter your basic URL from self-hosted GitHub instance or leave it empty to use GitHub. Default: "https://api.github.com/"
     */
    apiUrl: string;
    /**
     * List of GitHub repository branches to pull commits for, e.g. `airbytehq/airbyte/master`. If no branches are specified for a repository, the default branch will be pulled.
     */
    branches?: string[];
    /**
     * Choose how to authenticate to GitHub
     */
    credentials: outputs.SourceGithubConfigurationCredentials;
    /**
     * Max Waiting Time for rate limit. Set higher value to wait till rate limits will be resetted to continue sync. Default: 10
     */
    maxWaitingTime: number;
    /**
     * List of GitHub organizations/repositories, e.g. `airbytehq/airbyte` for single repository, `airbytehq/*` for get all repositories from organization and `airbytehq/a* for matching multiple repositories by pattern.
     */
    repositories: string[];
    /**
     * The date from which you'd like to replicate data from GitHub in the format YYYY-MM-DDT00:00:00Z. If the date is not set, all data will be replicated.  For the streams which support this configuration, only data generated on or after the start date will be replicated. This field doesn't apply to all streams, see the <a href="https://docs.airbyte.com/integrations/sources/github">docs</a> for more info
     */
    startDate?: string;
}

export interface SourceGithubConfigurationCredentials {
    oAuth?: outputs.SourceGithubConfigurationCredentialsOAuth;
    personalAccessToken?: outputs.SourceGithubConfigurationCredentialsPersonalAccessToken;
}

export interface SourceGithubConfigurationCredentialsOAuth {
    /**
     * OAuth access token
     */
    accessToken: string;
    /**
     * OAuth Client Id
     */
    clientId?: string;
    /**
     * OAuth Client secret
     */
    clientSecret?: string;
}

export interface SourceGithubConfigurationCredentialsPersonalAccessToken {
    /**
     * Log into GitHub and then generate a <a href="https://github.com/settings/tokens">personal access token</a>. To load balance your API quota consumption across multiple API tokens, input multiple tokens separated with ","
     */
    personalAccessToken: string;
}

export interface SourceGithubResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceGithubResourceAllocationDefault;
    jobSpecifics: outputs.SourceGithubResourceAllocationJobSpecific[];
}

export interface SourceGithubResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceGithubResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceGithubResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceGithubResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceGitlabConfiguration {
    /**
     * Please enter your basic URL from GitLab instance. Default: "gitlab.com"
     */
    apiUrl: string;
    credentials: outputs.SourceGitlabConfigurationCredentials;
    /**
     * List of groups. e.g. airbyte.io.
     */
    groupsLists?: string[];
    /**
     * Space-delimited list of projects. e.g. airbyte.io/documentation meltano/tap-gitlab.
     */
    projectsLists?: string[];
    /**
     * The date from which you'd like to replicate data for GitLab API, in the format YYYY-MM-DDT00:00:00Z. Optional. If not set, all data will be replicated. All data generated after this date will be replicated.
     */
    startDate?: string;
}

export interface SourceGitlabConfigurationCredentials {
    oAuth20?: outputs.SourceGitlabConfigurationCredentialsOAuth20;
    privateToken?: outputs.SourceGitlabConfigurationCredentialsPrivateToken;
}

export interface SourceGitlabConfigurationCredentialsOAuth20 {
    /**
     * Access Token for making authenticated requests.
     */
    accessToken: string;
    /**
     * The API ID of the Gitlab developer application.
     */
    clientId: string;
    /**
     * The API Secret the Gitlab developer application.
     */
    clientSecret: string;
    /**
     * The key to refresh the expired access_token.
     */
    refreshToken: string;
    /**
     * The date-time when the access token should be refreshed.
     */
    tokenExpiryDate: string;
}

export interface SourceGitlabConfigurationCredentialsPrivateToken {
    /**
     * Log into your Gitlab account and then generate a personal Access Token.
     */
    accessToken: string;
}

export interface SourceGitlabResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceGitlabResourceAllocationDefault;
    jobSpecifics: outputs.SourceGitlabResourceAllocationJobSpecific[];
}

export interface SourceGitlabResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceGitlabResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceGitlabResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceGitlabResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceGlassfrogConfiguration {
    /**
     * API key provided by Glassfrog
     */
    apiKey: string;
}

export interface SourceGlassfrogResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceGlassfrogResourceAllocationDefault;
    jobSpecifics: outputs.SourceGlassfrogResourceAllocationJobSpecific[];
}

export interface SourceGlassfrogResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceGlassfrogResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceGlassfrogResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceGlassfrogResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceGmailConfiguration {
    clientId: string;
    clientRefreshToken: string;
    clientSecret: string;
    /**
     * Include drafts/messages from SPAM and TRASH in the results. Defaults to false. Default: false
     */
    includeSpamAndTrash: boolean;
}

export interface SourceGmailResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceGmailResourceAllocationDefault;
    jobSpecifics: outputs.SourceGmailResourceAllocationJobSpecific[];
}

export interface SourceGmailResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceGmailResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceGmailResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceGmailResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceGnewsConfiguration {
    /**
     * API Key
     */
    apiKey: string;
    /**
     * This parameter allows you to specify the country where the news articles returned by the API were published, the contents of the articles are not necessarily related to the specified country. You have to set as value the 2 letters code of the country you want to filter. must be one of ["au", "br", "ca", "cn", "eg", "fr", "de", "gr", "hk", "in", "ie", "il", "it", "jp", "nl", "no", "pk", "pe", "ph", "pt", "ro", "ru", "sg", "es", "se", "ch", "tw", "ua", "gb", "us"]
     */
    country?: string;
    /**
     * This parameter allows you to filter the articles that have a publication date smaller than or equal to the  specified value. The date must respect the following format: YYYY-MM-DD hh:mm:ss (in UTC)
     */
    endDate?: string;
    /**
     * This parameter allows you to choose in which attributes the keywords are searched. The attributes that can be set are title, description and content. It is possible to combine several attributes.
     */
    ins?: string[];
    /**
     * must be one of ["ar", "zh", "nl", "en", "fr", "de", "el", "he", "hi", "it", "ja", "ml", "mr", "no", "pt", "ro", "ru", "es", "sv", "ta", "te", "uk"]
     */
    language?: string;
    /**
     * This parameter allows you to specify the attributes that you allow to return null values. The attributes that  can be set are title, description and content. It is possible to combine several attributes
     */
    nullables?: string[];
    /**
     * This parameter allows you to specify your search keywords to find the news articles you are looking for. The keywords will be used to return the most relevant articles. It is possible to use logical operators  with keywords. - Phrase Search Operator: This operator allows you to make an exact search. Keywords surrounded by 
     *   quotation marks are used to search for articles with the exact same keyword
     * sequence. 
     *   For example the query: "Apple iPhone" will return articles matching at
     * least once this sequence of keywords. - Logical AND Operator: This operator allows you to make sure that several keywords are all used in the article
     *   search. By default the space character acts as an AND operator, it is
     * possible to replace the space character 
     *   by AND to obtain the same result. For example the query: Apple Microsoft
     * is equivalent to Apple AND Microsoft - Logical OR Operator: This operator allows you to retrieve articles matching the keyword a or the keyword b.
     *   It is important to note that this operator has a higher precedence than
     * the AND operator. For example the 
     *   query: Apple OR Microsoft will return all articles matching the keyword
     * Apple as well as all articles matching 
     *   the keyword Microsoft
     * - Logical NOT Operator: This operator allows you to remove from the results the articles corresponding to the
     *   specified keywords. To use it, you need to add NOT in front of each word
     * or phrase surrounded by quotes.
     *   For example the query: Apple NOT iPhone will return all articles matching
     * the keyword Apple but not the keyword
     *   iPhone
     */
    query: string;
    /**
     * This parameter allows you to choose with which type of sorting the articles should be returned. Two values  are possible:
     *   - publishedAt = sort by publication date, the articles with the most recent
     * publication date are returned first
     *   - relevance = sort by best match to keywords, the articles with the best
     * match are returned first
     * must be one of ["publishedAt", "relevance"]
     */
    sortby?: string;
    /**
     * This parameter allows you to filter the articles that have a publication date greater than or equal to the  specified value. The date must respect the following format: YYYY-MM-DD hh:mm:ss (in UTC)
     */
    startDate?: string;
    /**
     * This parameter allows you to specify your search keywords to find the news articles you are looking for. The keywords will be used to return the most relevant articles. It is possible to use logical operators  with keywords. - Phrase Search Operator: This operator allows you to make an exact search. Keywords surrounded by 
     *   quotation marks are used to search for articles with the exact same keyword
     * sequence. 
     *   For example the query: "Apple iPhone" will return articles matching at
     * least once this sequence of keywords. - Logical AND Operator: This operator allows you to make sure that several keywords are all used in the article
     *   search. By default the space character acts as an AND operator, it is
     * possible to replace the space character 
     *   by AND to obtain the same result. For example the query: Apple Microsoft
     * is equivalent to Apple AND Microsoft - Logical OR Operator: This operator allows you to retrieve articles matching the keyword a or the keyword b.
     *   It is important to note that this operator has a higher precedence than
     * the AND operator. For example the 
     *   query: Apple OR Microsoft will return all articles matching the keyword
     * Apple as well as all articles matching 
     *   the keyword Microsoft
     * - Logical NOT Operator: This operator allows you to remove from the results the articles corresponding to the
     *   specified keywords. To use it, you need to add NOT in front of each word
     * or phrase surrounded by quotes.
     *   For example the query: Apple NOT iPhone will return all articles matching
     * the keyword Apple but not the keyword
     *   iPhone
     */
    topHeadlinesQuery?: string;
    /**
     * This parameter allows you to change the category for the request. must be one of ["breaking-news", "world", "nation", "business", "technology", "entertainment", "sports", "science", "health"]
     */
    topHeadlinesTopic?: string;
}

export interface SourceGnewsResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceGnewsResourceAllocationDefault;
    jobSpecifics: outputs.SourceGnewsResourceAllocationJobSpecific[];
}

export interface SourceGnewsResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceGnewsResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceGnewsResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceGnewsResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceGocardlessConfiguration {
    /**
     * Gocardless API TOKEN
     */
    accessToken: string;
    /**
     * Environment you are trying to connect to. Default: "sandbox"; must be one of ["sandbox", "live"]
     */
    gocardlessEnvironment: string;
    /**
     * GoCardless version. This is a date. You can find the latest here: 
     * https://developer.gocardless.com/api-reference/#api-usage-making-requests
     */
    gocardlessVersion: string;
    /**
     * UTC date and time in the format 2017-01-25T00:00:00Z. Any data
     * before this date will not be replicated.
     */
    startDate: string;
}

export interface SourceGocardlessResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceGocardlessResourceAllocationDefault;
    jobSpecifics: outputs.SourceGocardlessResourceAllocationJobSpecific[];
}

export interface SourceGocardlessResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceGocardlessResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceGocardlessResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceGocardlessResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceGoldcastConfiguration {
    /**
     * Your API Access Key. See <a href="https://help.goldcast.io/hc/en-us/articles/22931655725723-How-To-Create-an-API-Token-in-Goldcast">here</a>. The key is case sensitive.
     */
    accessKey: string;
}

export interface SourceGoldcastResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceGoldcastResourceAllocationDefault;
    jobSpecifics: outputs.SourceGoldcastResourceAllocationJobSpecific[];
}

export interface SourceGoldcastResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceGoldcastResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceGoldcastResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceGoldcastResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceGologinConfiguration {
    /**
     * API Key found at `https://app.gologin.com/personalArea/TokenApi`
     */
    apiKey: string;
    startDate: string;
}

export interface SourceGologinResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceGologinResourceAllocationDefault;
    jobSpecifics: outputs.SourceGologinResourceAllocationJobSpecific[];
}

export interface SourceGologinResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceGologinResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceGologinResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceGologinResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceGongConfiguration {
    /**
     * Gong Access Key
     */
    accessKey: string;
    /**
     * Gong Access Key Secret
     */
    accessKeySecret: string;
    /**
     * The date from which to list calls, in the ISO-8601 format; if not specified, the calls start with the earliest recorded call. For web-conference calls recorded by Gong, the date denotes its scheduled time, otherwise, it denotes its actual start time.
     */
    startDate?: string;
}

export interface SourceGongResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceGongResourceAllocationDefault;
    jobSpecifics: outputs.SourceGongResourceAllocationJobSpecific[];
}

export interface SourceGongResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceGongResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceGongResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceGongResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceGoogleAdsConfiguration {
    /**
     * A conversion window is the number of days after an ad interaction (such as an ad click or video view) during which a conversion, such as a purchase, is recorded in Google Ads. For more information, see <a href="https://support.google.com/google-ads/answer/3123169?hl=en">Google's documentation</a>. Default: 14
     */
    conversionWindowDays: number;
    credentials: outputs.SourceGoogleAdsConfigurationCredentials;
    customQueriesArrays?: outputs.SourceGoogleAdsConfigurationCustomQueriesArray[];
    /**
     * Comma-separated list of (client) customer IDs. Each customer ID must be specified as a 10-digit number without dashes. For detailed instructions on finding this value, refer to our <a href="https://docs.airbyte.com/integrations/sources/google-ads#setup-guide">documentation</a>.
     */
    customerId?: string;
    /**
     * A list of customer statuses to filter on. For detailed info about what each status mean refer to Google Ads <a href="https://developers.google.com/google-ads/api/reference/rpc/v15/CustomerStatusEnum.CustomerStatus">documentation</a>.
     */
    customerStatusFilters: string[];
    /**
     * UTC date in the format YYYY-MM-DD. Any data after this date will not be replicated. (Default value of today is used if not set)
     */
    endDate?: string;
    /**
     * UTC date in the format YYYY-MM-DD. Any data before this date will not be replicated. (Default value of two years ago is used if not set)
     */
    startDate?: string;
}

export interface SourceGoogleAdsConfigurationCredentials {
    /**
     * The Access Token for making authenticated requests. For detailed instructions on finding this value, refer to our <a href="https://docs.airbyte.com/integrations/sources/google-ads#setup-guide">documentation</a>.
     */
    accessToken?: string;
    /**
     * The Client ID of your Google Ads developer application. For detailed instructions on finding this value, refer to our <a href="https://docs.airbyte.com/integrations/sources/google-ads#setup-guide">documentation</a>.
     */
    clientId: string;
    /**
     * The Client Secret of your Google Ads developer application. For detailed instructions on finding this value, refer to our <a href="https://docs.airbyte.com/integrations/sources/google-ads#setup-guide">documentation</a>.
     */
    clientSecret: string;
    /**
     * The Developer Token granted by Google to use their APIs. For detailed instructions on finding this value, refer to our <a href="https://docs.airbyte.com/integrations/sources/google-ads#setup-guide">documentation</a>.
     */
    developerToken: string;
    /**
     * The token used to obtain a new Access Token. For detailed instructions on finding this value, refer to our <a href="https://docs.airbyte.com/integrations/sources/google-ads#setup-guide">documentation</a>.
     */
    refreshToken: string;
}

export interface SourceGoogleAdsConfigurationCustomQueriesArray {
    /**
     * A custom defined GAQL query for building the report. Avoid including the segments.date field; wherever possible, Airbyte will automatically include it for incremental syncs. For more information, refer to <a href="https://developers.google.com/google-ads/api/fields/v11/overview_query_builder">Google's documentation</a>.
     */
    query: string;
    /**
     * The table name in your destination database for the chosen query.
     */
    tableName: string;
}

export interface SourceGoogleAdsResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceGoogleAdsResourceAllocationDefault;
    jobSpecifics: outputs.SourceGoogleAdsResourceAllocationJobSpecific[];
}

export interface SourceGoogleAdsResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceGoogleAdsResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceGoogleAdsResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceGoogleAdsResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceGoogleAnalyticsDataApiConfiguration {
    /**
     * Enables conversion of `conversions:*` event metrics from integers to floats. This is beneficial for preventing data rounding when the API returns float values for any `conversions:*` fields. Default: false
     */
    convertConversionsEvent: boolean;
    /**
     * Credentials for the service
     */
    credentials?: outputs.SourceGoogleAnalyticsDataApiConfigurationCredentials;
    /**
     * You can add your Custom Analytics report by creating one.
     */
    customReportsArrays?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArray[];
    /**
     * The end date from which to replicate report data in the format YYYY-MM-DD. Data generated after this date will not be included in the report. Not applied to custom Cohort reports. When no date is provided or the date is in the future, the date from today is used.
     */
    dateRangesEndDate?: string;
    /**
     * The start date from which to replicate report data in the format YYYY-MM-DD. Data generated before this date will not be included in the report. Not applied to custom Cohort reports.
     */
    dateRangesStartDate?: string;
    /**
     * If false, each row with all metrics equal to 0 will not be returned. If true, these rows will be returned if they are not separately removed by a filter. More information is available in <a href="https://developers.google.com/analytics/devguides/reporting/data/v1/rest/v1beta/properties/runReport#request-body">the documentation</a>. Default: false
     */
    keepEmptyRows: boolean;
    /**
     * Since attribution changes after the event date, and Google Analytics has a data processing latency, we should specify how many days in the past we should refresh the data in every run. So if you set it at 5 days, in every sync it will fetch the last bookmark date minus 5 days. Default: 2
     */
    lookbackWindow: number;
    /**
     * A list of your Property IDs. The Property ID is a unique number assigned to each property in Google Analytics, found in your GA4 property URL. This ID allows the connector to track the specific events associated with your property. Refer to the <a href='https://developers.google.com/analytics/devguides/reporting/data/v1/property-id#what_is_my_property_id'>Google Analytics documentation</a> to locate your property ID.
     */
    propertyIds: string[];
    /**
     * The interval in days for each data request made to the Google Analytics API. A larger value speeds up data sync, but increases the chance of data sampling, which may result in inaccuracies. We recommend a value of 1 to minimize sampling, unless speed is an absolute priority over accuracy. Acceptable values range from 1 to 364. Does not apply to custom Cohort reports. More information is available in <a href="https://docs.airbyte.com/integrations/sources/google-analytics-data-api">the documentation</a>. Default: 1
     */
    windowInDays: number;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCredentials {
    authenticateViaGoogleOauth?: outputs.SourceGoogleAnalyticsDataApiConfigurationCredentialsAuthenticateViaGoogleOauth;
    serviceAccountKeyAuthentication?: outputs.SourceGoogleAnalyticsDataApiConfigurationCredentialsServiceAccountKeyAuthentication;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCredentialsAuthenticateViaGoogleOauth {
    /**
     * Access Token for making authenticated requests.
     */
    accessToken?: string;
    /**
     * The Client ID of your Google Analytics developer application.
     */
    clientId: string;
    /**
     * The Client Secret of your Google Analytics developer application.
     */
    clientSecret: string;
    /**
     * The token for obtaining a new access token.
     */
    refreshToken: string;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCredentialsServiceAccountKeyAuthentication {
    /**
     * The JSON key linked to the service account used for authorization. For steps on obtaining this key, refer to <a href="https://docs.airbyte.com/integrations/sources/google-analytics-data-api/#setup-guide">the setup guide</a>.
     */
    credentialsJson: string;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArray {
    /**
     * Cohort reports creates a time series of user retention for the cohort.
     */
    cohortSpec?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayCohortSpec;
    /**
     * Dimensions filter
     */
    dimensionFilter?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilter;
    /**
     * A list of dimensions.
     */
    dimensions: string[];
    /**
     * Metrics filter
     */
    metricFilter?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilter;
    /**
     * A list of metrics.
     */
    metrics: string[];
    /**
     * The name of the custom report, this name would be used as stream name.
     */
    name: string;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayCohortSpec {
    disabled?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayCohortSpecDisabled;
    enabled?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayCohortSpecEnabled;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayCohortSpecDisabled {
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayCohortSpecEnabled {
    /**
     * Optional settings for a cohort report.
     */
    cohortReportSettings?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayCohortSpecEnabledCohortReportSettings;
    cohorts?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayCohortSpecEnabledCohort[];
    cohortsRange?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayCohortSpecEnabledCohortsRange;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayCohortSpecEnabledCohort {
    dateRange: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayCohortSpecEnabledCohortDateRange;
    /**
     * Dimension used by the cohort. Required and only supports `firstSessionDate`. must be "firstSessionDate"
     */
    dimension: string;
    /**
     * Assigns a name to this cohort. If not set, cohorts are named by their zero based index cohort_0, cohort_1, etc.
     */
    name?: string;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayCohortSpecEnabledCohortDateRange {
    endDate: string;
    startDate: string;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayCohortSpecEnabledCohortReportSettings {
    /**
     * If true, accumulates the result from first touch day to the end day
     */
    accumulate?: boolean;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayCohortSpecEnabledCohortsRange {
    /**
     * Specifies the end date of the extended reporting date range for a cohort report.
     */
    endOffset: number;
    /**
     * The granularity used to interpret the startOffset and endOffset for the extended reporting date range for a cohort report. must be one of ["GRANULARITY_UNSPECIFIED", "DAILY", "WEEKLY", "MONTHLY"]
     */
    granularity: string;
    /**
     * Specifies the start date of the extended reporting date range for a cohort report.
     */
    startOffset?: number;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilter {
    /**
     * The FilterExpressions in andGroup have an AND relationship.
     */
    andGroup?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterAndGroup;
    /**
     * A primitive filter. In the same FilterExpression, all of the filter's field names need to be either all dimensions.
     */
    filter?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterFilter;
    /**
     * The FilterExpression is NOT of notExpression.
     */
    notExpression?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterNotExpression;
    /**
     * The FilterExpressions in orGroup have an OR relationship.
     */
    orGroup?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterOrGroup;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterAndGroup {
    expressions: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterAndGroupExpression[];
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterAndGroupExpression {
    fieldName: string;
    filter: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterAndGroupExpressionFilter;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterAndGroupExpressionFilter {
    betweenFilter?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterAndGroupExpressionFilterBetweenFilter;
    inListFilter?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterAndGroupExpressionFilterInListFilter;
    numericFilter?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterAndGroupExpressionFilterNumericFilter;
    stringFilter?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterAndGroupExpressionFilterStringFilter;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterAndGroupExpressionFilterBetweenFilter {
    fromValue: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterAndGroupExpressionFilterBetweenFilterFromValue;
    toValue: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterAndGroupExpressionFilterBetweenFilterToValue;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterAndGroupExpressionFilterBetweenFilterFromValue {
    doubleValue?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterAndGroupExpressionFilterBetweenFilterFromValueDoubleValue;
    int64Value?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterAndGroupExpressionFilterBetweenFilterFromValueInt64Value;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterAndGroupExpressionFilterBetweenFilterFromValueDoubleValue {
    value: number;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterAndGroupExpressionFilterBetweenFilterFromValueInt64Value {
    value: string;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterAndGroupExpressionFilterBetweenFilterToValue {
    doubleValue?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterAndGroupExpressionFilterBetweenFilterToValueDoubleValue;
    int64Value?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterAndGroupExpressionFilterBetweenFilterToValueInt64Value;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterAndGroupExpressionFilterBetweenFilterToValueDoubleValue {
    value: number;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterAndGroupExpressionFilterBetweenFilterToValueInt64Value {
    value: string;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterAndGroupExpressionFilterInListFilter {
    caseSensitive?: boolean;
    values: string[];
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterAndGroupExpressionFilterNumericFilter {
    operations: string[];
    value: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterAndGroupExpressionFilterNumericFilterValue;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterAndGroupExpressionFilterNumericFilterValue {
    doubleValue?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterAndGroupExpressionFilterNumericFilterValueDoubleValue;
    int64Value?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterAndGroupExpressionFilterNumericFilterValueInt64Value;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterAndGroupExpressionFilterNumericFilterValueDoubleValue {
    value: number;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterAndGroupExpressionFilterNumericFilterValueInt64Value {
    value: string;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterAndGroupExpressionFilterStringFilter {
    caseSensitive?: boolean;
    matchTypes?: string[];
    value: string;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterFilter {
    fieldName: string;
    filter: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterFilterFilter;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterFilterFilter {
    betweenFilter?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterFilterFilterBetweenFilter;
    inListFilter?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterFilterFilterInListFilter;
    numericFilter?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterFilterFilterNumericFilter;
    stringFilter?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterFilterFilterStringFilter;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterFilterFilterBetweenFilter {
    fromValue: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterFilterFilterBetweenFilterFromValue;
    toValue: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterFilterFilterBetweenFilterToValue;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterFilterFilterBetweenFilterFromValue {
    doubleValue?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterFilterFilterBetweenFilterFromValueDoubleValue;
    int64Value?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterFilterFilterBetweenFilterFromValueInt64Value;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterFilterFilterBetweenFilterFromValueDoubleValue {
    value: number;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterFilterFilterBetweenFilterFromValueInt64Value {
    value: string;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterFilterFilterBetweenFilterToValue {
    doubleValue?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterFilterFilterBetweenFilterToValueDoubleValue;
    int64Value?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterFilterFilterBetweenFilterToValueInt64Value;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterFilterFilterBetweenFilterToValueDoubleValue {
    value: number;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterFilterFilterBetweenFilterToValueInt64Value {
    value: string;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterFilterFilterInListFilter {
    caseSensitive?: boolean;
    values: string[];
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterFilterFilterNumericFilter {
    operations: string[];
    value: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterFilterFilterNumericFilterValue;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterFilterFilterNumericFilterValue {
    doubleValue?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterFilterFilterNumericFilterValueDoubleValue;
    int64Value?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterFilterFilterNumericFilterValueInt64Value;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterFilterFilterNumericFilterValueDoubleValue {
    value: number;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterFilterFilterNumericFilterValueInt64Value {
    value: string;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterFilterFilterStringFilter {
    caseSensitive?: boolean;
    matchTypes?: string[];
    value: string;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterNotExpression {
    expression?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterNotExpressionExpression;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterNotExpressionExpression {
    fieldName: string;
    filter: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterNotExpressionExpressionFilter;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterNotExpressionExpressionFilter {
    betweenFilter?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterNotExpressionExpressionFilterBetweenFilter;
    inListFilter?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterNotExpressionExpressionFilterInListFilter;
    numericFilter?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterNotExpressionExpressionFilterNumericFilter;
    stringFilter?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterNotExpressionExpressionFilterStringFilter;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterNotExpressionExpressionFilterBetweenFilter {
    fromValue: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterNotExpressionExpressionFilterBetweenFilterFromValue;
    toValue: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterNotExpressionExpressionFilterBetweenFilterToValue;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterNotExpressionExpressionFilterBetweenFilterFromValue {
    doubleValue?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterNotExpressionExpressionFilterBetweenFilterFromValueDoubleValue;
    int64Value?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterNotExpressionExpressionFilterBetweenFilterFromValueInt64Value;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterNotExpressionExpressionFilterBetweenFilterFromValueDoubleValue {
    value: number;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterNotExpressionExpressionFilterBetweenFilterFromValueInt64Value {
    value: string;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterNotExpressionExpressionFilterBetweenFilterToValue {
    doubleValue?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterNotExpressionExpressionFilterBetweenFilterToValueDoubleValue;
    int64Value?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterNotExpressionExpressionFilterBetweenFilterToValueInt64Value;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterNotExpressionExpressionFilterBetweenFilterToValueDoubleValue {
    value: number;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterNotExpressionExpressionFilterBetweenFilterToValueInt64Value {
    value: string;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterNotExpressionExpressionFilterInListFilter {
    caseSensitive?: boolean;
    values: string[];
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterNotExpressionExpressionFilterNumericFilter {
    operations: string[];
    value: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterNotExpressionExpressionFilterNumericFilterValue;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterNotExpressionExpressionFilterNumericFilterValue {
    doubleValue?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterNotExpressionExpressionFilterNumericFilterValueDoubleValue;
    int64Value?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterNotExpressionExpressionFilterNumericFilterValueInt64Value;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterNotExpressionExpressionFilterNumericFilterValueDoubleValue {
    value: number;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterNotExpressionExpressionFilterNumericFilterValueInt64Value {
    value: string;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterNotExpressionExpressionFilterStringFilter {
    caseSensitive?: boolean;
    matchTypes?: string[];
    value: string;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterOrGroup {
    expressions: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterOrGroupExpression[];
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterOrGroupExpression {
    fieldName: string;
    filter: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterOrGroupExpressionFilter;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterOrGroupExpressionFilter {
    betweenFilter?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterOrGroupExpressionFilterBetweenFilter;
    inListFilter?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterOrGroupExpressionFilterInListFilter;
    numericFilter?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterOrGroupExpressionFilterNumericFilter;
    stringFilter?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterOrGroupExpressionFilterStringFilter;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterOrGroupExpressionFilterBetweenFilter {
    fromValue: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterOrGroupExpressionFilterBetweenFilterFromValue;
    toValue: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterOrGroupExpressionFilterBetweenFilterToValue;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterOrGroupExpressionFilterBetweenFilterFromValue {
    doubleValue?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterOrGroupExpressionFilterBetweenFilterFromValueDoubleValue;
    int64Value?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterOrGroupExpressionFilterBetweenFilterFromValueInt64Value;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterOrGroupExpressionFilterBetweenFilterFromValueDoubleValue {
    value: number;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterOrGroupExpressionFilterBetweenFilterFromValueInt64Value {
    value: string;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterOrGroupExpressionFilterBetweenFilterToValue {
    doubleValue?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterOrGroupExpressionFilterBetweenFilterToValueDoubleValue;
    int64Value?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterOrGroupExpressionFilterBetweenFilterToValueInt64Value;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterOrGroupExpressionFilterBetweenFilterToValueDoubleValue {
    value: number;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterOrGroupExpressionFilterBetweenFilterToValueInt64Value {
    value: string;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterOrGroupExpressionFilterInListFilter {
    caseSensitive?: boolean;
    values: string[];
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterOrGroupExpressionFilterNumericFilter {
    operations: string[];
    value: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterOrGroupExpressionFilterNumericFilterValue;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterOrGroupExpressionFilterNumericFilterValue {
    doubleValue?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterOrGroupExpressionFilterNumericFilterValueDoubleValue;
    int64Value?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterOrGroupExpressionFilterNumericFilterValueInt64Value;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterOrGroupExpressionFilterNumericFilterValueDoubleValue {
    value: number;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterOrGroupExpressionFilterNumericFilterValueInt64Value {
    value: string;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayDimensionFilterOrGroupExpressionFilterStringFilter {
    caseSensitive?: boolean;
    matchTypes?: string[];
    value: string;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilter {
    /**
     * The FilterExpressions in andGroup have an AND relationship.
     */
    andGroup?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterAndGroup;
    /**
     * A primitive filter. In the same FilterExpression, all of the filter's field names need to be either all metrics.
     */
    filter?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterFilter;
    /**
     * The FilterExpression is NOT of notExpression.
     */
    notExpression?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterNotExpression;
    /**
     * The FilterExpressions in orGroup have an OR relationship.
     */
    orGroup?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterOrGroup;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterAndGroup {
    expressions: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterAndGroupExpression[];
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterAndGroupExpression {
    fieldName: string;
    filter: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterAndGroupExpressionFilter;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterAndGroupExpressionFilter {
    betweenFilter?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterAndGroupExpressionFilterBetweenFilter;
    inListFilter?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterAndGroupExpressionFilterInListFilter;
    numericFilter?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterAndGroupExpressionFilterNumericFilter;
    stringFilter?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterAndGroupExpressionFilterStringFilter;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterAndGroupExpressionFilterBetweenFilter {
    fromValue: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterAndGroupExpressionFilterBetweenFilterFromValue;
    toValue: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterAndGroupExpressionFilterBetweenFilterToValue;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterAndGroupExpressionFilterBetweenFilterFromValue {
    doubleValue?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterAndGroupExpressionFilterBetweenFilterFromValueDoubleValue;
    int64Value?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterAndGroupExpressionFilterBetweenFilterFromValueInt64Value;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterAndGroupExpressionFilterBetweenFilterFromValueDoubleValue {
    value: number;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterAndGroupExpressionFilterBetweenFilterFromValueInt64Value {
    value: string;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterAndGroupExpressionFilterBetweenFilterToValue {
    doubleValue?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterAndGroupExpressionFilterBetweenFilterToValueDoubleValue;
    int64Value?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterAndGroupExpressionFilterBetweenFilterToValueInt64Value;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterAndGroupExpressionFilterBetweenFilterToValueDoubleValue {
    value: number;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterAndGroupExpressionFilterBetweenFilterToValueInt64Value {
    value: string;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterAndGroupExpressionFilterInListFilter {
    caseSensitive?: boolean;
    values: string[];
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterAndGroupExpressionFilterNumericFilter {
    operations: string[];
    value: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterAndGroupExpressionFilterNumericFilterValue;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterAndGroupExpressionFilterNumericFilterValue {
    doubleValue?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterAndGroupExpressionFilterNumericFilterValueDoubleValue;
    int64Value?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterAndGroupExpressionFilterNumericFilterValueInt64Value;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterAndGroupExpressionFilterNumericFilterValueDoubleValue {
    value: number;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterAndGroupExpressionFilterNumericFilterValueInt64Value {
    value: string;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterAndGroupExpressionFilterStringFilter {
    caseSensitive?: boolean;
    matchTypes?: string[];
    value: string;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterFilter {
    fieldName: string;
    filter: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterFilterFilter;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterFilterFilter {
    betweenFilter?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterFilterFilterBetweenFilter;
    inListFilter?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterFilterFilterInListFilter;
    numericFilter?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterFilterFilterNumericFilter;
    stringFilter?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterFilterFilterStringFilter;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterFilterFilterBetweenFilter {
    fromValue: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterFilterFilterBetweenFilterFromValue;
    toValue: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterFilterFilterBetweenFilterToValue;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterFilterFilterBetweenFilterFromValue {
    doubleValue?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterFilterFilterBetweenFilterFromValueDoubleValue;
    int64Value?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterFilterFilterBetweenFilterFromValueInt64Value;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterFilterFilterBetweenFilterFromValueDoubleValue {
    value: number;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterFilterFilterBetweenFilterFromValueInt64Value {
    value: string;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterFilterFilterBetweenFilterToValue {
    doubleValue?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterFilterFilterBetweenFilterToValueDoubleValue;
    int64Value?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterFilterFilterBetweenFilterToValueInt64Value;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterFilterFilterBetweenFilterToValueDoubleValue {
    value: number;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterFilterFilterBetweenFilterToValueInt64Value {
    value: string;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterFilterFilterInListFilter {
    caseSensitive?: boolean;
    values: string[];
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterFilterFilterNumericFilter {
    operations: string[];
    value: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterFilterFilterNumericFilterValue;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterFilterFilterNumericFilterValue {
    doubleValue?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterFilterFilterNumericFilterValueDoubleValue;
    int64Value?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterFilterFilterNumericFilterValueInt64Value;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterFilterFilterNumericFilterValueDoubleValue {
    value: number;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterFilterFilterNumericFilterValueInt64Value {
    value: string;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterFilterFilterStringFilter {
    caseSensitive?: boolean;
    matchTypes?: string[];
    value: string;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterNotExpression {
    expression?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterNotExpressionExpression;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterNotExpressionExpression {
    fieldName: string;
    filter: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterNotExpressionExpressionFilter;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterNotExpressionExpressionFilter {
    betweenFilter?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterNotExpressionExpressionFilterBetweenFilter;
    inListFilter?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterNotExpressionExpressionFilterInListFilter;
    numericFilter?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterNotExpressionExpressionFilterNumericFilter;
    stringFilter?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterNotExpressionExpressionFilterStringFilter;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterNotExpressionExpressionFilterBetweenFilter {
    fromValue: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterNotExpressionExpressionFilterBetweenFilterFromValue;
    toValue: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterNotExpressionExpressionFilterBetweenFilterToValue;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterNotExpressionExpressionFilterBetweenFilterFromValue {
    doubleValue?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterNotExpressionExpressionFilterBetweenFilterFromValueDoubleValue;
    int64Value?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterNotExpressionExpressionFilterBetweenFilterFromValueInt64Value;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterNotExpressionExpressionFilterBetweenFilterFromValueDoubleValue {
    value: number;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterNotExpressionExpressionFilterBetweenFilterFromValueInt64Value {
    value: string;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterNotExpressionExpressionFilterBetweenFilterToValue {
    doubleValue?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterNotExpressionExpressionFilterBetweenFilterToValueDoubleValue;
    int64Value?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterNotExpressionExpressionFilterBetweenFilterToValueInt64Value;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterNotExpressionExpressionFilterBetweenFilterToValueDoubleValue {
    value: number;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterNotExpressionExpressionFilterBetweenFilterToValueInt64Value {
    value: string;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterNotExpressionExpressionFilterInListFilter {
    caseSensitive?: boolean;
    values: string[];
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterNotExpressionExpressionFilterNumericFilter {
    operations: string[];
    value: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterNotExpressionExpressionFilterNumericFilterValue;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterNotExpressionExpressionFilterNumericFilterValue {
    doubleValue?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterNotExpressionExpressionFilterNumericFilterValueDoubleValue;
    int64Value?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterNotExpressionExpressionFilterNumericFilterValueInt64Value;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterNotExpressionExpressionFilterNumericFilterValueDoubleValue {
    value: number;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterNotExpressionExpressionFilterNumericFilterValueInt64Value {
    value: string;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterNotExpressionExpressionFilterStringFilter {
    caseSensitive?: boolean;
    matchTypes?: string[];
    value: string;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterOrGroup {
    expressions: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterOrGroupExpression[];
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterOrGroupExpression {
    fieldName: string;
    filter: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterOrGroupExpressionFilter;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterOrGroupExpressionFilter {
    betweenFilter?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterOrGroupExpressionFilterBetweenFilter;
    inListFilter?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterOrGroupExpressionFilterInListFilter;
    numericFilter?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterOrGroupExpressionFilterNumericFilter;
    stringFilter?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterOrGroupExpressionFilterStringFilter;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterOrGroupExpressionFilterBetweenFilter {
    fromValue: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterOrGroupExpressionFilterBetweenFilterFromValue;
    toValue: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterOrGroupExpressionFilterBetweenFilterToValue;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterOrGroupExpressionFilterBetweenFilterFromValue {
    doubleValue?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterOrGroupExpressionFilterBetweenFilterFromValueDoubleValue;
    int64Value?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterOrGroupExpressionFilterBetweenFilterFromValueInt64Value;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterOrGroupExpressionFilterBetweenFilterFromValueDoubleValue {
    value: number;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterOrGroupExpressionFilterBetweenFilterFromValueInt64Value {
    value: string;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterOrGroupExpressionFilterBetweenFilterToValue {
    doubleValue?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterOrGroupExpressionFilterBetweenFilterToValueDoubleValue;
    int64Value?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterOrGroupExpressionFilterBetweenFilterToValueInt64Value;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterOrGroupExpressionFilterBetweenFilterToValueDoubleValue {
    value: number;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterOrGroupExpressionFilterBetweenFilterToValueInt64Value {
    value: string;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterOrGroupExpressionFilterInListFilter {
    caseSensitive?: boolean;
    values: string[];
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterOrGroupExpressionFilterNumericFilter {
    operations: string[];
    value: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterOrGroupExpressionFilterNumericFilterValue;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterOrGroupExpressionFilterNumericFilterValue {
    doubleValue?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterOrGroupExpressionFilterNumericFilterValueDoubleValue;
    int64Value?: outputs.SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterOrGroupExpressionFilterNumericFilterValueInt64Value;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterOrGroupExpressionFilterNumericFilterValueDoubleValue {
    value: number;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterOrGroupExpressionFilterNumericFilterValueInt64Value {
    value: string;
}

export interface SourceGoogleAnalyticsDataApiConfigurationCustomReportsArrayMetricFilterOrGroupExpressionFilterStringFilter {
    caseSensitive?: boolean;
    matchTypes?: string[];
    value: string;
}

export interface SourceGoogleAnalyticsDataApiResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceGoogleAnalyticsDataApiResourceAllocationDefault;
    jobSpecifics: outputs.SourceGoogleAnalyticsDataApiResourceAllocationJobSpecific[];
}

export interface SourceGoogleAnalyticsDataApiResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceGoogleAnalyticsDataApiResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceGoogleAnalyticsDataApiResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceGoogleAnalyticsDataApiResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceGoogleCalendarConfiguration {
    calendarid: string;
    clientId: string;
    clientRefreshToken2: string;
    clientSecret: string;
}

export interface SourceGoogleCalendarResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceGoogleCalendarResourceAllocationDefault;
    jobSpecifics: outputs.SourceGoogleCalendarResourceAllocationJobSpecific[];
}

export interface SourceGoogleCalendarResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceGoogleCalendarResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceGoogleCalendarResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceGoogleCalendarResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceGoogleClassroomConfiguration {
    clientId: string;
    clientRefreshToken: string;
    clientSecret: string;
}

export interface SourceGoogleClassroomResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceGoogleClassroomResourceAllocationDefault;
    jobSpecifics: outputs.SourceGoogleClassroomResourceAllocationJobSpecific[];
}

export interface SourceGoogleClassroomResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceGoogleClassroomResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceGoogleClassroomResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceGoogleClassroomResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceGoogleDirectoryConfiguration {
    /**
     * Google APIs use the OAuth 2.0 protocol for authentication and authorization. The Source supports <a href="https://developers.google.com/identity/protocols/oauth2#webserver" target="_blank">Web server application</a> and <a href="https://developers.google.com/identity/protocols/oauth2#serviceaccount" target="_blank">Service accounts</a> scenarios.
     */
    credentials?: outputs.SourceGoogleDirectoryConfigurationCredentials;
}

export interface SourceGoogleDirectoryConfigurationCredentials {
    /**
     * For these scenario user should obtain service account's credentials from the Google API Console and provide delegated email.
     */
    serviceAccountKey?: outputs.SourceGoogleDirectoryConfigurationCredentialsServiceAccountKey;
    /**
     * For these scenario user only needs to give permission to read Google Directory data.
     */
    signInViaGoogleOAuth?: outputs.SourceGoogleDirectoryConfigurationCredentialsSignInViaGoogleOAuth;
}

export interface SourceGoogleDirectoryConfigurationCredentialsServiceAccountKey {
    /**
     * The contents of the JSON service account key. See the <a href="https://developers.google.com/admin-sdk/directory/v1/guides/delegation">docs</a> for more information on how to generate this key.
     */
    credentialsJson: string;
    /**
     * The email of the user, which has permissions to access the Google Workspace Admin APIs.
     */
    email: string;
}

export interface SourceGoogleDirectoryConfigurationCredentialsSignInViaGoogleOAuth {
    /**
     * The Client ID of the developer application.
     */
    clientId: string;
    /**
     * The Client Secret of the developer application.
     */
    clientSecret: string;
    /**
     * The Token for obtaining a new access token.
     */
    refreshToken: string;
}

export interface SourceGoogleDirectoryResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceGoogleDirectoryResourceAllocationDefault;
    jobSpecifics: outputs.SourceGoogleDirectoryResourceAllocationJobSpecific[];
}

export interface SourceGoogleDirectoryResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceGoogleDirectoryResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceGoogleDirectoryResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceGoogleDirectoryResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceGoogleDriveConfiguration {
    /**
     * Credentials for connecting to the Google Drive API
     */
    credentials: outputs.SourceGoogleDriveConfigurationCredentials;
    deliveryMethod?: outputs.SourceGoogleDriveConfigurationDeliveryMethod;
    /**
     * URL for the folder you want to sync. Using individual streams and glob patterns, it's possible to only sync a subset of all files located in the folder.
     */
    folderUrl: string;
    /**
     * UTC date and time in the format 2017-01-25T00:00:00.000000Z. Any file modified before this date will not be replicated.
     */
    startDate?: string;
    /**
     * Each instance of this configuration defines a <a href="https://docs.airbyte.com/cloud/core-concepts#stream">stream</a>. Use this to define which files belong in the stream, their format, and how they should be parsed and validated. When sending data to warehouse destination such as Snowflake or BigQuery, each stream is a separate table.
     */
    streams: outputs.SourceGoogleDriveConfigurationStream[];
}

export interface SourceGoogleDriveConfigurationCredentials {
    authenticateViaGoogleOAuth?: outputs.SourceGoogleDriveConfigurationCredentialsAuthenticateViaGoogleOAuth;
    serviceAccountKeyAuthentication?: outputs.SourceGoogleDriveConfigurationCredentialsServiceAccountKeyAuthentication;
}

export interface SourceGoogleDriveConfigurationCredentialsAuthenticateViaGoogleOAuth {
    /**
     * Client ID for the Google Drive API
     */
    clientId: string;
    /**
     * Client Secret for the Google Drive API
     */
    clientSecret: string;
    /**
     * Refresh Token for the Google Drive API
     */
    refreshToken: string;
}

export interface SourceGoogleDriveConfigurationCredentialsServiceAccountKeyAuthentication {
    /**
     * The JSON key of the service account to use for authorization. Read more <a href="https://cloud.google.com/iam/docs/creating-managing-service-account-keys#creating_service_account_keys">here</a>.
     */
    serviceAccountInfo: string;
}

export interface SourceGoogleDriveConfigurationDeliveryMethod {
    /**
     * Copy raw files without parsing their contents. Bits are copied into the destination exactly as they appeared in the source. Recommended for use with unstructured text data, non-text and compressed files.
     */
    copyRawFiles?: outputs.SourceGoogleDriveConfigurationDeliveryMethodCopyRawFiles;
    /**
     * Sends one identity stream and one for more permissions (ACL) streams to the destination. This data can be used in downstream systems to recreate permission restrictions mirroring the original source.
     */
    replicatePermissionsAcl?: outputs.SourceGoogleDriveConfigurationDeliveryMethodReplicatePermissionsAcl;
    /**
     * Recommended - Extract and load structured records into your destination of choice. This is the classic method of moving data in Airbyte. It allows for blocking and hashing individual fields or files from a structured schema. Data can be flattened, typed and deduped depending on the destination.
     */
    replicateRecords?: outputs.SourceGoogleDriveConfigurationDeliveryMethodReplicateRecords;
}

export interface SourceGoogleDriveConfigurationDeliveryMethodCopyRawFiles {
    /**
     * If enabled, sends subdirectory folder structure along with source file names to the destination. Otherwise, files will be synced by their names only. This option is ignored when file-based replication is not enabled. Default: true
     */
    preserveDirectoryStructure: boolean;
}

export interface SourceGoogleDriveConfigurationDeliveryMethodReplicatePermissionsAcl {
    /**
     * The Google domain of the identities.
     */
    domain?: string;
    /**
     * This data can be used in downstream systems to recreate permission restrictions mirroring the original source. Default: true
     */
    includeIdentitiesStream: boolean;
}

export interface SourceGoogleDriveConfigurationDeliveryMethodReplicateRecords {
}

export interface SourceGoogleDriveConfigurationStream {
    /**
     * When the state history of the file store is full, syncs will only read files that were last modified in the provided day range. Default: 3
     */
    daysToSyncIfHistoryIsFull: number;
    /**
     * The configuration options that are used to alter how to read incoming files that deviate from the standard formatting.
     */
    format: outputs.SourceGoogleDriveConfigurationStreamFormat;
    /**
     * The pattern used to specify which files should be selected from the file system. For more information on glob pattern matching look <a href="https://en.wikipedia.org/wiki/Glob_(programming)">here</a>.
     */
    globs?: string[];
    /**
     * The schema that will be used to validate records extracted from the file. This will override the stream schema that is auto-detected from incoming files.
     */
    inputSchema?: string;
    /**
     * The name of the stream.
     */
    name: string;
    /**
     * The number of resent files which will be used to discover the schema for this stream.
     */
    recentNFilesToReadForSchemaDiscovery?: number;
    /**
     * When enabled, syncs will not validate or structure records against the stream's schema. Default: false
     */
    schemaless: boolean;
    /**
     * The name of the validation policy that dictates sync behavior when a record does not adhere to the stream schema. Default: "Emit Record"; must be one of ["Emit Record", "Skip Record", "Wait for Discover"]
     */
    validationPolicy: string;
}

export interface SourceGoogleDriveConfigurationStreamFormat {
    avroFormat?: outputs.SourceGoogleDriveConfigurationStreamFormatAvroFormat;
    csvFormat?: outputs.SourceGoogleDriveConfigurationStreamFormatCsvFormat;
    excelFormat?: outputs.SourceGoogleDriveConfigurationStreamFormatExcelFormat;
    jsonlFormat?: outputs.SourceGoogleDriveConfigurationStreamFormatJsonlFormat;
    parquetFormat?: outputs.SourceGoogleDriveConfigurationStreamFormatParquetFormat;
    /**
     * Extract text from document formats (.pdf, .docx, .md, .pptx) and emit as one record per file.
     */
    unstructuredDocumentFormat?: outputs.SourceGoogleDriveConfigurationStreamFormatUnstructuredDocumentFormat;
}

export interface SourceGoogleDriveConfigurationStreamFormatAvroFormat {
    /**
     * Whether to convert double fields to strings. This is recommended if you have decimal numbers with a high degree of precision because there can be a loss precision when handling floating point numbers. Default: false
     */
    doubleAsString: boolean;
}

export interface SourceGoogleDriveConfigurationStreamFormatCsvFormat {
    /**
     * The character delimiting individual cells in the CSV data. This may only be a 1-character string. For tab-delimited data enter '\t'. Default: ","
     */
    delimiter: string;
    /**
     * Whether two quotes in a quoted CSV value denote a single quote in the data. Default: true
     */
    doubleQuote: boolean;
    /**
     * The character encoding of the CSV data. Leave blank to default to <strong>UTF8</strong>. See <a href="https://docs.python.org/3/library/codecs.html#standard-encodings" target="_blank">list of python encodings</a> for allowable options. Default: "utf8"
     */
    encoding: string;
    /**
     * The character used for escaping special characters. To disallow escaping, leave this field blank.
     */
    escapeChar?: string;
    /**
     * A set of case-sensitive strings that should be interpreted as false values.
     */
    falseValues?: string[];
    /**
     * How headers will be defined. `User Provided` assumes the CSV does not have a header row and uses the headers provided and `Autogenerated` assumes the CSV does not have a header row and the CDK will generate headers using for `f{i}` where `i` is the index starting from 0. Else, the default behavior is to use the header from the CSV file. If a user wants to autogenerate or provide column names for a CSV having headers, they can skip rows.
     */
    headerDefinition?: outputs.SourceGoogleDriveConfigurationStreamFormatCsvFormatHeaderDefinition;
    /**
     * Whether to ignore errors that occur when the number of fields in the CSV does not match the number of columns in the schema. Default: false
     */
    ignoreErrorsOnFieldsMismatch: boolean;
    /**
     * A set of case-sensitive strings that should be interpreted as null values. For example, if the value 'NA' should be interpreted as null, enter 'NA' in this field.
     */
    nullValues: string[];
    /**
     * The character used for quoting CSV values. To disallow quoting, make this field blank. Default: "\""
     */
    quoteChar: string;
    /**
     * The number of rows to skip after the header row. Default: 0
     */
    skipRowsAfterHeader: number;
    /**
     * The number of rows to skip before the header row. For example, if the header row is on the 3rd row, enter 2 in this field. Default: 0
     */
    skipRowsBeforeHeader: number;
    /**
     * Whether strings can be interpreted as null values. If true, strings that match the null_values set will be interpreted as null. If false, strings that match the null_values set will be interpreted as the string itself. Default: true
     */
    stringsCanBeNull: boolean;
    /**
     * A set of case-sensitive strings that should be interpreted as true values.
     */
    trueValues?: string[];
}

export interface SourceGoogleDriveConfigurationStreamFormatCsvFormatHeaderDefinition {
    autogenerated?: outputs.SourceGoogleDriveConfigurationStreamFormatCsvFormatHeaderDefinitionAutogenerated;
    fromCsv?: outputs.SourceGoogleDriveConfigurationStreamFormatCsvFormatHeaderDefinitionFromCsv;
    userProvided?: outputs.SourceGoogleDriveConfigurationStreamFormatCsvFormatHeaderDefinitionUserProvided;
}

export interface SourceGoogleDriveConfigurationStreamFormatCsvFormatHeaderDefinitionAutogenerated {
}

export interface SourceGoogleDriveConfigurationStreamFormatCsvFormatHeaderDefinitionFromCsv {
}

export interface SourceGoogleDriveConfigurationStreamFormatCsvFormatHeaderDefinitionUserProvided {
    /**
     * The column names that will be used while emitting the CSV records
     */
    columnNames: string[];
}

export interface SourceGoogleDriveConfigurationStreamFormatExcelFormat {
}

export interface SourceGoogleDriveConfigurationStreamFormatJsonlFormat {
}

export interface SourceGoogleDriveConfigurationStreamFormatParquetFormat {
    /**
     * Whether to convert decimal fields to floats. There is a loss of precision when converting decimals to floats, so this is not recommended. Default: false
     */
    decimalAsFloat: boolean;
}

export interface SourceGoogleDriveConfigurationStreamFormatUnstructuredDocumentFormat {
    /**
     * Processing configuration
     */
    processing?: outputs.SourceGoogleDriveConfigurationStreamFormatUnstructuredDocumentFormatProcessing;
    /**
     * If true, skip files that cannot be parsed and pass the error message along as the _ab_source_file_parse_error field. If false, fail the sync. Default: true
     */
    skipUnprocessableFiles: boolean;
    /**
     * The strategy used to parse documents. `fast` extracts text directly from the document which doesn't work for all files. `ocr_only` is more reliable, but slower. `hi_res` is the most reliable, but requires an API key and a hosted instance of unstructured and can't be used with local mode. See the unstructured.io documentation for more details: https://unstructured-io.github.io/unstructured/core/partition.html#partition-pdf. Default: "auto"; must be one of ["auto", "fast", "ocr_only", "hi_res"]
     */
    strategy: string;
}

export interface SourceGoogleDriveConfigurationStreamFormatUnstructuredDocumentFormatProcessing {
    /**
     * Process files locally, supporting `fast` and `ocr` modes. This is the default option.
     */
    local?: outputs.SourceGoogleDriveConfigurationStreamFormatUnstructuredDocumentFormatProcessingLocal;
}

export interface SourceGoogleDriveConfigurationStreamFormatUnstructuredDocumentFormatProcessingLocal {
}

export interface SourceGoogleDriveResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceGoogleDriveResourceAllocationDefault;
    jobSpecifics: outputs.SourceGoogleDriveResourceAllocationJobSpecific[];
}

export interface SourceGoogleDriveResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceGoogleDriveResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceGoogleDriveResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceGoogleDriveResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceGoogleFormsConfiguration {
    clientId: string;
    clientRefreshToken: string;
    clientSecret: string;
    formIds: string[];
}

export interface SourceGoogleFormsResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceGoogleFormsResourceAllocationDefault;
    jobSpecifics: outputs.SourceGoogleFormsResourceAllocationJobSpecific[];
}

export interface SourceGoogleFormsResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceGoogleFormsResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceGoogleFormsResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceGoogleFormsResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceGooglePagespeedInsightsConfiguration {
    /**
     * Google PageSpeed API Key. See <a href="https://developers.google.com/speed/docs/insights/v5/get-started#APIKey">here</a>. The key is optional - however the API is heavily rate limited when using without API Key. Creating and using the API key therefore is recommended. The key is case sensitive.
     */
    apiKey?: string;
    /**
     * Defines which Lighthouse category to run. One or many of: "accessibility", "best-practices", "performance", "pwa", "seo".
     */
    categories: string[];
    /**
     * The analyses strategy to use. Either "desktop" or "mobile".
     */
    strategies: string[];
    /**
     * The URLs to retrieve pagespeed information from. The connector will attempt to sync PageSpeed reports for all the defined URLs. Format: https://(www.)url.domain
     */
    urls: string[];
}

export interface SourceGooglePagespeedInsightsResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceGooglePagespeedInsightsResourceAllocationDefault;
    jobSpecifics: outputs.SourceGooglePagespeedInsightsResourceAllocationJobSpecific[];
}

export interface SourceGooglePagespeedInsightsResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceGooglePagespeedInsightsResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceGooglePagespeedInsightsResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceGooglePagespeedInsightsResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceGoogleSearchConsoleConfiguration {
    authorization: outputs.SourceGoogleSearchConsoleConfigurationAuthorization;
    /**
     * You can add your Custom Analytics report by creating one.
     */
    customReportsArrays?: outputs.SourceGoogleSearchConsoleConfigurationCustomReportsArray[];
    /**
     * If set to 'final', the returned data will include only finalized, stable data. If set to 'all', fresh data will be included. When using Incremental sync mode, we do not recommend setting this parameter to 'all' as it may cause data loss. More information can be found in our <a href='https://docs.airbyte.com/integrations/source/google-search-console'>full documentation</a>. Default: "final"; must be one of ["final", "all"]
     */
    dataState: string;
    /**
     * UTC date in the format YYYY-MM-DD. Any data created after this date will not be replicated. Must be greater or equal to the start date field. Leaving this field blank will replicate all data from the start date onward.
     */
    endDate?: string;
    /**
     * The URLs of the website property attached to your GSC account. Learn more about properties <a href="https://support.google.com/webmasters/answer/34592?hl=en">here</a>.
     */
    siteUrls: string[];
    /**
     * UTC date in the format YYYY-MM-DD. Any data before this date will not be replicated. Default: "2021-01-01"
     */
    startDate: string;
}

export interface SourceGoogleSearchConsoleConfigurationAuthorization {
    oAuth?: outputs.SourceGoogleSearchConsoleConfigurationAuthorizationOAuth;
    serviceAccountKeyAuthentication?: outputs.SourceGoogleSearchConsoleConfigurationAuthorizationServiceAccountKeyAuthentication;
}

export interface SourceGoogleSearchConsoleConfigurationAuthorizationOAuth {
    /**
     * Access token for making authenticated requests. Read more <a href="https://developers.google.com/webmaster-tools/v1/how-tos/authorizing">here</a>.
     */
    accessToken?: string;
    /**
     * The client ID of your Google Search Console developer application. Read more <a href="https://developers.google.com/webmaster-tools/v1/how-tos/authorizing">here</a>.
     */
    clientId: string;
    /**
     * The client secret of your Google Search Console developer application. Read more <a href="https://developers.google.com/webmaster-tools/v1/how-tos/authorizing">here</a>.
     */
    clientSecret: string;
    /**
     * The token for obtaining a new access token. Read more <a href="https://developers.google.com/webmaster-tools/v1/how-tos/authorizing">here</a>.
     */
    refreshToken: string;
}

export interface SourceGoogleSearchConsoleConfigurationAuthorizationServiceAccountKeyAuthentication {
    /**
     * The email of the user which has permissions to access the Google Workspace Admin APIs.
     */
    email: string;
    /**
     * The JSON key of the service account to use for authorization. Read more <a href="https://cloud.google.com/iam/docs/creating-managing-service-account-keys">here</a>.
     */
    serviceAccountInfo: string;
}

export interface SourceGoogleSearchConsoleConfigurationCustomReportsArray {
    /**
     * A list of available dimensions. Please note, that for technical reasons `date` is the default dimension which will be included in your query whether you specify it or not. Primary key will consist of your custom dimensions and the default dimension along with `site_url` and `search_type`.
     */
    dimensions?: string[];
    /**
     * The name of the custom report, this name would be used as stream name
     */
    name: string;
}

export interface SourceGoogleSearchConsoleResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceGoogleSearchConsoleResourceAllocationDefault;
    jobSpecifics: outputs.SourceGoogleSearchConsoleResourceAllocationJobSpecific[];
}

export interface SourceGoogleSearchConsoleResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceGoogleSearchConsoleResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceGoogleSearchConsoleResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceGoogleSearchConsoleResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceGoogleSheetsConfiguration {
    /**
     * Default value is 1000000. An integer representing row batch size for each sent request to Google Sheets API. Row batch size means how many rows are processed from the google sheet, for example default value 1000000 would process rows 2-1000002, then 1000003-2000003 and so on. Based on <a href='https://developers.google.com/sheets/api/limits'>Google Sheets API limits documentation</a>, it is possible to send up to 300 requests per minute, but each individual request has to be processed under 180 seconds, otherwise the request returns a timeout error. In regards to this information, consider network speed and number of columns of the google sheet when deciding a batch_size value. Default: 1000000
     */
    batchSize: number;
    /**
     * Credentials for connecting to the Google Sheets API
     */
    credentials: outputs.SourceGoogleSheetsConfigurationCredentials;
    /**
     * Enables the conversion of column names to a standardized, SQL-compliant format. For example, 'My Name' > 'my_name'. Enable this option if your destination is SQL-based. Default: false
     */
    namesConversion: boolean;
    /**
     * Enter the link to the Google spreadsheet you want to sync. To copy the link, click the 'Share' button in the top-right corner of the spreadsheet, then click 'Copy link'.
     */
    spreadsheetId: string;
}

export interface SourceGoogleSheetsConfigurationCredentials {
    authenticateViaGoogleOAuth?: outputs.SourceGoogleSheetsConfigurationCredentialsAuthenticateViaGoogleOAuth;
    serviceAccountKeyAuthentication?: outputs.SourceGoogleSheetsConfigurationCredentialsServiceAccountKeyAuthentication;
}

export interface SourceGoogleSheetsConfigurationCredentialsAuthenticateViaGoogleOAuth {
    /**
     * Enter your Google application's Client ID. See <a href='https://developers.google.com/identity/protocols/oauth2'>Google's documentation</a> for more information.
     */
    clientId: string;
    /**
     * Enter your Google application's Client Secret. See <a href='https://developers.google.com/identity/protocols/oauth2'>Google's documentation</a> for more information.
     */
    clientSecret: string;
    /**
     * Enter your Google application's refresh token. See <a href='https://developers.google.com/identity/protocols/oauth2'>Google's documentation</a> for more information.
     */
    refreshToken: string;
}

export interface SourceGoogleSheetsConfigurationCredentialsServiceAccountKeyAuthentication {
    /**
     * The JSON key of the service account to use for authorization. Read more <a href="https://cloud.google.com/iam/docs/creating-managing-service-account-keys#creating_service_account_keys">here</a>.
     */
    serviceAccountInfo: string;
}

export interface SourceGoogleSheetsResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceGoogleSheetsResourceAllocationDefault;
    jobSpecifics: outputs.SourceGoogleSheetsResourceAllocationJobSpecific[];
}

export interface SourceGoogleSheetsResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceGoogleSheetsResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceGoogleSheetsResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceGoogleSheetsResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceGoogleTasksConfiguration {
    apiKey: string;
    /**
     * The maximum number of records to be returned per request. Default: "50"
     */
    recordsLimit: string;
    startDate: string;
}

export interface SourceGoogleTasksResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceGoogleTasksResourceAllocationDefault;
    jobSpecifics: outputs.SourceGoogleTasksResourceAllocationJobSpecific[];
}

export interface SourceGoogleTasksResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceGoogleTasksResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceGoogleTasksResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceGoogleTasksResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceGoogleWebfontsConfiguration {
    /**
     * Optional, Available params- json, media, proto
     */
    alt?: string;
    /**
     * API key is required to access google apis, For getting your's goto google console and generate api key for Webfonts
     */
    apiKey: string;
    /**
     * Optional, boolean type
     */
    prettyPrint?: string;
    /**
     * Optional, to find how to sort
     */
    sort?: string;
}

export interface SourceGoogleWebfontsResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceGoogleWebfontsResourceAllocationDefault;
    jobSpecifics: outputs.SourceGoogleWebfontsResourceAllocationJobSpecific[];
}

export interface SourceGoogleWebfontsResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceGoogleWebfontsResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceGoogleWebfontsResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceGoogleWebfontsResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceGorgiasConfiguration {
    /**
     * Domain name given for gorgias, found as your url prefix for accessing your website
     */
    domainName: string;
    password?: string;
    startDate: string;
    username: string;
}

export interface SourceGorgiasResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceGorgiasResourceAllocationDefault;
    jobSpecifics: outputs.SourceGorgiasResourceAllocationJobSpecific[];
}

export interface SourceGorgiasResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceGorgiasResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceGorgiasResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceGorgiasResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceGreenhouseConfiguration {
    /**
     * Greenhouse API Key. See the <a href="https://docs.airbyte.com/integrations/sources/greenhouse">docs</a> for more information on how to generate this key.
     */
    apiKey: string;
}

export interface SourceGreenhouseResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceGreenhouseResourceAllocationDefault;
    jobSpecifics: outputs.SourceGreenhouseResourceAllocationJobSpecific[];
}

export interface SourceGreenhouseResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceGreenhouseResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceGreenhouseResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceGreenhouseResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceGreythrConfiguration {
    /**
     * https://api.greythr.com
     */
    baseUrl: string;
    /**
     * Your GreytHR Host URL
     */
    domain: string;
    password?: string;
    username: string;
}

export interface SourceGreythrResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceGreythrResourceAllocationDefault;
    jobSpecifics: outputs.SourceGreythrResourceAllocationJobSpecific[];
}

export interface SourceGreythrResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceGreythrResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceGreythrResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceGreythrResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceGridlyConfiguration {
    apiKey: string;
    /**
     * ID of a grid, or can be ID of a branch
     */
    gridId: string;
}

export interface SourceGridlyResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceGridlyResourceAllocationDefault;
    jobSpecifics: outputs.SourceGridlyResourceAllocationJobSpecific[];
}

export interface SourceGridlyResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceGridlyResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceGridlyResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceGridlyResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceGuruConfiguration {
    password?: string;
    /**
     * Query for searching cards
     */
    searchCardsQuery?: string;
    startDate: string;
    /**
     * Team ID received through response of /teams streams, make sure about access to the team
     */
    teamId?: string;
    username: string;
}

export interface SourceGuruResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceGuruResourceAllocationDefault;
    jobSpecifics: outputs.SourceGuruResourceAllocationJobSpecific[];
}

export interface SourceGuruResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceGuruResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceGuruResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceGuruResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceGutendexConfiguration {
    /**
     * (Optional) Defines the maximum birth year of the authors. Books by authors born after the end year will not be returned. Supports both positive (CE) or negative (BCE) integer values
     */
    authorYearEnd?: string;
    /**
     * (Optional) Defines the minimum birth year of the authors. Books by authors born prior to the start year will not be returned. Supports both positive (CE) or negative (BCE) integer values
     */
    authorYearStart?: string;
    /**
     * (Optional) Use this to find books with a certain copyright status - true for books with existing copyrights, false for books in the public domain in the USA, or null for books with no available copyright information.
     */
    copyright?: string;
    /**
     * (Optional) Use this to find books in any of a list of languages. They must be comma-separated, two-character language codes.
     */
    languages?: string;
    /**
     * (Optional) Use this to search author names and book titles with given words. They must be separated by a space (i.e. %20 in URL-encoded format) and are case-insensitive.
     */
    search?: string;
    /**
     * (Optional) Use this to sort books - ascending for Project Gutenberg ID numbers from lowest to highest, descending for IDs highest to lowest, or popular (the default) for most popular to least popular by number of downloads.
     */
    sort?: string;
    /**
     * (Optional) Use this to search for a case-insensitive key-phrase in books' bookshelves or subjects.
     */
    topic?: string;
}

export interface SourceGutendexResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceGutendexResourceAllocationDefault;
    jobSpecifics: outputs.SourceGutendexResourceAllocationJobSpecific[];
}

export interface SourceGutendexResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceGutendexResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceGutendexResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceGutendexResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceHardcodedRecordsConfiguration {
    /**
     * How many records per stream should be generated. Default: 1000
     */
    count: number;
}

export interface SourceHardcodedRecordsResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceHardcodedRecordsResourceAllocationDefault;
    jobSpecifics: outputs.SourceHardcodedRecordsResourceAllocationJobSpecific[];
}

export interface SourceHardcodedRecordsResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceHardcodedRecordsResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceHardcodedRecordsResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceHardcodedRecordsResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceHarnessConfiguration {
    /**
     * Harness Account ID
     */
    accountId: string;
    apiKey: string;
    /**
     * The API URL for fetching data from Harness. Default: "https://app.harness.io"
     */
    apiUrl: string;
}

export interface SourceHarnessResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceHarnessResourceAllocationDefault;
    jobSpecifics: outputs.SourceHarnessResourceAllocationJobSpecific[];
}

export interface SourceHarnessResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceHarnessResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceHarnessResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceHarnessResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceHarvestConfiguration {
    /**
     * Harvest account ID. Required for all Harvest requests in pair with Personal Access Token
     */
    accountId: string;
    /**
     * Choose how to authenticate to Harvest.
     */
    credentials?: outputs.SourceHarvestConfigurationCredentials;
    /**
     * UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated.
     */
    replicationStartDate: string;
}

export interface SourceHarvestConfigurationCredentials {
    authenticateViaHarvestOAuth?: outputs.SourceHarvestConfigurationCredentialsAuthenticateViaHarvestOAuth;
    authenticateWithPersonalAccessToken?: outputs.SourceHarvestConfigurationCredentialsAuthenticateWithPersonalAccessToken;
}

export interface SourceHarvestConfigurationCredentialsAuthenticateViaHarvestOAuth {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * The Client ID of your Harvest developer application.
     */
    clientId: string;
    /**
     * The Client Secret of your Harvest developer application.
     */
    clientSecret: string;
    /**
     * Refresh Token to renew the expired Access Token.
     */
    refreshToken: string;
}

export interface SourceHarvestConfigurationCredentialsAuthenticateWithPersonalAccessToken {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * Log into Harvest and then create new <a href="https://id.getharvest.com/developers"> personal access token</a>.
     */
    apiToken: string;
}

export interface SourceHarvestResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceHarvestResourceAllocationDefault;
    jobSpecifics: outputs.SourceHarvestResourceAllocationJobSpecific[];
}

export interface SourceHarvestResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceHarvestResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceHarvestResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceHarvestResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceHeightConfiguration {
    apiKey: string;
    /**
     * Search query to be used with search stream. Default: "task"
     */
    searchQuery: string;
    startDate: string;
}

export interface SourceHeightResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceHeightResourceAllocationDefault;
    jobSpecifics: outputs.SourceHeightResourceAllocationJobSpecific[];
}

export interface SourceHeightResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceHeightResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceHeightResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceHeightResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceHellobatonConfiguration {
    /**
     * authentication key required to access the api endpoints
     */
    apiKey: string;
    /**
     * Company name that generates your base api url
     */
    company: string;
}

export interface SourceHellobatonResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceHellobatonResourceAllocationDefault;
    jobSpecifics: outputs.SourceHellobatonResourceAllocationJobSpecific[];
}

export interface SourceHellobatonResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceHellobatonResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceHellobatonResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceHellobatonResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceHelpScoutConfiguration {
    clientId: string;
    clientSecret: string;
    startDate: string;
}

export interface SourceHelpScoutResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceHelpScoutResourceAllocationDefault;
    jobSpecifics: outputs.SourceHelpScoutResourceAllocationJobSpecific[];
}

export interface SourceHelpScoutResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceHelpScoutResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceHelpScoutResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceHelpScoutResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceHibobConfiguration {
    /**
     * Toggle true if this instance is a HiBob sandbox
     */
    isSandbox: boolean;
    password?: string;
    username: string;
}

export interface SourceHibobResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceHibobResourceAllocationDefault;
    jobSpecifics: outputs.SourceHibobResourceAllocationJobSpecific[];
}

export interface SourceHibobResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceHibobResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceHibobResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceHibobResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceHighLevelConfiguration {
    apiKey: string;
    locationId: string;
    startDate: string;
}

export interface SourceHighLevelResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceHighLevelResourceAllocationDefault;
    jobSpecifics: outputs.SourceHighLevelResourceAllocationJobSpecific[];
}

export interface SourceHighLevelResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceHighLevelResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceHighLevelResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceHighLevelResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceHoorayhrConfiguration {
    hoorayhrpassword: string;
    hoorayhrusername: string;
}

export interface SourceHoorayhrResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceHoorayhrResourceAllocationDefault;
    jobSpecifics: outputs.SourceHoorayhrResourceAllocationJobSpecific[];
}

export interface SourceHoorayhrResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceHoorayhrResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceHoorayhrResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceHoorayhrResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceHubplannerConfiguration {
    /**
     * Hubplanner API key. See https://github.com/hubplanner/API#authentication for more details.
     */
    apiKey: string;
}

export interface SourceHubplannerResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceHubplannerResourceAllocationDefault;
    jobSpecifics: outputs.SourceHubplannerResourceAllocationJobSpecific[];
}

export interface SourceHubplannerResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceHubplannerResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceHubplannerResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceHubplannerResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceHubspotConfiguration {
    /**
     * Choose how to authenticate to HubSpot.
     */
    credentials: outputs.SourceHubspotConfigurationCredentials;
    /**
     * If enabled then experimental streams become available for sync. Default: false
     */
    enableExperimentalStreams: boolean;
    /**
     * UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated. If not set, "2006-06-01T00:00:00Z" (Hubspot creation date) will be used as start date. It's recommended to provide relevant to your data start date value to optimize synchronization.
     */
    startDate?: string;
}

export interface SourceHubspotConfigurationCredentials {
    oAuth?: outputs.SourceHubspotConfigurationCredentialsOAuth;
    privateApp?: outputs.SourceHubspotConfigurationCredentialsPrivateApp;
}

export interface SourceHubspotConfigurationCredentialsOAuth {
    /**
     * The Client ID of your HubSpot developer application. See the <a href="https://legacydocs.hubspot.com/docs/methods/oauth2/oauth2-quickstart">Hubspot docs</a> if you need help finding this ID.
     */
    clientId: string;
    /**
     * The client secret for your HubSpot developer application. See the <a href="https://legacydocs.hubspot.com/docs/methods/oauth2/oauth2-quickstart">Hubspot docs</a> if you need help finding this secret.
     */
    clientSecret: string;
    /**
     * Refresh token to renew an expired access token. See the <a href="https://legacydocs.hubspot.com/docs/methods/oauth2/oauth2-quickstart">Hubspot docs</a> if you need help finding this token.
     */
    refreshToken: string;
}

export interface SourceHubspotConfigurationCredentialsPrivateApp {
    /**
     * HubSpot Access token. See the <a href="https://developers.hubspot.com/docs/api/private-apps">Hubspot docs</a> if you need help finding this token.
     */
    accessToken: string;
}

export interface SourceHubspotResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceHubspotResourceAllocationDefault;
    jobSpecifics: outputs.SourceHubspotResourceAllocationJobSpecific[];
}

export interface SourceHubspotResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceHubspotResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceHubspotResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceHubspotResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceHuggingFaceDatasetsConfiguration {
    datasetName: string;
    /**
     * Splits to import. Will import all of them if nothing is provided (see https://huggingface.co/docs/dataset-viewer/en/configs_and_splits for more details)
     */
    datasetSplits?: string[];
    /**
     * Dataset Subsets to import. Will import all of them if nothing is provided (see https://huggingface.co/docs/dataset-viewer/en/configs_and_splits for more details)
     */
    datasetSubsets?: string[];
}

export interface SourceHuggingFaceDatasetsResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceHuggingFaceDatasetsResourceAllocationDefault;
    jobSpecifics: outputs.SourceHuggingFaceDatasetsResourceAllocationJobSpecific[];
}

export interface SourceHuggingFaceDatasetsResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceHuggingFaceDatasetsResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceHuggingFaceDatasetsResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceHuggingFaceDatasetsResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceHumanitixConfiguration {
    apiKey: string;
}

export interface SourceHumanitixResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceHumanitixResourceAllocationDefault;
    jobSpecifics: outputs.SourceHumanitixResourceAllocationJobSpecific[];
}

export interface SourceHumanitixResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceHumanitixResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceHumanitixResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceHumanitixResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceHuntrConfiguration {
    apiKey: string;
}

export interface SourceHuntrResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceHuntrResourceAllocationDefault;
    jobSpecifics: outputs.SourceHuntrResourceAllocationJobSpecific[];
}

export interface SourceHuntrResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceHuntrResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceHuntrResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceHuntrResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceIlluminaBasespaceConfiguration {
    /**
     * BaseSpace access token. Instructions for obtaining your access token can be found in the BaseSpace Developer Documentation.
     */
    accessToken: string;
    /**
     * Domain name of the BaseSpace instance (e.g., euw2.sh.basespace.illumina.com)
     */
    domain: string;
    /**
     * Providing a user ID restricts the returned data to what that user can access. If you use the default ('current'), all data accessible to the user associated with the API key will be shown. Default: "current"
     */
    user: string;
}

export interface SourceIlluminaBasespaceResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceIlluminaBasespaceResourceAllocationDefault;
    jobSpecifics: outputs.SourceIlluminaBasespaceResourceAllocationJobSpecific[];
}

export interface SourceIlluminaBasespaceResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceIlluminaBasespaceResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceIlluminaBasespaceResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceIlluminaBasespaceResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceIncidentIoConfiguration {
    /**
     * API key to use. Find it at https://app.incident.io/settings/api-keys
     */
    apiKey: string;
}

export interface SourceIncidentIoResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceIncidentIoResourceAllocationDefault;
    jobSpecifics: outputs.SourceIncidentIoResourceAllocationJobSpecific[];
}

export interface SourceIncidentIoResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceIncidentIoResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceIncidentIoResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceIncidentIoResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceInflowinventoryConfiguration {
    apiKey: string;
    companyid: string;
}

export interface SourceInflowinventoryResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceInflowinventoryResourceAllocationDefault;
    jobSpecifics: outputs.SourceInflowinventoryResourceAllocationJobSpecific[];
}

export interface SourceInflowinventoryResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceInflowinventoryResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceInflowinventoryResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceInflowinventoryResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceInsightlyConfiguration {
    /**
     * The date from which you'd like to replicate data for Insightly in the format YYYY-MM-DDT00:00:00Z. All data generated after this date will be replicated. Note that it will be used only for incremental streams.
     */
    startDate?: string;
    /**
     * Your Insightly API token.
     */
    token?: string;
}

export interface SourceInsightlyResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceInsightlyResourceAllocationDefault;
    jobSpecifics: outputs.SourceInsightlyResourceAllocationJobSpecific[];
}

export interface SourceInsightlyResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceInsightlyResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceInsightlyResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceInsightlyResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceInstagramConfiguration {
    /**
     * The value of the access token generated with <b>instagram_basic, instagram_manage_insights, pages_show_list, pages_read_engagement, Instagram Public Content Access</b> permissions. See the <a href="https://docs.airbyte.com/integrations/sources/instagram/#step-1-set-up-instagram">docs</a> for more information
     */
    accessToken: string;
    /**
     * The Client ID for your Oauth application
     */
    clientId?: string;
    /**
     * The Client Secret for your Oauth application
     */
    clientSecret?: string;
    /**
     * The number of worker threads to use for the sync. Default: 15
     */
    numWorkers: number;
    /**
     * The date from which you'd like to replicate data for User Insights, in the format YYYY-MM-DDT00:00:00Z. All data generated after this date will be replicated. If left blank, the start date will be set to 2 years before the present date.
     */
    startDate?: string;
}

export interface SourceInstagramResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceInstagramResourceAllocationDefault;
    jobSpecifics: outputs.SourceInstagramResourceAllocationJobSpecific[];
}

export interface SourceInstagramResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceInstagramResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceInstagramResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceInstagramResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceInstatusConfiguration {
    /**
     * Instatus REST API key
     */
    apiKey: string;
}

export interface SourceInstatusResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceInstatusResourceAllocationDefault;
    jobSpecifics: outputs.SourceInstatusResourceAllocationJobSpecific[];
}

export interface SourceInstatusResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceInstatusResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceInstatusResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceInstatusResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceIntercomConfiguration {
    /**
     * Access token for making authenticated requests. See the <a href="https://developers.intercom.com/building-apps/docs/authentication-types#how-to-get-your-access-token">Intercom docs</a> for more information.
     */
    accessToken: string;
    /**
     * Set lower value in case of failing long running sync of Activity Logs stream. Default: 30
     */
    activityLogsTimeStep: number;
    /**
     * Client Id for your Intercom application.
     */
    clientId?: string;
    /**
     * Client Secret for your Intercom application.
     */
    clientSecret?: string;
    /**
     * The number of days to shift the state value backward for record sync. Default: 0
     */
    lookbackWindow: number;
    /**
     * UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated.
     */
    startDate: string;
}

export interface SourceIntercomResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceIntercomResourceAllocationDefault;
    jobSpecifics: outputs.SourceIntercomResourceAllocationJobSpecific[];
}

export interface SourceIntercomResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceIntercomResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceIntercomResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceIntercomResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceIntruderConfiguration {
    /**
     * Your API Access token. See <a href="https://developers.intruder.io/docs/authentication">here</a>.
     */
    accessToken: string;
}

export interface SourceIntruderResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceIntruderResourceAllocationDefault;
    jobSpecifics: outputs.SourceIntruderResourceAllocationJobSpecific[];
}

export interface SourceIntruderResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceIntruderResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceIntruderResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceIntruderResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceInvoicedConfiguration {
    /**
     * API key to use. Find it at https://invoiced.com/account
     */
    apiKey: string;
}

export interface SourceInvoicedResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceInvoicedResourceAllocationDefault;
    jobSpecifics: outputs.SourceInvoicedResourceAllocationJobSpecific[];
}

export interface SourceInvoicedResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceInvoicedResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceInvoicedResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceInvoicedResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceInvoiceninjaConfiguration {
    apiKey: string;
}

export interface SourceInvoiceninjaResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceInvoiceninjaResourceAllocationDefault;
    jobSpecifics: outputs.SourceInvoiceninjaResourceAllocationJobSpecific[];
}

export interface SourceInvoiceninjaResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceInvoiceninjaResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceInvoiceninjaResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceInvoiceninjaResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceIp2whoisConfiguration {
    /**
     * Your API Key. See <a href="https://www.ip2whois.com/developers-api">here</a>.
     */
    apiKey?: string;
    /**
     * Domain name. See <a href="https://www.ip2whois.com/developers-api">here</a>.
     */
    domain?: string;
}

export interface SourceIp2whoisResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceIp2whoisResourceAllocationDefault;
    jobSpecifics: outputs.SourceIp2whoisResourceAllocationJobSpecific[];
}

export interface SourceIp2whoisResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceIp2whoisResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceIp2whoisResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceIp2whoisResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceIterableConfiguration {
    /**
     * Iterable API Key. See the <a href=\"https://docs.airbyte.com/integrations/sources/iterable\">docs</a>  for more information on how to obtain this key.
     */
    apiKey: string;
    /**
     * The date from which you'd like to replicate data for Iterable, in the format YYYY-MM-DDT00:00:00Z.  All data generated after this date will be replicated.
     */
    startDate: string;
}

export interface SourceIterableResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceIterableResourceAllocationDefault;
    jobSpecifics: outputs.SourceIterableResourceAllocationJobSpecific[];
}

export interface SourceIterableResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceIterableResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceIterableResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceIterableResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceJiraConfiguration {
    /**
     * Jira API Token. See the <a href="https://docs.airbyte.com/integrations/sources/jira">docs</a> for more information on how to generate this key. API Token is used for Authorization to your account by BasicAuth.
     */
    apiToken: string;
    /**
     * The Domain for your Jira account, e.g. airbyteio.atlassian.net, airbyteio.jira.com, jira.your-domain.com
     */
    domain: string;
    /**
     * The user email for your Jira account which you used to generate the API token. This field is used for Authorization to your account by BasicAuth.
     */
    email: string;
    /**
     * Allow the use of experimental streams which rely on undocumented Jira API endpoints. See https://docs.airbyte.com/integrations/sources/jira#experimental-tables for more info. Default: false
     */
    enableExperimentalStreams: boolean;
    /**
     * When set to N, the connector will always refresh resources created within the past N minutes. By default, updated objects that are not newly created are not incrementally synced. Default: 0
     */
    lookbackWindowMinutes: number;
    /**
     * The number of worker threads to use for the sync. Default: 3
     */
    numWorkers: number;
    /**
     * List of Jira project keys to replicate data for, or leave it empty if you want to replicate data for all projects.
     */
    projects?: string[];
    /**
     * The date from which you want to replicate data from Jira, use the format YYYY-MM-DDT00:00:00Z. Note that this field only applies to certain streams, and only data generated on or after the start date will be replicated. Or leave it empty if you want to replicate all data. For more information, refer to the <a href="https://docs.airbyte.com/integrations/sources/jira/">documentation</a>.
     */
    startDate?: string;
}

export interface SourceJiraResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceJiraResourceAllocationDefault;
    jobSpecifics: outputs.SourceJiraResourceAllocationJobSpecific[];
}

export interface SourceJiraResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceJiraResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceJiraResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceJiraResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceJobnimbusConfiguration {
    /**
     * API key to use. Find it by logging into your JobNimbus account, navigating to settings, and creating a new API key under the API section.
     */
    apiKey: string;
}

export interface SourceJobnimbusResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceJobnimbusResourceAllocationDefault;
    jobSpecifics: outputs.SourceJobnimbusResourceAllocationJobSpecific[];
}

export interface SourceJobnimbusResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceJobnimbusResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceJobnimbusResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceJobnimbusResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceJotformConfiguration {
    apiEndpoint: outputs.SourceJotformConfigurationApiEndpoint;
    apiKey: string;
    endDate: string;
    startDate: string;
}

export interface SourceJotformConfigurationApiEndpoint {
    basic?: outputs.SourceJotformConfigurationApiEndpointBasic;
    enterprise?: outputs.SourceJotformConfigurationApiEndpointEnterprise;
}

export interface SourceJotformConfigurationApiEndpointBasic {
    /**
     * You can access our API through the following URLs - Standard API Usage (Use the default API URL - https://api.jotform.com), For EU (Use the EU API URL - https://eu-api.jotform.com), For HIPAA (Use the HIPAA API URL - https://hipaa-api.jotform.com). Default: "Standard"; must be one of ["Standard", "EU", "HIPAA"]
     */
    urlPrefix: string;
}

export interface SourceJotformConfigurationApiEndpointEnterprise {
    /**
     * Upgrade to Enterprise to make your API url your-domain.com/API or subdomain.jotform.com/API instead of api.jotform.com
     */
    enterpriseUrl: string;
}

export interface SourceJotformResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceJotformResourceAllocationDefault;
    jobSpecifics: outputs.SourceJotformResourceAllocationJobSpecific[];
}

export interface SourceJotformResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceJotformResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceJotformResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceJotformResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceJustSiftConfiguration {
    /**
     * API token to use for accessing the Sift API. Obtain this token from your Sift account administrator.
     */
    apiToken: string;
}

export interface SourceJustSiftResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceJustSiftResourceAllocationDefault;
    jobSpecifics: outputs.SourceJustSiftResourceAllocationJobSpecific[];
}

export interface SourceJustSiftResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceJustSiftResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceJustSiftResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceJustSiftResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceJustcallConfiguration {
    apiKey2: string;
    startDate: string;
}

export interface SourceJustcallResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceJustcallResourceAllocationDefault;
    jobSpecifics: outputs.SourceJustcallResourceAllocationJobSpecific[];
}

export interface SourceJustcallResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceJustcallResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceJustcallResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceJustcallResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceK6CloudConfiguration {
    /**
     * Your API Token. See <a href="https://k6.io/docs/cloud/integrations/token/">here</a>. The key is case sensitive.
     */
    apiToken: string;
}

export interface SourceK6CloudResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceK6CloudResourceAllocationDefault;
    jobSpecifics: outputs.SourceK6CloudResourceAllocationJobSpecific[];
}

export interface SourceK6CloudResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceK6CloudResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceK6CloudResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceK6CloudResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceKatanaConfiguration {
    /**
     * API key to use. Find it at https://katanamrp.com/login/
     */
    apiKey: string;
    startDate: string;
}

export interface SourceKatanaResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceKatanaResourceAllocationDefault;
    jobSpecifics: outputs.SourceKatanaResourceAllocationJobSpecific[];
}

export interface SourceKatanaResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceKatanaResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceKatanaResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceKatanaResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceKekaConfiguration {
    apiKey: string;
    /**
     * Your client identifier for authentication.
     */
    clientId: string;
    /**
     * Your client secret for secure authentication.
     */
    clientSecret: string;
    grantType: string;
    scope: string;
}

export interface SourceKekaResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceKekaResourceAllocationDefault;
    jobSpecifics: outputs.SourceKekaResourceAllocationJobSpecific[];
}

export interface SourceKekaResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceKekaResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceKekaResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceKekaResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceKisiConfiguration {
    /**
     * Your KISI API Key
     */
    apiKey: string;
}

export interface SourceKisiResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceKisiResourceAllocationDefault;
    jobSpecifics: outputs.SourceKisiResourceAllocationJobSpecific[];
}

export interface SourceKisiResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceKisiResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceKisiResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceKisiResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceKissmetricsConfiguration {
    password?: string;
    username: string;
}

export interface SourceKissmetricsResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceKissmetricsResourceAllocationDefault;
    jobSpecifics: outputs.SourceKissmetricsResourceAllocationJobSpecific[];
}

export interface SourceKissmetricsResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceKissmetricsResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceKissmetricsResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceKissmetricsResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceKlarnaConfiguration {
    /**
     * A string which is associated with your Merchant ID and is used to authorize use of Klarna's APIs (https://developers.klarna.com/api/#authentication)
     */
    password: string;
    /**
     * Propertie defining if connector is used against playground or production environment. Default: false
     */
    playground: boolean;
    /**
     * Base url region (For playground eu https://docs.klarna.com/klarna-payments/api/payments-api/#tag/API-URLs). Supported 'eu', 'na', 'oc'. must be one of ["eu", "na", "oc"]
     */
    region: string;
    /**
     * Consists of your Merchant ID (eid) - a unique number that identifies your e-store, combined with a random string (https://developers.klarna.com/api/#authentication)
     */
    username: string;
}

export interface SourceKlarnaResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceKlarnaResourceAllocationDefault;
    jobSpecifics: outputs.SourceKlarnaResourceAllocationJobSpecific[];
}

export interface SourceKlarnaResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceKlarnaResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceKlarnaResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceKlarnaResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceKlausApiConfiguration {
    /**
     * getting data by account
     */
    account: number;
    /**
     * API access key used to retrieve data from the KLAUS API.
     */
    apiKey: string;
    /**
     * Start getting data from that date.
     */
    startDate?: string;
    /**
     * getting data by workspace
     */
    workspace: number;
}

export interface SourceKlausApiResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceKlausApiResourceAllocationDefault;
    jobSpecifics: outputs.SourceKlausApiResourceAllocationJobSpecific[];
}

export interface SourceKlausApiResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceKlausApiResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceKlausApiResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceKlausApiResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceKlaviyoConfiguration {
    /**
     * Klaviyo API Key. See our <a href="https://docs.airbyte.com/integrations/sources/klaviyo">docs</a> if you need help finding this key.
     */
    apiKey: string;
    /**
     * Certain streams like the profiles stream can retrieve predictive analytics data from Klaviyo's API. However, at high volume, this can lead to service availability issues on the API which can be improved by not fetching this field. WARNING: Enabling this setting will stop the  "predictive_analytics" column from being populated in your downstream destination.
     */
    disableFetchingPredictiveAnalytics?: boolean;
    /**
     * The number of worker threads to use for the sync. The performance upper boundary is based on the limit of your Klaviyo plan. More info about the rate limit plan tiers can be found on Klaviyo's API <a href="https://developers.klaviyo.com/en/docs/rate_limits_and_error_handling">docs</a>. Default: 10
     */
    numWorkers: number;
    /**
     * UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated. This field is optional - if not provided, all data will be replicated.
     */
    startDate?: string;
}

export interface SourceKlaviyoResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceKlaviyoResourceAllocationDefault;
    jobSpecifics: outputs.SourceKlaviyoResourceAllocationJobSpecific[];
}

export interface SourceKlaviyoResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceKlaviyoResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceKlaviyoResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceKlaviyoResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceKyveConfiguration {
    /**
     * The IDs of the KYVE storage pool you want to archive. (Comma separated)
     */
    poolIds: string;
    /**
     * The start-id defines, from which bundle id the pipeline should start to extract the data. (Comma separated)
     */
    startIds: string;
    /**
     * URL to the KYVE Chain API. Default: "https://api.kyve.network"
     */
    urlBase: string;
}

export interface SourceKyveResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceKyveResourceAllocationDefault;
    jobSpecifics: outputs.SourceKyveResourceAllocationJobSpecific[];
}

export interface SourceKyveResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceKyveResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceKyveResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceKyveResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceLaunchdarklyConfiguration {
    /**
     * Your Access token. See <a href="https://apidocs.launchdarkly.com/#section/Overview/Authentication">here</a>.
     */
    accessToken: string;
}

export interface SourceLaunchdarklyResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceLaunchdarklyResourceAllocationDefault;
    jobSpecifics: outputs.SourceLaunchdarklyResourceAllocationJobSpecific[];
}

export interface SourceLaunchdarklyResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceLaunchdarklyResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceLaunchdarklyResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceLaunchdarklyResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceLeadfeederConfiguration {
    apiToken: string;
    startDate: string;
}

export interface SourceLeadfeederResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceLeadfeederResourceAllocationDefault;
    jobSpecifics: outputs.SourceLeadfeederResourceAllocationJobSpecific[];
}

export interface SourceLeadfeederResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceLeadfeederResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceLeadfeederResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceLeadfeederResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceLemlistConfiguration {
    /**
     * Lemlist API key,
     */
    apiKey: string;
}

export interface SourceLemlistResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceLemlistResourceAllocationDefault;
    jobSpecifics: outputs.SourceLemlistResourceAllocationJobSpecific[];
}

export interface SourceLemlistResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceLemlistResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceLemlistResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceLemlistResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceLessAnnoyingCrmConfiguration {
    /**
     * API key to use. Manage and create your API keys on the Programmer API settings page at https://account.lessannoyingcrm.com/app/Settings/Api.
     */
    apiKey: string;
    startDate: string;
}

export interface SourceLessAnnoyingCrmResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceLessAnnoyingCrmResourceAllocationDefault;
    jobSpecifics: outputs.SourceLessAnnoyingCrmResourceAllocationJobSpecific[];
}

export interface SourceLessAnnoyingCrmResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceLessAnnoyingCrmResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceLessAnnoyingCrmResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceLessAnnoyingCrmResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceLeverHiringConfiguration {
    /**
     * Choose how to authenticate to Lever Hiring.
     */
    credentials?: outputs.SourceLeverHiringConfigurationCredentials;
    /**
     * The environment in which you'd like to replicate data for Lever. This is used to determine which Lever API endpoint to use. Default: "Sandbox"; must be one of ["Production", "Sandbox"]
     */
    environment: string;
    /**
     * UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated. Note that it will be used only in the following incremental streams: comments, commits, and issues.
     */
    startDate: string;
}

export interface SourceLeverHiringConfigurationCredentials {
    authenticateViaLeverApiKey?: outputs.SourceLeverHiringConfigurationCredentialsAuthenticateViaLeverApiKey;
    authenticateViaLeverOAuth?: outputs.SourceLeverHiringConfigurationCredentialsAuthenticateViaLeverOAuth;
}

export interface SourceLeverHiringConfigurationCredentialsAuthenticateViaLeverApiKey {
    /**
     * The Api Key of your Lever Hiring account.
     */
    apiKey: string;
}

export interface SourceLeverHiringConfigurationCredentialsAuthenticateViaLeverOAuth {
    /**
     * The Client ID of your Lever Hiring developer application.
     */
    clientId?: string;
    /**
     * The Client Secret of your Lever Hiring developer application.
     */
    clientSecret?: string;
    /**
     * The token for obtaining new access token.
     */
    refreshToken: string;
}

export interface SourceLeverHiringResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceLeverHiringResourceAllocationDefault;
    jobSpecifics: outputs.SourceLeverHiringResourceAllocationJobSpecific[];
}

export interface SourceLeverHiringResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceLeverHiringResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceLeverHiringResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceLeverHiringResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceLightspeedRetailConfiguration {
    /**
     * API key or access token
     */
    apiKey: string;
    /**
     * The subdomain for the retailer, e.g., 'example' in 'example.retail.lightspeed.app'.
     */
    subdomain: string;
}

export interface SourceLightspeedRetailResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceLightspeedRetailResourceAllocationDefault;
    jobSpecifics: outputs.SourceLightspeedRetailResourceAllocationJobSpecific[];
}

export interface SourceLightspeedRetailResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceLightspeedRetailResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceLightspeedRetailResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceLightspeedRetailResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceLinkedinAdsConfiguration {
    /**
     * Specify the account IDs to pull data from, separated by a space. Leave this field empty if you want to pull the data from all accounts accessible by the authenticated user. See the <a href="https://www.linkedin.com/help/linkedin/answer/a424270/find-linkedin-ads-account-details?lang=en">LinkedIn docs</a> to locate these IDs.
     */
    accountIds: number[];
    adAnalyticsReports?: outputs.SourceLinkedinAdsConfigurationAdAnalyticsReport[];
    credentials?: outputs.SourceLinkedinAdsConfigurationCredentials;
    /**
     * How far into the past to look for records. (in days). Default: 0
     */
    lookbackWindow: number;
    /**
     * UTC date in the format YYYY-MM-DD. Any data before this date will not be replicated.
     */
    startDate: string;
}

export interface SourceLinkedinAdsConfigurationAdAnalyticsReport {
    /**
     * The name for the custom report.
     */
    name: string;
    /**
     * Choose a category to pivot your analytics report around. This selection will organize your data based on the chosen attribute, allowing you to analyze trends and performance from different perspectives. must be one of ["COMPANY", "ACCOUNT", "SHARE", "CAMPAIGN", "CREATIVE", "CAMPAIGN_GROUP", "CONVERSION", "CONVERSATION_NODE", "CONVERSATION_NODE_OPTION_INDEX", "SERVING_LOCATION", "CARD_INDEX", "MEMBER_COMPANY_SIZE", "MEMBER_INDUSTRY", "MEMBER_SENIORITY", "MEMBER_JOB_TITLE", "MEMBER_JOB_FUNCTION", "MEMBER_COUNTRY_V2", "MEMBER_REGION_V2", "MEMBER_COMPANY", "PLACEMENT_NAME", "IMPRESSION_DEVICE_TYPE"]
     */
    pivotBy: string;
    /**
     * Choose how to group the data in your report by time. The options are:<br>- 'ALL': A single result summarizing the entire time range.<br>- 'DAILY': Group results by each day.<br>- 'MONTHLY': Group results by each month.<br>- 'YEARLY': Group results by each year.<br>Selecting a time grouping helps you analyze trends and patterns over different time periods. must be one of ["ALL", "DAILY", "MONTHLY", "YEARLY"]
     */
    timeGranularity: string;
}

export interface SourceLinkedinAdsConfigurationCredentials {
    accessToken?: outputs.SourceLinkedinAdsConfigurationCredentialsAccessToken;
    oAuth20?: outputs.SourceLinkedinAdsConfigurationCredentialsOAuth20;
}

export interface SourceLinkedinAdsConfigurationCredentialsAccessToken {
    /**
     * The access token generated for your developer application. Refer to our <a href='https://docs.airbyte.com/integrations/sources/linkedin-ads#setup-guide'>documentation</a> for more information.
     */
    accessToken: string;
}

export interface SourceLinkedinAdsConfigurationCredentialsOAuth20 {
    /**
     * The client ID of your developer application. Refer to our <a href='https://docs.airbyte.com/integrations/sources/linkedin-ads#setup-guide'>documentation</a> for more information.
     */
    clientId: string;
    /**
     * The client secret of your developer application. Refer to our <a href='https://docs.airbyte.com/integrations/sources/linkedin-ads#setup-guide'>documentation</a> for more information.
     */
    clientSecret: string;
    /**
     * The key to refresh the expired access token. Refer to our <a href='https://docs.airbyte.com/integrations/sources/linkedin-ads#setup-guide'>documentation</a> for more information.
     */
    refreshToken: string;
}

export interface SourceLinkedinAdsResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceLinkedinAdsResourceAllocationDefault;
    jobSpecifics: outputs.SourceLinkedinAdsResourceAllocationJobSpecific[];
}

export interface SourceLinkedinAdsResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceLinkedinAdsResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceLinkedinAdsResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceLinkedinAdsResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceLinkedinPagesConfiguration {
    credentials?: outputs.SourceLinkedinPagesConfigurationCredentials;
    /**
     * Specify the Organization ID
     */
    orgId: string;
    /**
     * Start date for getting metrics per time period. Must be atmost 12 months before the request date (UTC) and atleast 2 days prior to the request date (UTC). See https://bit.ly/linkedin-pages-date-rules {{ "\n" }} {{ response.errorDetails }}. Default: "2023-01-01T00:00:00Z"
     */
    startDate: string;
    /**
     * Granularity of the statistics for metrics per time period. Must be either "DAY" or "MONTH". Default: "DAY"; must be one of ["DAY", "MONTH"]
     */
    timeGranularityType: string;
}

export interface SourceLinkedinPagesConfigurationCredentials {
    accessToken?: outputs.SourceLinkedinPagesConfigurationCredentialsAccessToken;
    oAuth20?: outputs.SourceLinkedinPagesConfigurationCredentialsOAuth20;
}

export interface SourceLinkedinPagesConfigurationCredentialsAccessToken {
    /**
     * The token value generated using the LinkedIn Developers OAuth Token Tools. See the <a href="https://docs.airbyte.com/integrations/sources/linkedin-pages/">docs</a> to obtain yours.
     */
    accessToken: string;
}

export interface SourceLinkedinPagesConfigurationCredentialsOAuth20 {
    /**
     * The client ID of the LinkedIn developer application.
     */
    clientId: string;
    /**
     * The client secret of the LinkedIn developer application.
     */
    clientSecret: string;
    /**
     * The token value generated using the LinkedIn Developers OAuth Token Tools. See the <a href="https://docs.airbyte.com/integrations/sources/linkedin-pages/">docs</a> to obtain yours.
     */
    refreshToken: string;
}

export interface SourceLinkedinPagesResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceLinkedinPagesResourceAllocationDefault;
    jobSpecifics: outputs.SourceLinkedinPagesResourceAllocationJobSpecific[];
}

export interface SourceLinkedinPagesResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceLinkedinPagesResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceLinkedinPagesResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceLinkedinPagesResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceLinnworksConfiguration {
    /**
     * Linnworks Application ID
     */
    applicationId: string;
    /**
     * Linnworks Application Secret
     */
    applicationSecret: string;
    /**
     * UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated.
     */
    startDate: string;
    token: string;
}

export interface SourceLinnworksResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceLinnworksResourceAllocationDefault;
    jobSpecifics: outputs.SourceLinnworksResourceAllocationJobSpecific[];
}

export interface SourceLinnworksResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceLinnworksResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceLinnworksResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceLinnworksResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceLobConfiguration {
    /**
     * API key to use for authentication. You can find your account's API keys in your Dashboard Settings at https://dashboard.lob.com/settings/api-keys.
     */
    apiKey: string;
    /**
     * Max records per page limit. Default: "50"
     */
    limit: string;
    startDate: string;
}

export interface SourceLobResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceLobResourceAllocationDefault;
    jobSpecifics: outputs.SourceLobResourceAllocationJobSpecific[];
}

export interface SourceLobResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceLobResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceLobResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceLobResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceLokaliseConfiguration {
    /**
     * Lokalise API Key with read-access. Available at Profile settings > API tokens. See <a href="https://docs.lokalise.com/en/articles/1929556-api-tokens">here</a>.
     */
    apiKey: string;
    /**
     * Lokalise project ID. Available at Project Settings > General.
     */
    projectId: string;
}

export interface SourceLokaliseResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceLokaliseResourceAllocationDefault;
    jobSpecifics: outputs.SourceLokaliseResourceAllocationJobSpecific[];
}

export interface SourceLokaliseResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceLokaliseResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceLokaliseResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceLokaliseResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceLookerConfiguration {
    /**
     * The Client ID is first part of an API3 key that is specific to each Looker user. See the <a href="https://docs.airbyte.com/integrations/sources/looker">docs</a> for more information on how to generate this key.
     */
    clientId: string;
    /**
     * The Client Secret is second part of an API3 key.
     */
    clientSecret: string;
    /**
     * Domain for your Looker account, e.g. airbyte.cloud.looker.com,looker.[clientname].com,IP address
     */
    domain: string;
    /**
     * The IDs of any Looks to run
     */
    runLookIds?: string[];
}

export interface SourceLookerResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceLookerResourceAllocationDefault;
    jobSpecifics: outputs.SourceLookerResourceAllocationJobSpecific[];
}

export interface SourceLookerResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceLookerResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceLookerResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceLookerResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceLumaConfiguration {
    /**
     * Get your API key on lu.ma Calendars dashboard → Settings.
     */
    apiKey: string;
}

export interface SourceLumaResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceLumaResourceAllocationDefault;
    jobSpecifics: outputs.SourceLumaResourceAllocationJobSpecific[];
}

export interface SourceLumaResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceLumaResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceLumaResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceLumaResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceMailchimpConfiguration {
    credentials?: outputs.SourceMailchimpConfigurationCredentials;
    /**
     * The date from which you want to start syncing data for Incremental streams. Only records that have been created or modified since this date will be synced. If left blank, all data will by synced.
     */
    startDate?: string;
}

export interface SourceMailchimpConfigurationCredentials {
    apiKey?: outputs.SourceMailchimpConfigurationCredentialsApiKey;
    oAuth20?: outputs.SourceMailchimpConfigurationCredentialsOAuth20;
}

export interface SourceMailchimpConfigurationCredentialsApiKey {
    /**
     * Mailchimp API Key. See the <a href="https://docs.airbyte.com/integrations/sources/mailchimp">docs</a> for information on how to generate this key.
     */
    apikey: string;
}

export interface SourceMailchimpConfigurationCredentialsOAuth20 {
    /**
     * An access token generated using the above client ID and secret.
     */
    accessToken: string;
    /**
     * The Client ID of your OAuth application.
     */
    clientId?: string;
    /**
     * The Client Secret of your OAuth application.
     */
    clientSecret?: string;
}

export interface SourceMailchimpResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceMailchimpResourceAllocationDefault;
    jobSpecifics: outputs.SourceMailchimpResourceAllocationJobSpecific[];
}

export interface SourceMailchimpResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceMailchimpResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceMailchimpResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceMailchimpResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceMailerliteConfiguration {
    /**
     * Your API Token. See <a href="https://developers.mailerlite.com/docs/#authentication">here</a>.
     */
    apiToken: string;
}

export interface SourceMailerliteResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceMailerliteResourceAllocationDefault;
    jobSpecifics: outputs.SourceMailerliteResourceAllocationJobSpecific[];
}

export interface SourceMailerliteResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceMailerliteResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceMailerliteResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceMailerliteResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceMailersendConfiguration {
    /**
     * Your API Token. See <a href="https://www.mailersend.com/help/managing-api-tokens">here</a>.
     */
    apiToken: string;
    /**
     * The domain entity in mailersend
     */
    domainId: string;
    /**
     * Timestamp is assumed to be UTC.
     */
    startDate?: number;
}

export interface SourceMailersendResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceMailersendResourceAllocationDefault;
    jobSpecifics: outputs.SourceMailersendResourceAllocationJobSpecific[];
}

export interface SourceMailersendResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceMailersendResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceMailersendResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceMailersendResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceMailgunConfiguration {
    /**
     * Domain region code. 'EU' or 'US' are possible values. The default is 'US'. Default: "US"; must be one of ["US", "EU"]
     */
    domainRegion: string;
    /**
     * Primary account API key to access your Mailgun data.
     */
    privateKey: string;
    /**
     * UTC date and time in the format 2020-10-01 00:00:00. Any data before this date will not be replicated. If omitted, defaults to 3 days ago.
     */
    startDate?: string;
}

export interface SourceMailgunResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceMailgunResourceAllocationDefault;
    jobSpecifics: outputs.SourceMailgunResourceAllocationJobSpecific[];
}

export interface SourceMailgunResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceMailgunResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceMailgunResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceMailgunResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceMailjetMailConfiguration {
    /**
     * Your API Key. See <a href="https://dev.mailjet.com/email/guides/#authentication">here</a>.
     */
    apiKey: string;
    /**
     * Your API Secret Key. See <a href="https://dev.mailjet.com/email/guides/#authentication">here</a>.
     */
    apiKeySecret: string;
}

export interface SourceMailjetMailResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceMailjetMailResourceAllocationDefault;
    jobSpecifics: outputs.SourceMailjetMailResourceAllocationJobSpecific[];
}

export interface SourceMailjetMailResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceMailjetMailResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceMailjetMailResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceMailjetMailResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceMailjetSmsConfiguration {
    /**
     * Retrieve SMS messages created before the specified timestamp. Required format - Unix timestamp.
     */
    endDate?: number;
    /**
     * Retrieve SMS messages created after the specified timestamp. Required format - Unix timestamp.
     */
    startDate?: number;
    /**
     * Your access token. See <a href="https://dev.mailjet.com/sms/reference/overview/authentication">here</a>.
     */
    token: string;
}

export interface SourceMailjetSmsResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceMailjetSmsResourceAllocationDefault;
    jobSpecifics: outputs.SourceMailjetSmsResourceAllocationJobSpecific[];
}

export interface SourceMailjetSmsResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceMailjetSmsResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceMailjetSmsResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceMailjetSmsResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceMailosaurConfiguration {
    /**
     * Enter your api key here
     */
    password?: string;
    /**
     * Enter "api" here
     */
    username: string;
}

export interface SourceMailosaurResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceMailosaurResourceAllocationDefault;
    jobSpecifics: outputs.SourceMailosaurResourceAllocationJobSpecific[];
}

export interface SourceMailosaurResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceMailosaurResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceMailosaurResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceMailosaurResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceMailtrapConfiguration {
    /**
     * API token to use. Find it at https://mailtrap.io/account
     */
    apiToken: string;
}

export interface SourceMailtrapResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceMailtrapResourceAllocationDefault;
    jobSpecifics: outputs.SourceMailtrapResourceAllocationJobSpecific[];
}

export interface SourceMailtrapResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceMailtrapResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceMailtrapResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceMailtrapResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceMarketoConfiguration {
    /**
     * The Client ID of your Marketo developer application. See <a href="https://docs.airbyte.com/integrations/sources/marketo"> the docs </a> for info on how to obtain this.
     */
    clientId: string;
    /**
     * The Client Secret of your Marketo developer application. See <a href="https://docs.airbyte.com/integrations/sources/marketo"> the docs </a> for info on how to obtain this.
     */
    clientSecret: string;
    /**
     * Your Marketo Base URL. See <a href="https://docs.airbyte.com/integrations/sources/marketo"> the docs </a> for info on how to obtain this.
     */
    domainUrl: string;
    /**
     * UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated.
     */
    startDate: string;
}

export interface SourceMarketoResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceMarketoResourceAllocationDefault;
    jobSpecifics: outputs.SourceMarketoResourceAllocationJobSpecific[];
}

export interface SourceMarketoResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceMarketoResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceMarketoResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceMarketoResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceMarketstackConfiguration {
    apiKey: string;
    startDate: string;
}

export interface SourceMarketstackResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceMarketstackResourceAllocationDefault;
    jobSpecifics: outputs.SourceMarketstackResourceAllocationJobSpecific[];
}

export interface SourceMarketstackResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceMarketstackResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceMarketstackResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceMarketstackResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceMentionConfiguration {
    apiKey: string;
    statsEndDate?: string;
    /**
     * Periodicity of statistics returned. it may be daily(P1D), weekly(P1W) or monthly(P1M). Default: "P1D"; must be one of ["P1D", "P1W", "P1M"]
     */
    statsInterval: string;
    statsStartDate: string;
}

export interface SourceMentionResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceMentionResourceAllocationDefault;
    jobSpecifics: outputs.SourceMentionResourceAllocationJobSpecific[];
}

export interface SourceMentionResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceMentionResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceMentionResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceMentionResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceMergeConfiguration {
    /**
     * Link your other integrations with account credentials on accounts section to get account token (ref - https://app.merge.dev/linked-accounts/accounts)
     */
    accountToken: string;
    /**
     * API token can be seen at  https://app.merge.dev/keys
     */
    apiToken: string;
    /**
     * Date time filter for incremental filter, Specify which date to extract from.
     */
    startDate: string;
}

export interface SourceMergeResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceMergeResourceAllocationDefault;
    jobSpecifics: outputs.SourceMergeResourceAllocationJobSpecific[];
}

export interface SourceMergeResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceMergeResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceMergeResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceMergeResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceMetabaseConfiguration {
    /**
     * URL to your metabase instance API
     */
    instanceApiUrl: string;
    password?: string;
    /**
     * To generate your session token, you need to run the following command: ``` curl -X POST \
     *   -H "Content-Type: application/json" \
     *   -d '{"username": "person@metabase.com", "password": "fakepassword"}' \
     *   http://localhost:3000/api/session
     * ``` Then copy the value of the `id` field returned by a successful call to that API.
     * Note that by default, sessions are good for 14 days and needs to be regenerated.
     */
    sessionToken?: string;
    username: string;
}

export interface SourceMetabaseResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceMetabaseResourceAllocationDefault;
    jobSpecifics: outputs.SourceMetabaseResourceAllocationJobSpecific[];
}

export interface SourceMetabaseResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceMetabaseResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceMetabaseResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceMetabaseResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceMicrosoftDataverseConfiguration {
    /**
     * App Registration Client Id
     */
    clientId: string;
    /**
     * App Registration Client Secret
     */
    clientSecretValue: string;
    /**
     * Max number of results per page. Default=5000. Default: 5000
     */
    odataMaxpagesize: number;
    /**
     * Tenant Id of your Microsoft Dataverse Instance
     */
    tenantId: string;
    /**
     * URL to Microsoft Dataverse API
     */
    url: string;
}

export interface SourceMicrosoftDataverseResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceMicrosoftDataverseResourceAllocationDefault;
    jobSpecifics: outputs.SourceMicrosoftDataverseResourceAllocationJobSpecific[];
}

export interface SourceMicrosoftDataverseResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceMicrosoftDataverseResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceMicrosoftDataverseResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceMicrosoftDataverseResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceMicrosoftEntraIdConfiguration {
    clientId: string;
    clientSecret: string;
    tenantId: string;
    userId: string;
}

export interface SourceMicrosoftEntraIdResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceMicrosoftEntraIdResourceAllocationDefault;
    jobSpecifics: outputs.SourceMicrosoftEntraIdResourceAllocationJobSpecific[];
}

export interface SourceMicrosoftEntraIdResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceMicrosoftEntraIdResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceMicrosoftEntraIdResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceMicrosoftEntraIdResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceMicrosoftListsConfiguration {
    applicationIdUri: string;
    clientId: string;
    clientSecret: string;
    domain: string;
    siteId: string;
    tenantId: string;
}

export interface SourceMicrosoftListsResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceMicrosoftListsResourceAllocationDefault;
    jobSpecifics: outputs.SourceMicrosoftListsResourceAllocationJobSpecific[];
}

export interface SourceMicrosoftListsResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceMicrosoftListsResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceMicrosoftListsResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceMicrosoftListsResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceMicrosoftOnedriveConfiguration {
    /**
     * Credentials for connecting to the One Drive API
     */
    credentials: outputs.SourceMicrosoftOnedriveConfigurationCredentials;
    /**
     * Name of the Microsoft OneDrive drive where the file(s) exist. Default: "OneDrive"
     */
    driveName: string;
    /**
     * Path to a specific folder within the drives to search for files. Leave empty to search all folders of the drives. This does not apply to shared items. Default: "."
     */
    folderPath: string;
    /**
     * Specifies the location(s) to search for files. Valid options are 'ACCESSIBLE_DRIVES' to search in the selected OneDrive drive, 'SHARED_ITEMS' for shared items the user has access to, and 'ALL' to search both. Default: "ALL"; must be one of ["ACCESSIBLE_DRIVES", "SHARED_ITEMS", "ALL"]
     */
    searchScope: string;
    /**
     * UTC date and time in the format 2017-01-25T00:00:00.000000Z. Any file modified before this date will not be replicated.
     */
    startDate?: string;
    /**
     * Each instance of this configuration defines a <a href="https://docs.airbyte.com/cloud/core-concepts#stream">stream</a>. Use this to define which files belong in the stream, their format, and how they should be parsed and validated. When sending data to warehouse destination such as Snowflake or BigQuery, each stream is a separate table.
     */
    streams: outputs.SourceMicrosoftOnedriveConfigurationStream[];
}

export interface SourceMicrosoftOnedriveConfigurationCredentials {
    /**
     * OAuthCredentials class to hold authentication details for Microsoft OAuth authentication.
     * This class uses pydantic for data validation and settings management.
     */
    authenticateViaMicrosoftOAuth?: outputs.SourceMicrosoftOnedriveConfigurationCredentialsAuthenticateViaMicrosoftOAuth;
    /**
     * ServiceCredentials class for service key authentication.
     * This class is structured similarly to OAuthCredentials but for a different authentication method.
     */
    serviceKeyAuthentication?: outputs.SourceMicrosoftOnedriveConfigurationCredentialsServiceKeyAuthentication;
}

export interface SourceMicrosoftOnedriveConfigurationCredentialsAuthenticateViaMicrosoftOAuth {
    /**
     * Client ID of your Microsoft developer application
     */
    clientId: string;
    /**
     * Client Secret of your Microsoft developer application
     */
    clientSecret: string;
    /**
     * Refresh Token of your Microsoft developer application
     */
    refreshToken: string;
    /**
     * Tenant ID of the Microsoft OneDrive user
     */
    tenantId: string;
}

export interface SourceMicrosoftOnedriveConfigurationCredentialsServiceKeyAuthentication {
    /**
     * Client ID of your Microsoft developer application
     */
    clientId: string;
    /**
     * Client Secret of your Microsoft developer application
     */
    clientSecret: string;
    /**
     * Tenant ID of the Microsoft OneDrive user
     */
    tenantId: string;
    /**
     * Special characters such as a period, comma, space, and the at sign (@) are converted to underscores (_). More details: https://learn.microsoft.com/en-us/sharepoint/list-onedrive-urls
     */
    userPrincipalName: string;
}

export interface SourceMicrosoftOnedriveConfigurationStream {
    /**
     * When the state history of the file store is full, syncs will only read files that were last modified in the provided day range. Default: 3
     */
    daysToSyncIfHistoryIsFull: number;
    /**
     * The configuration options that are used to alter how to read incoming files that deviate from the standard formatting.
     */
    format: outputs.SourceMicrosoftOnedriveConfigurationStreamFormat;
    /**
     * The pattern used to specify which files should be selected from the file system. For more information on glob pattern matching look <a href="https://en.wikipedia.org/wiki/Glob_(programming)">here</a>.
     */
    globs?: string[];
    /**
     * The schema that will be used to validate records extracted from the file. This will override the stream schema that is auto-detected from incoming files.
     */
    inputSchema?: string;
    /**
     * The name of the stream.
     */
    name: string;
    /**
     * When enabled, syncs will not validate or structure records against the stream's schema. Default: false
     */
    schemaless: boolean;
    /**
     * The name of the validation policy that dictates sync behavior when a record does not adhere to the stream schema. Default: "Emit Record"; must be one of ["Emit Record", "Skip Record", "Wait for Discover"]
     */
    validationPolicy: string;
}

export interface SourceMicrosoftOnedriveConfigurationStreamFormat {
    avroFormat?: outputs.SourceMicrosoftOnedriveConfigurationStreamFormatAvroFormat;
    csvFormat?: outputs.SourceMicrosoftOnedriveConfigurationStreamFormatCsvFormat;
    jsonlFormat?: outputs.SourceMicrosoftOnedriveConfigurationStreamFormatJsonlFormat;
    parquetFormat?: outputs.SourceMicrosoftOnedriveConfigurationStreamFormatParquetFormat;
    /**
     * Extract text from document formats (.pdf, .docx, .md, .pptx) and emit as one record per file.
     */
    unstructuredDocumentFormat?: outputs.SourceMicrosoftOnedriveConfigurationStreamFormatUnstructuredDocumentFormat;
}

export interface SourceMicrosoftOnedriveConfigurationStreamFormatAvroFormat {
    /**
     * Whether to convert double fields to strings. This is recommended if you have decimal numbers with a high degree of precision because there can be a loss precision when handling floating point numbers. Default: false
     */
    doubleAsString: boolean;
}

export interface SourceMicrosoftOnedriveConfigurationStreamFormatCsvFormat {
    /**
     * The character delimiting individual cells in the CSV data. This may only be a 1-character string. For tab-delimited data enter '\t'. Default: ","
     */
    delimiter: string;
    /**
     * Whether two quotes in a quoted CSV value denote a single quote in the data. Default: true
     */
    doubleQuote: boolean;
    /**
     * The character encoding of the CSV data. Leave blank to default to <strong>UTF8</strong>. See <a href="https://docs.python.org/3/library/codecs.html#standard-encodings" target="_blank">list of python encodings</a> for allowable options. Default: "utf8"
     */
    encoding: string;
    /**
     * The character used for escaping special characters. To disallow escaping, leave this field blank.
     */
    escapeChar?: string;
    /**
     * A set of case-sensitive strings that should be interpreted as false values.
     */
    falseValues?: string[];
    /**
     * How headers will be defined. `User Provided` assumes the CSV does not have a header row and uses the headers provided and `Autogenerated` assumes the CSV does not have a header row and the CDK will generate headers using for `f{i}` where `i` is the index starting from 0. Else, the default behavior is to use the header from the CSV file. If a user wants to autogenerate or provide column names for a CSV having headers, they can skip rows.
     */
    headerDefinition?: outputs.SourceMicrosoftOnedriveConfigurationStreamFormatCsvFormatHeaderDefinition;
    /**
     * Whether to ignore errors that occur when the number of fields in the CSV does not match the number of columns in the schema. Default: false
     */
    ignoreErrorsOnFieldsMismatch: boolean;
    /**
     * A set of case-sensitive strings that should be interpreted as null values. For example, if the value 'NA' should be interpreted as null, enter 'NA' in this field.
     */
    nullValues: string[];
    /**
     * The character used for quoting CSV values. To disallow quoting, make this field blank. Default: "\""
     */
    quoteChar: string;
    /**
     * The number of rows to skip after the header row. Default: 0
     */
    skipRowsAfterHeader: number;
    /**
     * The number of rows to skip before the header row. For example, if the header row is on the 3rd row, enter 2 in this field. Default: 0
     */
    skipRowsBeforeHeader: number;
    /**
     * Whether strings can be interpreted as null values. If true, strings that match the null_values set will be interpreted as null. If false, strings that match the null_values set will be interpreted as the string itself. Default: true
     */
    stringsCanBeNull: boolean;
    /**
     * A set of case-sensitive strings that should be interpreted as true values.
     */
    trueValues?: string[];
}

export interface SourceMicrosoftOnedriveConfigurationStreamFormatCsvFormatHeaderDefinition {
    autogenerated?: outputs.SourceMicrosoftOnedriveConfigurationStreamFormatCsvFormatHeaderDefinitionAutogenerated;
    fromCsv?: outputs.SourceMicrosoftOnedriveConfigurationStreamFormatCsvFormatHeaderDefinitionFromCsv;
    userProvided?: outputs.SourceMicrosoftOnedriveConfigurationStreamFormatCsvFormatHeaderDefinitionUserProvided;
}

export interface SourceMicrosoftOnedriveConfigurationStreamFormatCsvFormatHeaderDefinitionAutogenerated {
}

export interface SourceMicrosoftOnedriveConfigurationStreamFormatCsvFormatHeaderDefinitionFromCsv {
}

export interface SourceMicrosoftOnedriveConfigurationStreamFormatCsvFormatHeaderDefinitionUserProvided {
    /**
     * The column names that will be used while emitting the CSV records
     */
    columnNames: string[];
}

export interface SourceMicrosoftOnedriveConfigurationStreamFormatJsonlFormat {
}

export interface SourceMicrosoftOnedriveConfigurationStreamFormatParquetFormat {
    /**
     * Whether to convert decimal fields to floats. There is a loss of precision when converting decimals to floats, so this is not recommended. Default: false
     */
    decimalAsFloat: boolean;
}

export interface SourceMicrosoftOnedriveConfigurationStreamFormatUnstructuredDocumentFormat {
    /**
     * Processing configuration
     */
    processing?: outputs.SourceMicrosoftOnedriveConfigurationStreamFormatUnstructuredDocumentFormatProcessing;
    /**
     * If true, skip files that cannot be parsed and pass the error message along as the _ab_source_file_parse_error field. If false, fail the sync. Default: true
     */
    skipUnprocessableFiles: boolean;
    /**
     * The strategy used to parse documents. `fast` extracts text directly from the document which doesn't work for all files. `ocr_only` is more reliable, but slower. `hi_res` is the most reliable, but requires an API key and a hosted instance of unstructured and can't be used with local mode. See the unstructured.io documentation for more details: https://unstructured-io.github.io/unstructured/core/partition.html#partition-pdf. Default: "auto"; must be one of ["auto", "fast", "ocr_only", "hi_res"]
     */
    strategy: string;
}

export interface SourceMicrosoftOnedriveConfigurationStreamFormatUnstructuredDocumentFormatProcessing {
    /**
     * Process files locally, supporting `fast` and `ocr` modes. This is the default option.
     */
    local?: outputs.SourceMicrosoftOnedriveConfigurationStreamFormatUnstructuredDocumentFormatProcessingLocal;
}

export interface SourceMicrosoftOnedriveConfigurationStreamFormatUnstructuredDocumentFormatProcessingLocal {
}

export interface SourceMicrosoftOnedriveResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceMicrosoftOnedriveResourceAllocationDefault;
    jobSpecifics: outputs.SourceMicrosoftOnedriveResourceAllocationJobSpecific[];
}

export interface SourceMicrosoftOnedriveResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceMicrosoftOnedriveResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceMicrosoftOnedriveResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceMicrosoftOnedriveResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceMicrosoftSharepointConfiguration {
    /**
     * Credentials for connecting to the One Drive API
     */
    credentials: outputs.SourceMicrosoftSharepointConfigurationCredentials;
    deliveryMethod?: outputs.SourceMicrosoftSharepointConfigurationDeliveryMethod;
    /**
     * Path to a specific folder within the drives to search for files. Leave empty to search all folders of the drives. This does not apply to shared items. Default: "."
     */
    folderPath: string;
    /**
     * Specifies the location(s) to search for files. Valid options are 'ACCESSIBLE_DRIVES' for all SharePoint drives the user can access, 'SHARED_ITEMS' for shared items the user has access to, and 'ALL' to search both. Default: "ALL"; must be one of ["ACCESSIBLE_DRIVES", "SHARED_ITEMS", "ALL"]
     */
    searchScope: string;
    /**
     * Url of SharePoint site to search for files. Leave empty to search in the main site. Use 'https://<tenant_name>.sharepoint.com/sites/' to iterate over all sites. Default: ""
     */
    siteUrl: string;
    /**
     * UTC date and time in the format 2017-01-25T00:00:00.000000Z. Any file modified before this date will not be replicated.
     */
    startDate?: string;
    /**
     * Each instance of this configuration defines a <a href="https://docs.airbyte.com/cloud/core-concepts#stream">stream</a>. Use this to define which files belong in the stream, their format, and how they should be parsed and validated. When sending data to warehouse destination such as Snowflake or BigQuery, each stream is a separate table.
     */
    streams: outputs.SourceMicrosoftSharepointConfigurationStream[];
}

export interface SourceMicrosoftSharepointConfigurationCredentials {
    /**
     * OAuthCredentials class to hold authentication details for Microsoft OAuth authentication.
     * This class uses pydantic for data validation and settings management.
     */
    authenticateViaMicrosoftOAuth?: outputs.SourceMicrosoftSharepointConfigurationCredentialsAuthenticateViaMicrosoftOAuth;
    /**
     * ServiceCredentials class for service key authentication.
     * This class is structured similarly to OAuthCredentials but for a different authentication method.
     */
    serviceKeyAuthentication?: outputs.SourceMicrosoftSharepointConfigurationCredentialsServiceKeyAuthentication;
}

export interface SourceMicrosoftSharepointConfigurationCredentialsAuthenticateViaMicrosoftOAuth {
    /**
     * Client ID of your Microsoft developer application
     */
    clientId: string;
    /**
     * Client Secret of your Microsoft developer application
     */
    clientSecret: string;
    /**
     * Refresh Token of your Microsoft developer application
     */
    refreshToken?: string;
    /**
     * Tenant ID of the Microsoft SharePoint user
     */
    tenantId: string;
}

export interface SourceMicrosoftSharepointConfigurationCredentialsServiceKeyAuthentication {
    /**
     * Client ID of your Microsoft developer application
     */
    clientId: string;
    /**
     * Client Secret of your Microsoft developer application
     */
    clientSecret: string;
    /**
     * Tenant ID of the Microsoft SharePoint user
     */
    tenantId: string;
    /**
     * Special characters such as a period, comma, space, and the at sign (@) are converted to underscores (_). More details: https://learn.microsoft.com/en-us/sharepoint/list-onedrive-urls
     */
    userPrincipalName: string;
}

export interface SourceMicrosoftSharepointConfigurationDeliveryMethod {
    /**
     * Copy raw files without parsing their contents. Bits are copied into the destination exactly as they appeared in the source. Recommended for use with unstructured text data, non-text and compressed files.
     */
    copyRawFiles?: outputs.SourceMicrosoftSharepointConfigurationDeliveryMethodCopyRawFiles;
    /**
     * Recommended - Extract and load structured records into your destination of choice. This is the classic method of moving data in Airbyte. It allows for blocking and hashing individual fields or files from a structured schema. Data can be flattened, typed and deduped depending on the destination.
     */
    replicateRecords?: outputs.SourceMicrosoftSharepointConfigurationDeliveryMethodReplicateRecords;
}

export interface SourceMicrosoftSharepointConfigurationDeliveryMethodCopyRawFiles {
    /**
     * If enabled, sends subdirectory folder structure along with source file names to the destination. Otherwise, files will be synced by their names only. This option is ignored when file-based replication is not enabled. Default: true
     */
    preserveDirectoryStructure: boolean;
}

export interface SourceMicrosoftSharepointConfigurationDeliveryMethodReplicateRecords {
}

export interface SourceMicrosoftSharepointConfigurationStream {
    /**
     * When the state history of the file store is full, syncs will only read files that were last modified in the provided day range. Default: 3
     */
    daysToSyncIfHistoryIsFull: number;
    /**
     * The configuration options that are used to alter how to read incoming files that deviate from the standard formatting.
     */
    format: outputs.SourceMicrosoftSharepointConfigurationStreamFormat;
    /**
     * The pattern used to specify which files should be selected from the file system. For more information on glob pattern matching look <a href="https://en.wikipedia.org/wiki/Glob_(programming)">here</a>.
     */
    globs?: string[];
    /**
     * The schema that will be used to validate records extracted from the file. This will override the stream schema that is auto-detected from incoming files.
     */
    inputSchema?: string;
    /**
     * The name of the stream.
     */
    name: string;
    /**
     * The number of resent files which will be used to discover the schema for this stream.
     */
    recentNFilesToReadForSchemaDiscovery?: number;
    /**
     * When enabled, syncs will not validate or structure records against the stream's schema. Default: false
     */
    schemaless: boolean;
    /**
     * The name of the validation policy that dictates sync behavior when a record does not adhere to the stream schema. Default: "Emit Record"; must be one of ["Emit Record", "Skip Record", "Wait for Discover"]
     */
    validationPolicy: string;
}

export interface SourceMicrosoftSharepointConfigurationStreamFormat {
    avroFormat?: outputs.SourceMicrosoftSharepointConfigurationStreamFormatAvroFormat;
    csvFormat?: outputs.SourceMicrosoftSharepointConfigurationStreamFormatCsvFormat;
    excelFormat?: outputs.SourceMicrosoftSharepointConfigurationStreamFormatExcelFormat;
    jsonlFormat?: outputs.SourceMicrosoftSharepointConfigurationStreamFormatJsonlFormat;
    parquetFormat?: outputs.SourceMicrosoftSharepointConfigurationStreamFormatParquetFormat;
    /**
     * Extract text from document formats (.pdf, .docx, .md, .pptx) and emit as one record per file.
     */
    unstructuredDocumentFormat?: outputs.SourceMicrosoftSharepointConfigurationStreamFormatUnstructuredDocumentFormat;
}

export interface SourceMicrosoftSharepointConfigurationStreamFormatAvroFormat {
    /**
     * Whether to convert double fields to strings. This is recommended if you have decimal numbers with a high degree of precision because there can be a loss precision when handling floating point numbers. Default: false
     */
    doubleAsString: boolean;
}

export interface SourceMicrosoftSharepointConfigurationStreamFormatCsvFormat {
    /**
     * The character delimiting individual cells in the CSV data. This may only be a 1-character string. For tab-delimited data enter '\t'. Default: ","
     */
    delimiter: string;
    /**
     * Whether two quotes in a quoted CSV value denote a single quote in the data. Default: true
     */
    doubleQuote: boolean;
    /**
     * The character encoding of the CSV data. Leave blank to default to <strong>UTF8</strong>. See <a href="https://docs.python.org/3/library/codecs.html#standard-encodings" target="_blank">list of python encodings</a> for allowable options. Default: "utf8"
     */
    encoding: string;
    /**
     * The character used for escaping special characters. To disallow escaping, leave this field blank.
     */
    escapeChar?: string;
    /**
     * A set of case-sensitive strings that should be interpreted as false values.
     */
    falseValues?: string[];
    /**
     * How headers will be defined. `User Provided` assumes the CSV does not have a header row and uses the headers provided and `Autogenerated` assumes the CSV does not have a header row and the CDK will generate headers using for `f{i}` where `i` is the index starting from 0. Else, the default behavior is to use the header from the CSV file. If a user wants to autogenerate or provide column names for a CSV having headers, they can skip rows.
     */
    headerDefinition?: outputs.SourceMicrosoftSharepointConfigurationStreamFormatCsvFormatHeaderDefinition;
    /**
     * Whether to ignore errors that occur when the number of fields in the CSV does not match the number of columns in the schema. Default: false
     */
    ignoreErrorsOnFieldsMismatch: boolean;
    /**
     * A set of case-sensitive strings that should be interpreted as null values. For example, if the value 'NA' should be interpreted as null, enter 'NA' in this field.
     */
    nullValues: string[];
    /**
     * The character used for quoting CSV values. To disallow quoting, make this field blank. Default: "\""
     */
    quoteChar: string;
    /**
     * The number of rows to skip after the header row. Default: 0
     */
    skipRowsAfterHeader: number;
    /**
     * The number of rows to skip before the header row. For example, if the header row is on the 3rd row, enter 2 in this field. Default: 0
     */
    skipRowsBeforeHeader: number;
    /**
     * Whether strings can be interpreted as null values. If true, strings that match the null_values set will be interpreted as null. If false, strings that match the null_values set will be interpreted as the string itself. Default: true
     */
    stringsCanBeNull: boolean;
    /**
     * A set of case-sensitive strings that should be interpreted as true values.
     */
    trueValues?: string[];
}

export interface SourceMicrosoftSharepointConfigurationStreamFormatCsvFormatHeaderDefinition {
    autogenerated?: outputs.SourceMicrosoftSharepointConfigurationStreamFormatCsvFormatHeaderDefinitionAutogenerated;
    fromCsv?: outputs.SourceMicrosoftSharepointConfigurationStreamFormatCsvFormatHeaderDefinitionFromCsv;
    userProvided?: outputs.SourceMicrosoftSharepointConfigurationStreamFormatCsvFormatHeaderDefinitionUserProvided;
}

export interface SourceMicrosoftSharepointConfigurationStreamFormatCsvFormatHeaderDefinitionAutogenerated {
}

export interface SourceMicrosoftSharepointConfigurationStreamFormatCsvFormatHeaderDefinitionFromCsv {
}

export interface SourceMicrosoftSharepointConfigurationStreamFormatCsvFormatHeaderDefinitionUserProvided {
    /**
     * The column names that will be used while emitting the CSV records
     */
    columnNames: string[];
}

export interface SourceMicrosoftSharepointConfigurationStreamFormatExcelFormat {
}

export interface SourceMicrosoftSharepointConfigurationStreamFormatJsonlFormat {
}

export interface SourceMicrosoftSharepointConfigurationStreamFormatParquetFormat {
    /**
     * Whether to convert decimal fields to floats. There is a loss of precision when converting decimals to floats, so this is not recommended. Default: false
     */
    decimalAsFloat: boolean;
}

export interface SourceMicrosoftSharepointConfigurationStreamFormatUnstructuredDocumentFormat {
    /**
     * Processing configuration
     */
    processing?: outputs.SourceMicrosoftSharepointConfigurationStreamFormatUnstructuredDocumentFormatProcessing;
    /**
     * If true, skip files that cannot be parsed and pass the error message along as the _ab_source_file_parse_error field. If false, fail the sync. Default: true
     */
    skipUnprocessableFiles: boolean;
    /**
     * The strategy used to parse documents. `fast` extracts text directly from the document which doesn't work for all files. `ocr_only` is more reliable, but slower. `hi_res` is the most reliable, but requires an API key and a hosted instance of unstructured and can't be used with local mode. See the unstructured.io documentation for more details: https://unstructured-io.github.io/unstructured/core/partition.html#partition-pdf. Default: "auto"; must be one of ["auto", "fast", "ocr_only", "hi_res"]
     */
    strategy: string;
}

export interface SourceMicrosoftSharepointConfigurationStreamFormatUnstructuredDocumentFormatProcessing {
    /**
     * Process files locally, supporting `fast` and `ocr` modes. This is the default option.
     */
    local?: outputs.SourceMicrosoftSharepointConfigurationStreamFormatUnstructuredDocumentFormatProcessingLocal;
}

export interface SourceMicrosoftSharepointConfigurationStreamFormatUnstructuredDocumentFormatProcessingLocal {
}

export interface SourceMicrosoftSharepointResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceMicrosoftSharepointResourceAllocationDefault;
    jobSpecifics: outputs.SourceMicrosoftSharepointResourceAllocationJobSpecific[];
}

export interface SourceMicrosoftSharepointResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceMicrosoftSharepointResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceMicrosoftSharepointResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceMicrosoftSharepointResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceMicrosoftTeamsConfiguration {
    /**
     * Choose how to authenticate to Microsoft
     */
    credentials?: outputs.SourceMicrosoftTeamsConfigurationCredentials;
    /**
     * Specifies the length of time over which the Team Device Report stream is aggregated. The supported values are: D7, D30, D90, and D180.
     */
    period: string;
}

export interface SourceMicrosoftTeamsConfigurationCredentials {
    authenticateViaMicrosoft?: outputs.SourceMicrosoftTeamsConfigurationCredentialsAuthenticateViaMicrosoft;
    authenticateViaMicrosoftOAuth20?: outputs.SourceMicrosoftTeamsConfigurationCredentialsAuthenticateViaMicrosoftOAuth20;
}

export interface SourceMicrosoftTeamsConfigurationCredentialsAuthenticateViaMicrosoft {
    /**
     * The Client ID of your Microsoft Teams developer application.
     */
    clientId: string;
    /**
     * The Client Secret of your Microsoft Teams developer application.
     */
    clientSecret: string;
    /**
     * A globally unique identifier (GUID) that is different than your organization name or domain. Follow these steps to obtain: open one of the Teams where you belong inside the Teams Application > Click on the … next to the Team title > Click on Get link to team > Copy the link to the team and grab the tenant ID form the URL
     */
    tenantId: string;
}

export interface SourceMicrosoftTeamsConfigurationCredentialsAuthenticateViaMicrosoftOAuth20 {
    /**
     * The Client ID of your Microsoft Teams developer application.
     */
    clientId: string;
    /**
     * The Client Secret of your Microsoft Teams developer application.
     */
    clientSecret: string;
    /**
     * A Refresh Token to renew the expired Access Token.
     */
    refreshToken: string;
    /**
     * A globally unique identifier (GUID) that is different than your organization name or domain. Follow these steps to obtain: open one of the Teams where you belong inside the Teams Application > Click on the … next to the Team title > Click on Get link to team > Copy the link to the team and grab the tenant ID form the URL
     */
    tenantId: string;
}

export interface SourceMicrosoftTeamsResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceMicrosoftTeamsResourceAllocationDefault;
    jobSpecifics: outputs.SourceMicrosoftTeamsResourceAllocationJobSpecific[];
}

export interface SourceMicrosoftTeamsResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceMicrosoftTeamsResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceMicrosoftTeamsResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceMicrosoftTeamsResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceMiroConfiguration {
    apiKey: string;
}

export interface SourceMiroResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceMiroResourceAllocationDefault;
    jobSpecifics: outputs.SourceMiroResourceAllocationJobSpecific[];
}

export interface SourceMiroResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceMiroResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceMiroResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceMiroResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceMissiveConfiguration {
    apiKey: string;
    /**
     * Kind parameter for `contact_groups` stream. Default: "group"; must be one of ["group", "organization"]
     */
    kind: string;
    /**
     * Max records per page limit. Default: "50"
     */
    limit: string;
    startDate: string;
}

export interface SourceMissiveResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceMissiveResourceAllocationDefault;
    jobSpecifics: outputs.SourceMissiveResourceAllocationJobSpecific[];
}

export interface SourceMissiveResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceMissiveResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceMissiveResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceMissiveResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceMixmaxConfiguration {
    apiKey: string;
    startDate: string;
}

export interface SourceMixmaxResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceMixmaxResourceAllocationDefault;
    jobSpecifics: outputs.SourceMixmaxResourceAllocationJobSpecific[];
}

export interface SourceMixmaxResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceMixmaxResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceMixmaxResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceMixmaxResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceMixpanelConfiguration {
    /**
     * A period of time for attributing results to ads and the lookback period after those actions occur during which ad results are counted. Default attribution window is 5 days. (This value should be non-negative integer). Default: 5
     */
    attributionWindow: number;
    /**
     * Choose how to authenticate to Mixpanel
     */
    credentials: outputs.SourceMixpanelConfigurationCredentials;
    /**
     * Defines window size in days, that used to slice through data. You can reduce it, if amount of data in each window is too big for your environment. (This value should be positive integer). Default: 30
     */
    dateWindowSize: number;
    /**
     * The date in the format YYYY-MM-DD. Any data after this date will not be replicated. Left empty to always sync to most recent date
     */
    endDate?: string;
    /**
     * The number of seconds to look back from the last synced timestamp during incremental syncs of the Export stream. This ensures no data is missed due to delays in event recording. Default is 0 seconds. Must be a non-negative integer. Default: 0
     */
    exportLookbackWindow: number;
    /**
     * The number of records to fetch per request for the engage stream. Default is 1000. If you are experiencing long sync times with this stream, try increasing this value. Default: 1000
     */
    pageSize: number;
    /**
     * Time zone in which integer date times are stored. The project timezone may be found in the project settings in the <a href="https://help.mixpanel.com/hc/en-us/articles/115004547203-Manage-Timezones-for-Projects-in-Mixpanel">Mixpanel console</a>. Default: "US/Pacific"
     */
    projectTimezone: string;
    /**
     * The region of mixpanel domain instance either US or EU. Default: "US"; must be one of ["US", "EU"]
     */
    region: string;
    /**
     * Setting this config parameter to TRUE ensures that new properties on events and engage records are captured. Otherwise new properties will be ignored. Default: true
     */
    selectPropertiesByDefault: boolean;
    /**
     * The date in the format YYYY-MM-DD. Any data before this date will not be replicated. If this option is not set, the connector will replicate data from up to one year ago by default.
     */
    startDate?: string;
}

export interface SourceMixpanelConfigurationCredentials {
    projectSecret?: outputs.SourceMixpanelConfigurationCredentialsProjectSecret;
    serviceAccount?: outputs.SourceMixpanelConfigurationCredentialsServiceAccount;
}

export interface SourceMixpanelConfigurationCredentialsProjectSecret {
    /**
     * Mixpanel project secret. See the <a href="https://developer.mixpanel.com/reference/project-secret#managing-a-projects-secret">docs</a> for more information on how to obtain this.
     */
    apiSecret: string;
}

export interface SourceMixpanelConfigurationCredentialsServiceAccount {
    /**
     * Your project ID number. See the <a href="https://help.mixpanel.com/hc/en-us/articles/115004490503-Project-Settings#project-id">docs</a> for more information on how to obtain this.
     */
    projectId: number;
    /**
     * Mixpanel Service Account Secret. See the <a href="https://developer.mixpanel.com/reference/service-accounts">docs</a> for more information on how to obtain this.
     */
    secret: string;
    /**
     * Mixpanel Service Account Username. See the <a href="https://developer.mixpanel.com/reference/service-accounts">docs</a> for more information on how to obtain this.
     */
    username: string;
}

export interface SourceMixpanelResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceMixpanelResourceAllocationDefault;
    jobSpecifics: outputs.SourceMixpanelResourceAllocationJobSpecific[];
}

export interface SourceMixpanelResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceMixpanelResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceMixpanelResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceMixpanelResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceModeConfiguration {
    /**
     * API secret to use as the password for Basic Authentication.
     */
    apiSecret: string;
    /**
     * API token to use as the username for Basic Authentication.
     */
    apiToken: string;
    workspace: string;
}

export interface SourceModeResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceModeResourceAllocationDefault;
    jobSpecifics: outputs.SourceModeResourceAllocationJobSpecific[];
}

export interface SourceModeResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceModeResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceModeResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceModeResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceMondayConfiguration {
    /**
     * The IDs of the boards that the Items and Boards streams will extract records from. When left empty, streams will extract records from all boards that exist within the account.
     */
    boardIds?: number[];
    credentials?: outputs.SourceMondayConfigurationCredentials;
    /**
     * The number of worker threads to use for the sync. Default: 4
     */
    numWorkers: number;
}

export interface SourceMondayConfigurationCredentials {
    apiToken?: outputs.SourceMondayConfigurationCredentialsApiToken;
    oAuth20?: outputs.SourceMondayConfigurationCredentialsOAuth20;
}

export interface SourceMondayConfigurationCredentialsApiToken {
    /**
     * API Token for making authenticated requests.
     */
    apiToken: string;
}

export interface SourceMondayConfigurationCredentialsOAuth20 {
    /**
     * Access Token for making authenticated requests.
     */
    accessToken: string;
    /**
     * The Client ID of your OAuth application.
     */
    clientId: string;
    /**
     * The Client Secret of your OAuth application.
     */
    clientSecret: string;
    /**
     * Slug/subdomain of the account, or the first part of the URL that comes before .monday.com. Default: ""
     */
    subdomain: string;
}

export interface SourceMondayResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceMondayResourceAllocationDefault;
    jobSpecifics: outputs.SourceMondayResourceAllocationJobSpecific[];
}

export interface SourceMondayResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceMondayResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceMondayResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceMondayResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceMongodbV2Configuration {
    /**
     * Configures the MongoDB cluster type.
     */
    databaseConfig: outputs.SourceMongodbV2ConfigurationDatabaseConfig;
    /**
     * The maximum number of documents to sample when attempting to discover the unique fields for a collection. Default: 10000
     */
    discoverSampleSize: number;
    /**
     * The amount of time an initial load is allowed to continue for before catching up on CDC logs. Default: 8
     */
    initialLoadTimeoutHours: number;
    /**
     * The amount of time the connector will wait when it launches to determine if there is new data to sync or not. Defaults to 300 seconds. Valid range: 120 seconds to 1200 seconds. Default: 300
     */
    initialWaitingSeconds: number;
    /**
     * Determines whether Airbyte should fail or re-sync data in case of an stale/invalid cursor value into the WAL. If 'Fail sync' is chosen, a user will have to manually reset the connection before being able to continue syncing data. If 'Re-sync data' is chosen, Airbyte will automatically trigger a refresh but could lead to higher cloud costs and data loss. Default: "Fail sync"; must be one of ["Fail sync", "Re-sync data"]
     */
    invalidCdcCursorPositionBehavior: string;
    /**
     * The size of the internal queue. This may interfere with memory consumption and efficiency of the connector, please be careful. Default: 10000
     */
    queueSize: number;
    /**
     * Determines how Airbyte looks up the value of an updated document. If 'Lookup' is chosen, the current value of the document will be read. If 'Post Image' is chosen, then the version of the document immediately after an update will be read. WARNING : Severe data loss will occur if this option is chosen and the appropriate settings are not set on your Mongo instance : https://www.mongodb.com/docs/manual/changeStreams/#change-streams-with-document-pre-and-post-images. Default: "Lookup"; must be one of ["Lookup", "Post Image"]
     */
    updateCaptureMode: string;
}

export interface SourceMongodbV2ConfigurationDatabaseConfig {
    /**
     * MongoDB Atlas-hosted cluster configured as a replica set
     */
    mongoDbAtlasReplicaSet?: outputs.SourceMongodbV2ConfigurationDatabaseConfigMongoDbAtlasReplicaSet;
    /**
     * MongoDB self-hosted cluster configured as a replica set
     */
    selfManagedReplicaSet?: outputs.SourceMongodbV2ConfigurationDatabaseConfigSelfManagedReplicaSet;
}

export interface SourceMongodbV2ConfigurationDatabaseConfigMongoDbAtlasReplicaSet {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * The authentication source where the user information is stored.  See https://www.mongodb.com/docs/manual/reference/connection-string/#mongodb-urioption-urioption.authSource for more details. Default: "admin"
     */
    authSource: string;
    /**
     * The connection string of the cluster that you want to replicate.
     */
    connectionString: string;
    /**
     * The name of the MongoDB database that contains the collection(s) to replicate.
     */
    database: string;
    /**
     * The password associated with this username.
     */
    password: string;
    /**
     * When enabled, syncs will validate and structure records against the stream's schema. Default: true
     */
    schemaEnforced: boolean;
    /**
     * The username which is used to access the database.
     */
    username: string;
}

export interface SourceMongodbV2ConfigurationDatabaseConfigSelfManagedReplicaSet {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * The authentication source where the user information is stored. Default: "admin"
     */
    authSource: string;
    /**
     * The connection string of the cluster that you want to replicate.  https://www.mongodb.com/docs/manual/reference/connection-string/#find-your-self-hosted-deployment-s-connection-string for more information.
     */
    connectionString: string;
    /**
     * The name of the MongoDB database that contains the collection(s) to replicate.
     */
    database: string;
    /**
     * The password associated with this username.
     */
    password?: string;
    /**
     * When enabled, syncs will validate and structure records against the stream's schema. Default: true
     */
    schemaEnforced: boolean;
    /**
     * The username which is used to access the database.
     */
    username?: string;
}

export interface SourceMongodbV2ResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceMongodbV2ResourceAllocationDefault;
    jobSpecifics: outputs.SourceMongodbV2ResourceAllocationJobSpecific[];
}

export interface SourceMongodbV2ResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceMongodbV2ResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceMongodbV2ResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceMongodbV2ResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceMssqlConfiguration {
    /**
     * The name of the database.
     */
    database: string;
    /**
     * The hostname of the database.
     */
    host: string;
    /**
     * Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '&'. (example: key1=value1&key2=value2&key3=value3).
     */
    jdbcUrlParams?: string;
    /**
     * The password associated with the username.
     */
    password: string;
    /**
     * The port of the database.
     */
    port: number;
    /**
     * Configures how data is extracted from the database.
     */
    replicationMethod?: outputs.SourceMssqlConfigurationReplicationMethod;
    /**
     * The list of schemas to sync from. Defaults to user. Case sensitive.
     */
    schemas?: string[];
    /**
     * The encryption method which is used when communicating with the database.
     */
    sslMethod?: outputs.SourceMssqlConfigurationSslMethod;
    /**
     * Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
     */
    tunnelMethod?: outputs.SourceMssqlConfigurationTunnelMethod;
    /**
     * The username which is used to access the database.
     */
    username: string;
}

export interface SourceMssqlConfigurationReplicationMethod {
    /**
     * <i>Recommended</i> - Incrementally reads new inserts, updates, and deletes using the SQL Server's <a href="https://docs.airbyte.com/integrations/sources/mssql/#change-data-capture-cdc">change data capture feature</a>. This must be enabled on your database.
     */
    readChangesUsingChangeDataCaptureCdc?: outputs.SourceMssqlConfigurationReplicationMethodReadChangesUsingChangeDataCaptureCdc;
    /**
     * Incrementally detects new inserts and updates using the <a href="https://docs.airbyte.com/understanding-airbyte/connections/incremental-append/#user-defined-cursor">cursor column</a> chosen when configuring a connection (e.g. created_at, updated_at).
     */
    scanChangesWithUserDefinedCursor?: outputs.SourceMssqlConfigurationReplicationMethodScanChangesWithUserDefinedCursor;
}

export interface SourceMssqlConfigurationReplicationMethodReadChangesUsingChangeDataCaptureCdc {
    /**
     * The amount of time an initial load is allowed to continue for before catching up on CDC logs. Default: 8
     */
    initialLoadTimeoutHours: number;
    /**
     * The amount of time the connector will wait when it launches to determine if there is new data to sync or not. Defaults to 300 seconds. Valid range: 120 seconds to 3600 seconds. Read about <a href="https://docs.airbyte.com/integrations/sources/mysql/#change-data-capture-cdc">initial waiting time</a>. Default: 300
     */
    initialWaitingSeconds: number;
    /**
     * Determines whether Airbyte should fail or re-sync data in case of an stale/invalid cursor value into the WAL. If 'Fail sync' is chosen, a user will have to manually reset the connection before being able to continue syncing data. If 'Re-sync data' is chosen, Airbyte will automatically trigger a refresh but could lead to higher cloud costs and data loss. Default: "Fail sync"; must be one of ["Fail sync", "Re-sync data"]
     */
    invalidCdcCursorPositionBehavior: string;
    /**
     * The size of the internal queue. This may interfere with memory consumption and efficiency of the connector, please be careful. Default: 10000
     */
    queueSize: number;
}

export interface SourceMssqlConfigurationReplicationMethodScanChangesWithUserDefinedCursor {
}

export interface SourceMssqlConfigurationSslMethod {
    /**
     * Use the certificate provided by the server without verification. (For testing purposes only!)
     */
    encryptedTrustServerCertificate?: outputs.SourceMssqlConfigurationSslMethodEncryptedTrustServerCertificate;
    /**
     * Verify and use the certificate provided by the server.
     */
    encryptedVerifyCertificate?: outputs.SourceMssqlConfigurationSslMethodEncryptedVerifyCertificate;
    /**
     * Data transfer will not be encrypted.
     */
    unencrypted?: outputs.SourceMssqlConfigurationSslMethodUnencrypted;
}

export interface SourceMssqlConfigurationSslMethodEncryptedTrustServerCertificate {
}

export interface SourceMssqlConfigurationSslMethodEncryptedVerifyCertificate {
    /**
     * certificate of the server, or of the CA that signed the server certificate
     */
    certificate?: string;
    /**
     * Specifies the host name of the server. The value of this property must match the subject property of the certificate.
     */
    hostNameInCertificate?: string;
}

export interface SourceMssqlConfigurationSslMethodUnencrypted {
}

export interface SourceMssqlConfigurationTunnelMethod {
    noTunnel?: outputs.SourceMssqlConfigurationTunnelMethodNoTunnel;
    passwordAuthentication?: outputs.SourceMssqlConfigurationTunnelMethodPasswordAuthentication;
    sshKeyAuthentication?: outputs.SourceMssqlConfigurationTunnelMethodSshKeyAuthentication;
}

export interface SourceMssqlConfigurationTunnelMethodNoTunnel {
}

export interface SourceMssqlConfigurationTunnelMethodPasswordAuthentication {
    /**
     * Hostname of the jump server host that allows inbound ssh tunnel.
     */
    tunnelHost: string;
    /**
     * Port on the proxy/jump server that accepts inbound ssh connections. Default: 22
     */
    tunnelPort: number;
    /**
     * OS-level username for logging into the jump server host
     */
    tunnelUser: string;
    /**
     * OS-level password for logging into the jump server host
     */
    tunnelUserPassword: string;
}

export interface SourceMssqlConfigurationTunnelMethodSshKeyAuthentication {
    /**
     * OS-level user account ssh key credentials in RSA PEM format ( created with ssh-keygen -t rsa -m PEM -f myuser_rsa )
     */
    sshKey: string;
    /**
     * Hostname of the jump server host that allows inbound ssh tunnel.
     */
    tunnelHost: string;
    /**
     * Port on the proxy/jump server that accepts inbound ssh connections. Default: 22
     */
    tunnelPort: number;
    /**
     * OS-level username for logging into the jump server host.
     */
    tunnelUser: string;
}

export interface SourceMssqlResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceMssqlResourceAllocationDefault;
    jobSpecifics: outputs.SourceMssqlResourceAllocationJobSpecific[];
}

export interface SourceMssqlResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceMssqlResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceMssqlResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceMssqlResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceMuxConfiguration {
    password?: string;
    /**
     * The playback id for your video asset shown in website details
     */
    playbackId?: string;
    startDate: string;
    username: string;
}

export interface SourceMuxResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceMuxResourceAllocationDefault;
    jobSpecifics: outputs.SourceMuxResourceAllocationJobSpecific[];
}

export interface SourceMuxResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceMuxResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceMuxResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceMuxResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceMyHoursConfiguration {
    /**
     * Your My Hours username
     */
    email: string;
    /**
     * Pagination size used for retrieving logs in days. Default: 30
     */
    logsBatchSize: number;
    /**
     * The password associated to the username
     */
    password: string;
    /**
     * Start date for collecting time logs
     */
    startDate: string;
}

export interface SourceMyHoursResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceMyHoursResourceAllocationDefault;
    jobSpecifics: outputs.SourceMyHoursResourceAllocationJobSpecific[];
}

export interface SourceMyHoursResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceMyHoursResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceMyHoursResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceMyHoursResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceMysqlConfiguration {
    /**
     * When this feature is enabled, during schema discovery the connector will query each table or view individually to check access privileges and inaccessible tables, views, or columns therein will be removed. In large schemas, this might cause schema discovery to take too long, in which case it might be advisable to disable this feature. Default: true
     */
    checkPrivileges: boolean;
    /**
     * How often (in seconds) a stream should checkpoint, when possible. Default: 300
     */
    checkpointTargetIntervalSeconds: number;
    /**
     * Maximum number of concurrent queries to the database. Default: 1
     */
    concurrency: number;
    /**
     * The database name.
     */
    database: string;
    /**
     * Hostname of the database.
     */
    host: string;
    /**
     * Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '&'. (example: key1=value1&key2=value2&key3=value3).
     */
    jdbcUrlParams?: string;
    /**
     * The password associated with the username.
     */
    password?: string;
    /**
     * Port of the database. Default: 3306
     */
    port: number;
    /**
     * Configures how data is extracted from the database.
     */
    replicationMethod: outputs.SourceMysqlConfigurationReplicationMethod;
    /**
     * The encryption method with is used when communicating with the database.
     */
    sslMode?: outputs.SourceMysqlConfigurationSslMode;
    /**
     * Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
     */
    tunnelMethod?: outputs.SourceMysqlConfigurationTunnelMethod;
    /**
     * The username which is used to access the database.
     */
    username: string;
}

export interface SourceMysqlConfigurationReplicationMethod {
    /**
     * <i>Recommended</i> - Incrementally reads new inserts, updates, and deletes using MySQL's <a href="https://docs.airbyte.com/integrations/sources/mssql/#change-data-capture-cdc"> change data capture feature</a>. This must be enabled on your database.
     */
    readChangesUsingChangeDataCaptureCdc?: outputs.SourceMysqlConfigurationReplicationMethodReadChangesUsingChangeDataCaptureCdc;
    /**
     * Incrementally detects new inserts and updates using the <a href="https://docs.airbyte.com/understanding-airbyte/connections/incremental-append/#user-defined-cursor">cursor column</a> chosen when configuring a connection (e.g. created_at, updated_at).
     */
    scanChangesWithUserDefinedCursor?: outputs.SourceMysqlConfigurationReplicationMethodScanChangesWithUserDefinedCursor;
}

export interface SourceMysqlConfigurationReplicationMethodReadChangesUsingChangeDataCaptureCdc {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * The amount of time an initial load is allowed to continue for before catching up on CDC logs. Default: 8
     */
    initialLoadTimeoutHours: number;
    /**
     * Determines whether Airbyte should fail or re-sync data in case of an stale/invalid cursor value in the mined logs. If 'Fail sync' is chosen, a user will have to manually reset the connection before being able to continue syncing data. If 'Re-sync data' is chosen, Airbyte will automatically trigger a refresh but could lead to higher cloud costs and data loss. Default: "Fail sync"; must be one of ["Fail sync", "Re-sync data"]
     */
    invalidCdcCursorPositionBehavior: string;
    /**
     * Default: "CDC"; must be "CDC"
     */
    method: string;
    /**
     * Enter the configured MySQL server timezone. This should only be done if the configured timezone in your MySQL instance does not conform to IANNA standard.
     */
    serverTimezone?: string;
}

export interface SourceMysqlConfigurationReplicationMethodScanChangesWithUserDefinedCursor {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * Default: "STANDARD"; must be "STANDARD"
     */
    method: string;
}

export interface SourceMysqlConfigurationSslMode {
    /**
     * To allow unencrypted communication only when the source doesn't support encryption.
     */
    preferred?: outputs.SourceMysqlConfigurationSslModePreferred;
    /**
     * To always require encryption. Note: The connection will fail if the source doesn't support encryption.
     */
    required?: outputs.SourceMysqlConfigurationSslModeRequired;
    /**
     * To always require encryption and verify that the source has a valid SSL certificate.
     */
    verifyCa?: outputs.SourceMysqlConfigurationSslModeVerifyCa;
    /**
     * To always require encryption and verify that the source has a valid SSL certificate.
     */
    verifyIdentity?: outputs.SourceMysqlConfigurationSslModeVerifyIdentity;
}

export interface SourceMysqlConfigurationSslModePreferred {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * Default: "preferred"; must be "preferred"
     */
    mode: string;
}

export interface SourceMysqlConfigurationSslModeRequired {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * Default: "required"; must be "required"
     */
    mode: string;
}

export interface SourceMysqlConfigurationSslModeVerifyCa {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * CA certificate
     */
    caCertificate: string;
    /**
     * Client certificate (this is not a required field, but if you want to use it, you will need to add the Client key as well)
     */
    clientCertificate?: string;
    /**
     * Client key (this is not a required field, but if you want to use it, you will need to add the Client certificate as well)
     */
    clientKey?: string;
    /**
     * Password for keystorage. This field is optional. If you do not add it - the password will be generated automatically.
     */
    clientKeyPassword?: string;
    /**
     * Default: "verify_ca"; must be "verify_ca"
     */
    mode: string;
}

export interface SourceMysqlConfigurationSslModeVerifyIdentity {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * CA certificate
     */
    caCertificate: string;
    /**
     * Client certificate (this is not a required field, but if you want to use it, you will need to add the Client key as well)
     */
    clientCertificate?: string;
    /**
     * Client key (this is not a required field, but if you want to use it, you will need to add the Client certificate as well)
     */
    clientKey?: string;
    /**
     * Password for keystorage. This field is optional. If you do not add it - the password will be generated automatically.
     */
    clientKeyPassword?: string;
    /**
     * Default: "verify_identity"; must be "verify_identity"
     */
    mode: string;
}

export interface SourceMysqlConfigurationTunnelMethod {
    /**
     * No ssh tunnel needed to connect to database
     */
    noTunnel?: outputs.SourceMysqlConfigurationTunnelMethodNoTunnel;
    /**
     * Connect through a jump server tunnel host using username and password authentication
     */
    passwordAuthentication?: outputs.SourceMysqlConfigurationTunnelMethodPasswordAuthentication;
    /**
     * Connect through a jump server tunnel host using username and ssh key
     */
    sshKeyAuthentication?: outputs.SourceMysqlConfigurationTunnelMethodSshKeyAuthentication;
}

export interface SourceMysqlConfigurationTunnelMethodNoTunnel {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * Default: "NO_TUNNEL"; must be "NO_TUNNEL"
     */
    tunnelMethod: string;
}

export interface SourceMysqlConfigurationTunnelMethodPasswordAuthentication {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * Hostname of the jump server host that allows inbound ssh tunnel.
     */
    tunnelHost: string;
    /**
     * Default: "SSH_PASSWORD_AUTH"; must be "SSH_PASSWORD_AUTH"
     */
    tunnelMethod: string;
    /**
     * Port on the proxy/jump server that accepts inbound ssh connections. Default: 22
     */
    tunnelPort: number;
    /**
     * OS-level username for logging into the jump server host
     */
    tunnelUser: string;
    /**
     * OS-level password for logging into the jump server host
     */
    tunnelUserPassword: string;
}

export interface SourceMysqlConfigurationTunnelMethodSshKeyAuthentication {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * OS-level user account ssh key credentials in RSA PEM format ( created with ssh-keygen -t rsa -m PEM -f myuser_rsa )
     */
    sshKey: string;
    /**
     * Hostname of the jump server host that allows inbound ssh tunnel.
     */
    tunnelHost: string;
    /**
     * Default: "SSH_KEY_AUTH"; must be "SSH_KEY_AUTH"
     */
    tunnelMethod: string;
    /**
     * Port on the proxy/jump server that accepts inbound ssh connections. Default: 22
     */
    tunnelPort: number;
    /**
     * OS-level username for logging into the jump server host
     */
    tunnelUser: string;
}

export interface SourceMysqlResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceMysqlResourceAllocationDefault;
    jobSpecifics: outputs.SourceMysqlResourceAllocationJobSpecific[];
}

export interface SourceMysqlResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceMysqlResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceMysqlResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceMysqlResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceN8nConfiguration {
    /**
     * Your API KEY. See <a href="https://docs.n8n.io/api/authentication">here</a>
     */
    apiKey: string;
    /**
     * Hostname of the n8n instance
     */
    host: string;
}

export interface SourceN8nResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceN8nResourceAllocationDefault;
    jobSpecifics: outputs.SourceN8nResourceAllocationJobSpecific[];
}

export interface SourceN8nResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceN8nResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceN8nResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceN8nResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceNasaConfiguration {
    /**
     * API access key used to retrieve data from the NASA APOD API.
     */
    apiKey: string;
    /**
     * Indicates whether concept tags should be returned with the rest of the response.  The concept tags are not necessarily included in the explanation, but rather derived from common search tags that are associated with the description text. (Better than just pure text search.) Defaults to False. Default: false
     */
    conceptTags: boolean;
    /**
     * A positive integer, no greater than 100. If this is specified then `count` randomly  chosen images will be returned in a JSON array. Cannot be used in conjunction with  `date` or `start_date` and `end_date`.
     */
    count?: number;
    /**
     * Indicates that end of a date range. If `start_date` is specified without an `end_date` then `end_date` defaults to the current date.
     */
    endDate?: string;
    /**
     * Indicates the start of a date range. All images in the range from `start_date` to  `end_date` will be returned in a JSON array. Must be after 1995-06-16, the first day an APOD picture was posted. There are no images for tomorrow available through this API.
     */
    startDate?: string;
    /**
     * Indicates whether the API should return a thumbnail image URL for video files. If set to True, the API returns URL of video thumbnail. If an APOD is not a video, this parameter is ignored. Default: false
     */
    thumbs: boolean;
}

export interface SourceNasaResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceNasaResourceAllocationDefault;
    jobSpecifics: outputs.SourceNasaResourceAllocationJobSpecific[];
}

export interface SourceNasaResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceNasaResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceNasaResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceNasaResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceNavanConfiguration {
    clientId: string;
    clientSecret: string;
    startDate: string;
}

export interface SourceNavanResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceNavanResourceAllocationDefault;
    jobSpecifics: outputs.SourceNavanResourceAllocationJobSpecific[];
}

export interface SourceNavanResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceNavanResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceNavanResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceNavanResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceNebiusAiConfiguration {
    /**
     * API key or access token
     */
    apiKey: string;
    /**
     * Limit for each response objects. Default: "20"
     */
    limit: string;
    startDate: string;
}

export interface SourceNebiusAiResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceNebiusAiResourceAllocationDefault;
    jobSpecifics: outputs.SourceNebiusAiResourceAllocationJobSpecific[];
}

export interface SourceNebiusAiResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceNebiusAiResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceNebiusAiResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceNebiusAiResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceNetsuiteConfiguration {
    /**
     * Consumer key associated with your integration
     */
    consumerKey: string;
    /**
     * Consumer secret associated with your integration
     */
    consumerSecret: string;
    /**
     * The API names of the Netsuite objects you want to sync. Setting this speeds up the connection setup process by limiting the number of schemas that need to be retrieved from Netsuite.
     */
    objectTypes: string[];
    /**
     * Netsuite realm e.g. 2344535, as for `production` or 2344535_SB1, as for the `sandbox`
     */
    realm: string;
    /**
     * Starting point for your data replication, in format of "YYYY-MM-DDTHH:mm:ssZ"
     */
    startDatetime: string;
    /**
     * Access token key
     */
    tokenKey: string;
    /**
     * Access token secret
     */
    tokenSecret: string;
    /**
     * The amount of days used to query the data with date chunks. Set smaller value, if you have lots of data. Default: 30
     */
    windowInDays: number;
}

export interface SourceNetsuiteEnterpriseConfiguration {
    /**
     * The username which is used to access the database.
     */
    accountId: string;
    /**
     * Configure how to authenticate to Netsuite. Options include username/password or token-based authentication.
     */
    authenticationMethod: outputs.SourceNetsuiteEnterpriseConfigurationAuthenticationMethod;
    /**
     * When this feature is enabled, during schema discovery the connector will query each table or view individually to check access privileges and inaccessible tables, views, or columns therein will be removed. In large schemas, this might cause schema discovery to take too long, in which case it might be advisable to disable this feature. Default: true
     */
    checkPrivileges: boolean;
    /**
     * How often (in seconds) a stream should checkpoint, when possible. Default: 300
     */
    checkpointTargetIntervalSeconds: number;
    /**
     * Maximum number of concurrent queries to the database. Default: 1
     */
    concurrency: number;
    /**
     * Configures how data is extracted from the database.
     */
    cursor: outputs.SourceNetsuiteEnterpriseConfigurationCursor;
    /**
     * Hostname of the database.
     */
    host: string;
    /**
     * Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '&'. (example: key1=value1&key2=value2&key3=value3).
     */
    jdbcUrlParams?: string;
    /**
     * Port of the database. Default: 1708
     */
    port: number;
    /**
     * The username which is used to access the database.
     */
    roleId: string;
    /**
     * Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
     */
    tunnelMethod: outputs.SourceNetsuiteEnterpriseConfigurationTunnelMethod;
    /**
     * The username which is used to access the database.
     */
    username: string;
}

export interface SourceNetsuiteEnterpriseConfigurationAuthenticationMethod {
    /**
     * Authenticate using a password.
     */
    passwordAuthentication?: outputs.SourceNetsuiteEnterpriseConfigurationAuthenticationMethodPasswordAuthentication;
    /**
     * Authenticate using a token-based authentication method. This requires a consumer key and secret, as well as a token ID and secret.
     */
    tokenBasedAuthentication?: outputs.SourceNetsuiteEnterpriseConfigurationAuthenticationMethodTokenBasedAuthentication;
}

export interface SourceNetsuiteEnterpriseConfigurationAuthenticationMethodPasswordAuthentication {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * Default: "password_authentication"; must be "password_authentication"
     */
    authenticationMethod: string;
    /**
     * The password associated with the username.
     */
    password: string;
}

export interface SourceNetsuiteEnterpriseConfigurationAuthenticationMethodTokenBasedAuthentication {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * Default: "token_based_authentication"; must be "token_based_authentication"
     */
    authenticationMethod: string;
    /**
     * The consumer key used for token-based authentication. This is generated in NetSuite when creating an integration record.
     */
    clientId: string;
    /**
     * The consumer secret used for token-based authentication. This is generated in NetSuite when creating an integration record.
     */
    clientSecret: string;
    /**
     * The token ID used for token-based authentication. This is generated in NetSuite when creating a token-based role.
     */
    tokenId: string;
    /**
     * The token secret used for token-based authentication. This is generated in NetSuite when creating a token-based role.Ensure to keep this value secure.
     */
    tokenSecret: string;
}

export interface SourceNetsuiteEnterpriseConfigurationCursor {
    /**
     * Incrementally detects new inserts and updates using the <a href="https://docs.airbyte.com/understanding-airbyte/connections/incremental-append/#user-defined-cursor">cursor column</a> chosen when configuring a connection (e.g. created_at, updated_at).
     */
    scanChangesWithUserDefinedCursor?: outputs.SourceNetsuiteEnterpriseConfigurationCursorScanChangesWithUserDefinedCursor;
}

export interface SourceNetsuiteEnterpriseConfigurationCursorScanChangesWithUserDefinedCursor {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * Default: "user_defined"; must be "user_defined"
     */
    cursorMethod: string;
}

export interface SourceNetsuiteEnterpriseConfigurationTunnelMethod {
    /**
     * No ssh tunnel needed to connect to database
     */
    noTunnel?: outputs.SourceNetsuiteEnterpriseConfigurationTunnelMethodNoTunnel;
    /**
     * Connect through a jump server tunnel host using username and password authentication
     */
    passwordAuthentication?: outputs.SourceNetsuiteEnterpriseConfigurationTunnelMethodPasswordAuthentication;
    /**
     * Connect through a jump server tunnel host using username and ssh key
     */
    sshKeyAuthentication?: outputs.SourceNetsuiteEnterpriseConfigurationTunnelMethodSshKeyAuthentication;
}

export interface SourceNetsuiteEnterpriseConfigurationTunnelMethodNoTunnel {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * Default: "NO_TUNNEL"; must be "NO_TUNNEL"
     */
    tunnelMethod: string;
}

export interface SourceNetsuiteEnterpriseConfigurationTunnelMethodPasswordAuthentication {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * Hostname of the jump server host that allows inbound ssh tunnel.
     */
    tunnelHost: string;
    /**
     * Default: "SSH_PASSWORD_AUTH"; must be "SSH_PASSWORD_AUTH"
     */
    tunnelMethod: string;
    /**
     * Port on the proxy/jump server that accepts inbound ssh connections. Default: 22
     */
    tunnelPort: number;
    /**
     * OS-level username for logging into the jump server host
     */
    tunnelUser: string;
    /**
     * OS-level password for logging into the jump server host
     */
    tunnelUserPassword: string;
}

export interface SourceNetsuiteEnterpriseConfigurationTunnelMethodSshKeyAuthentication {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * OS-level user account ssh key credentials in RSA PEM format ( created with ssh-keygen -t rsa -m PEM -f myuser_rsa )
     */
    sshKey: string;
    /**
     * Hostname of the jump server host that allows inbound ssh tunnel.
     */
    tunnelHost: string;
    /**
     * Default: "SSH_KEY_AUTH"; must be "SSH_KEY_AUTH"
     */
    tunnelMethod: string;
    /**
     * Port on the proxy/jump server that accepts inbound ssh connections. Default: 22
     */
    tunnelPort: number;
    /**
     * OS-level username for logging into the jump server host
     */
    tunnelUser: string;
}

export interface SourceNetsuiteEnterpriseResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceNetsuiteEnterpriseResourceAllocationDefault;
    jobSpecifics: outputs.SourceNetsuiteEnterpriseResourceAllocationJobSpecific[];
}

export interface SourceNetsuiteEnterpriseResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceNetsuiteEnterpriseResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceNetsuiteEnterpriseResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceNetsuiteEnterpriseResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceNetsuiteResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceNetsuiteResourceAllocationDefault;
    jobSpecifics: outputs.SourceNetsuiteResourceAllocationJobSpecific[];
}

export interface SourceNetsuiteResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceNetsuiteResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceNetsuiteResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceNetsuiteResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceNewsApiConfiguration {
    /**
     * API Key
     */
    apiKey: string;
    /**
     * The category you want to get top headlines for. Default: "business"; must be one of ["business", "entertainment", "general", "health", "science", "sports", "technology"]
     */
    category: string;
    /**
     * The 2-letter ISO 3166-1 code of the country you want to get headlines
     * for. You can't mix this with the sources parameter.
     * Default: "us"; must be one of ["ae", "ar", "at", "au", "be", "bg", "br", "ca", "ch", "cn", "co", "cu", "cz", "de", "eg", "fr", "gb", "gr", "hk", "hu", "id", "ie", "il", "in", "it", "jp", "kr", "lt", "lv", "ma", "mx", "my", "ng", "nl", "no", "nz", "ph", "pl", "pt", "ro", "rs", "ru", "sa", "se", "sg", "si", "sk", "th", "tr", "tw", "ua", "us", "ve", "za"]
     */
    country: string;
    /**
     * A comma-seperated string of domains (eg bbc.co.uk, techcrunch.com,
     * engadget.com) to restrict the search to.
     */
    domains?: string[];
    /**
     * A date and optional time for the newest article allowed. This should
     * be in ISO 8601 format.
     */
    endDate?: string;
    /**
     * A comma-seperated string of domains (eg bbc.co.uk, techcrunch.com,
     * engadget.com) to remove from the results.
     */
    excludeDomains?: string[];
    /**
     * The 2-letter ISO-639-1 code of the language you want to get headlines
     * for. Possible options: ar de en es fr he it nl no pt ru se ud zh.
     * must be one of ["ar", "de", "en", "es", "fr", "he", "it", "nl", "no", "pt", "ru", "se", "ud", "zh"]
     */
    language?: string;
    /**
     * Where to apply search query. Possible values are: title, description,
     * content.
     */
    searchIns?: string[];
    /**
     * Search query. See https://newsapi.org/docs/endpoints/everything for 
     * information.
     */
    searchQuery?: string;
    /**
     * The order to sort the articles in. Possible options: relevancy,
     * popularity, publishedAt.
     * Default: "publishedAt"; must be one of ["relevancy", "popularity", "publishedAt"]
     */
    sortBy: string;
    /**
     * Identifiers (maximum 20) for the news sources or blogs you want
     * headlines from. Use the `/sources` endpoint to locate these
     * programmatically or look at the sources index:
     * https://newsapi.com/sources. Will override both country and category.
     */
    sources?: string[];
    /**
     * A date and optional time for the oldest article allowed. This should
     * be in ISO 8601 format.
     */
    startDate?: string;
}

export interface SourceNewsApiResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceNewsApiResourceAllocationDefault;
    jobSpecifics: outputs.SourceNewsApiResourceAllocationJobSpecific[];
}

export interface SourceNewsApiResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceNewsApiResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceNewsApiResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceNewsApiResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceNewsdataConfiguration {
    /**
     * API Key
     */
    apiKey: string;
    /**
     * Categories (maximum 5) to restrict the search to.
     */
    categories?: string[];
    /**
     * 2-letter ISO 3166-1 countries (maximum 5) to restrict the search to.
     */
    countries?: string[];
    /**
     * Domains (maximum 5) to restrict the search to. Use the sources stream to find top sources id.
     */
    domains?: string[];
    /**
     * Languages (maximum 5) to restrict the search to.
     */
    languages?: string[];
    /**
     * Parsed as JSON.
     */
    oneOf?: string;
}

export interface SourceNewsdataIoConfiguration {
    apiKey: string;
    /**
     * Search the news articles for a specific category. You can add up to 5 categories in a single query.
     */
    categories?: string[];
    /**
     * Search the news articles from a specific country. You can add up to 5 countries in a single query. Example: au, jp, br
     */
    countries?: string[];
    /**
     * Search the news articles for specific domains or news sources. You can add up to 5 domains in a single query.
     */
    domains?: string[];
    /**
     * Choose an end date. Now UTC is default value
     */
    endDate?: string;
    /**
     * Search the news articles for a specific language. You can add up to 5 languages in a single query.
     */
    languages?: string[];
    /**
     * Search news articles for specific keywords or phrases present in the news title, content, URL, meta keywords and meta description.
     */
    searchQuery?: string;
    startDate: string;
}

export interface SourceNewsdataIoResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceNewsdataIoResourceAllocationDefault;
    jobSpecifics: outputs.SourceNewsdataIoResourceAllocationJobSpecific[];
}

export interface SourceNewsdataIoResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceNewsdataIoResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceNewsdataIoResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceNewsdataIoResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceNewsdataResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceNewsdataResourceAllocationDefault;
    jobSpecifics: outputs.SourceNewsdataResourceAllocationJobSpecific[];
}

export interface SourceNewsdataResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceNewsdataResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceNewsdataResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceNewsdataResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceNinjaoneRmmConfiguration {
    /**
     * Token could be generated natively by authorize section of NinjaOne swagger documentation `https://app.ninjarmm.com/apidocs/?links.active=authorization`
     */
    apiKey: string;
    startDate: string;
}

export interface SourceNinjaoneRmmResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceNinjaoneRmmResourceAllocationDefault;
    jobSpecifics: outputs.SourceNinjaoneRmmResourceAllocationJobSpecific[];
}

export interface SourceNinjaoneRmmResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceNinjaoneRmmResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceNinjaoneRmmResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceNinjaoneRmmResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceNocrmConfiguration {
    /**
     * API key to use. Generate it from the admin section of your noCRM.io account.
     */
    apiKey: string;
    /**
     * The subdomain specific to your noCRM.io account, e.g., 'yourcompany' in 'yourcompany.nocrm.io'.
     */
    subdomain: string;
}

export interface SourceNocrmResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceNocrmResourceAllocationDefault;
    jobSpecifics: outputs.SourceNocrmResourceAllocationJobSpecific[];
}

export interface SourceNocrmResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceNocrmResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceNocrmResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceNocrmResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceNorthpassLmsConfiguration {
    apiKey: string;
}

export interface SourceNorthpassLmsResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceNorthpassLmsResourceAllocationDefault;
    jobSpecifics: outputs.SourceNorthpassLmsResourceAllocationJobSpecific[];
}

export interface SourceNorthpassLmsResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceNorthpassLmsResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceNorthpassLmsResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceNorthpassLmsResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceNotionConfiguration {
    /**
     * Choose either OAuth (recommended for Airbyte Cloud) or Access Token. See our <a href='https://docs.airbyte.com/integrations/sources/notion#setup-guide'>docs</a> for more information.
     */
    credentials?: outputs.SourceNotionConfigurationCredentials;
    /**
     * UTC date and time in the format YYYY-MM-DDTHH:MM:SS.000Z. During incremental sync, any data generated before this date will not be replicated. If left blank, the start date will be set to 2 years before the present date.
     */
    startDate?: string;
}

export interface SourceNotionConfigurationCredentials {
    accessToken?: outputs.SourceNotionConfigurationCredentialsAccessToken;
    oAuth20?: outputs.SourceNotionConfigurationCredentialsOAuth20;
}

export interface SourceNotionConfigurationCredentialsAccessToken {
    /**
     * The Access Token for your private Notion integration. See the <a href='https://docs.airbyte.com/integrations/sources/notion#step-1-create-an-integration-in-notion'>docs</a> for more information on how to obtain this token.
     */
    token: string;
}

export interface SourceNotionConfigurationCredentialsOAuth20 {
    /**
     * The Access Token received by completing the OAuth flow for your Notion integration. See our <a href='https://docs.airbyte.com/integrations/sources/notion#step-2-set-permissions-and-acquire-authorization-credentials'>docs</a> for more information.
     */
    accessToken: string;
    /**
     * The Client ID of your Notion integration. See our <a href='https://docs.airbyte.com/integrations/sources/notion#step-2-set-permissions-and-acquire-authorization-credentials'>docs</a> for more information.
     */
    clientId: string;
    /**
     * The Client Secret of your Notion integration. See our <a href='https://docs.airbyte.com/integrations/sources/notion#step-2-set-permissions-and-acquire-authorization-credentials'>docs</a> for more information.
     */
    clientSecret: string;
}

export interface SourceNotionResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceNotionResourceAllocationDefault;
    jobSpecifics: outputs.SourceNotionResourceAllocationJobSpecific[];
}

export interface SourceNotionResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceNotionResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceNotionResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceNotionResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceNutshellConfiguration {
    password?: string;
    username: string;
}

export interface SourceNutshellResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceNutshellResourceAllocationDefault;
    jobSpecifics: outputs.SourceNutshellResourceAllocationJobSpecific[];
}

export interface SourceNutshellResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceNutshellResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceNutshellResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceNutshellResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceNylasConfiguration {
    apiKey: string;
    /**
     * must be one of ["us", "eu"]
     */
    apiServer: string;
    endDate: string;
    startDate: string;
}

export interface SourceNylasResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceNylasResourceAllocationDefault;
    jobSpecifics: outputs.SourceNylasResourceAllocationJobSpecific[];
}

export interface SourceNylasResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceNylasResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceNylasResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceNylasResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceNytimesConfiguration {
    /**
     * API Key
     */
    apiKey: string;
    /**
     * End date to stop the article retrieval (format YYYY-MM)
     */
    endDate?: string;
    /**
     * Period of time (in days). must be one of ["1", "7", "30"]
     */
    period: number;
    /**
     * Share Type. must be "facebook"
     */
    shareType?: string;
    /**
     * Start date to begin the article retrieval (format YYYY-MM)
     */
    startDate: string;
}

export interface SourceNytimesResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceNytimesResourceAllocationDefault;
    jobSpecifics: outputs.SourceNytimesResourceAllocationJobSpecific[];
}

export interface SourceNytimesResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceNytimesResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceNytimesResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceNytimesResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceOktaConfiguration {
    credentials?: outputs.SourceOktaConfigurationCredentials;
    /**
     * The Okta domain. See the <a href="https://docs.airbyte.com/integrations/sources/okta">docs</a> for instructions on how to find it.
     */
    domain?: string;
    /**
     * UTC date and time in the format YYYY-MM-DDTHH:MM:SSZ. Any data before this date will not be replicated.
     */
    startDate?: string;
}

export interface SourceOktaConfigurationCredentials {
    apiToken?: outputs.SourceOktaConfigurationCredentialsApiToken;
    oAuth20?: outputs.SourceOktaConfigurationCredentialsOAuth20;
    oAuth20WithPrivateKey?: outputs.SourceOktaConfigurationCredentialsOAuth20WithPrivateKey;
}

export interface SourceOktaConfigurationCredentialsApiToken {
    /**
     * An Okta token. See the <a href="https://docs.airbyte.com/integrations/sources/okta">docs</a> for instructions on how to generate it.
     */
    apiToken: string;
}

export interface SourceOktaConfigurationCredentialsOAuth20 {
    /**
     * The Client ID of your OAuth application.
     */
    clientId: string;
    /**
     * The Client Secret of your OAuth application.
     */
    clientSecret: string;
    /**
     * Refresh Token to obtain new Access Token, when it's expired.
     */
    refreshToken: string;
}

export interface SourceOktaConfigurationCredentialsOAuth20WithPrivateKey {
    /**
     * The Client ID of your OAuth application.
     */
    clientId: string;
    /**
     * The key ID (kid).
     */
    keyId: string;
    /**
     * The private key in PEM format
     */
    privateKey: string;
    /**
     * The OAuth scope.
     */
    scope: string;
}

export interface SourceOktaResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceOktaResourceAllocationDefault;
    jobSpecifics: outputs.SourceOktaResourceAllocationJobSpecific[];
}

export interface SourceOktaResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceOktaResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceOktaResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceOktaResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceOmnisendConfiguration {
    /**
     * API Key
     */
    apiKey: string;
}

export interface SourceOmnisendResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceOmnisendResourceAllocationDefault;
    jobSpecifics: outputs.SourceOmnisendResourceAllocationJobSpecific[];
}

export interface SourceOmnisendResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceOmnisendResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceOmnisendResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceOmnisendResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceOncehubConfiguration {
    /**
     * API key to use. Find it in your OnceHub account under the API & Webhooks Integration page.
     */
    apiKey: string;
    startDate: string;
}

export interface SourceOncehubResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceOncehubResourceAllocationDefault;
    jobSpecifics: outputs.SourceOncehubResourceAllocationJobSpecific[];
}

export interface SourceOncehubResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceOncehubResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceOncehubResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceOncehubResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceOnepagecrmConfiguration {
    /**
     * Enter your API Key of your API app
     */
    password?: string;
    /**
     * Enter the user ID of your API app
     */
    username: string;
}

export interface SourceOnepagecrmResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceOnepagecrmResourceAllocationDefault;
    jobSpecifics: outputs.SourceOnepagecrmResourceAllocationJobSpecific[];
}

export interface SourceOnepagecrmResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceOnepagecrmResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceOnepagecrmResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceOnepagecrmResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceOnesignalConfiguration {
    /**
     * Applications keys, see the <a href="https://documentation.onesignal.com/docs/accounts-and-keys">docs</a> for more information on how to obtain this data
     */
    applications: outputs.SourceOnesignalConfigurationApplication[];
    /**
     * Comma-separated list of names and the value (sum/count) for the returned outcome data. See the <a href="https://documentation.onesignal.com/reference/view-outcomes">docs</a> for more details
     */
    outcomeNames: string;
    /**
     * The date from which you'd like to replicate data for OneSignal API, in the format YYYY-MM-DDT00:00:00Z. All data generated after this date will be replicated.
     */
    startDate: string;
    /**
     * OneSignal User Auth Key, see the <a href="https://documentation.onesignal.com/docs/accounts-and-keys#user-auth-key">docs</a> for more information on how to obtain this key.
     */
    userAuthKey: string;
}

export interface SourceOnesignalConfigurationApplication {
    appApiKey: string;
    appId: string;
    appName?: string;
}

export interface SourceOnesignalResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceOnesignalResourceAllocationDefault;
    jobSpecifics: outputs.SourceOnesignalResourceAllocationJobSpecific[];
}

export interface SourceOnesignalResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceOnesignalResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceOnesignalResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceOnesignalResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceOnfleetConfiguration {
    /**
     * API key to use for authenticating requests. You can create and manage your API keys in the API section of the Onfleet dashboard.
     */
    apiKey: string;
    /**
     * Placeholder for basic HTTP auth password - should be set to empty string. Default: "x"
     */
    password: string;
}

export interface SourceOnfleetResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceOnfleetResourceAllocationDefault;
    jobSpecifics: outputs.SourceOnfleetResourceAllocationJobSpecific[];
}

export interface SourceOnfleetResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceOnfleetResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceOnfleetResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceOnfleetResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceOpenDataDcConfiguration {
    apiKey: string;
    /**
     * address or place or block
     */
    location?: string;
    /**
     * A unique identifier (Master Address Repository).
     */
    marid?: string;
}

export interface SourceOpenDataDcResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceOpenDataDcResourceAllocationDefault;
    jobSpecifics: outputs.SourceOpenDataDcResourceAllocationJobSpecific[];
}

export interface SourceOpenDataDcResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceOpenDataDcResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceOpenDataDcResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceOpenDataDcResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceOpenaqConfiguration {
    apiKey: string;
    /**
     * The list of IDs of countries (comma separated) you need the data for, check more: https://docs.openaq.org/resources/countries
     */
    countryIds: string[];
}

export interface SourceOpenaqResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceOpenaqResourceAllocationDefault;
    jobSpecifics: outputs.SourceOpenaqResourceAllocationJobSpecific[];
}

export interface SourceOpenaqResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceOpenaqResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceOpenaqResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceOpenaqResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceOpenfdaConfiguration {
}

export interface SourceOpenfdaResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceOpenfdaResourceAllocationDefault;
    jobSpecifics: outputs.SourceOpenfdaResourceAllocationJobSpecific[];
}

export interface SourceOpenfdaResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceOpenfdaResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceOpenfdaResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceOpenfdaResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceOpenweatherConfiguration {
    /**
     * API KEY
     */
    appid: string;
    /**
     * You can use lang parameter to get the output in your language. The contents of the description field will be translated. See <a href="https://openweathermap.org/api/one-call-api#multi">here</a> for the list of supported languages. must be one of ["af", "al", "ar", "az", "bg", "ca", "cz", "da", "de", "el", "en", "eu", "fa", "fi", "fr", "gl", "he", "hi", "hr", "hu", "id", "it", "ja", "kr", "la", "lt", "mk", "no", "nl", "pl", "pt", "pt_br", "ro", "ru", "sv", "se", "sk", "sl", "sp", "es", "sr", "th", "tr", "ua", "uk", "vi", "zh_cn", "zh_tw", "zu"]
     */
    lang?: string;
    /**
     * Latitude, decimal (-90; 90). If you need the geocoder to automatic convert city names and zip-codes to geo coordinates and the other way around, please use the OpenWeather Geocoding API
     */
    lat: string;
    /**
     * Longitude, decimal (-180; 180). If you need the geocoder to automatic convert city names and zip-codes to geo coordinates and the other way around, please use the OpenWeather Geocoding API
     */
    lon: string;
    /**
     * True for particular day
     */
    onlyCurrent?: boolean;
    /**
     * Units of measurement. standard, metric and imperial units are available. If you do not use the units parameter, standard units will be applied by default. must be one of ["standard", "metric", "imperial"]
     */
    units?: string;
}

export interface SourceOpenweatherResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceOpenweatherResourceAllocationDefault;
    jobSpecifics: outputs.SourceOpenweatherResourceAllocationJobSpecific[];
}

export interface SourceOpenweatherResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceOpenweatherResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceOpenweatherResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceOpenweatherResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceOpinionStageConfiguration {
    apiKey: string;
}

export interface SourceOpinionStageResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceOpinionStageResourceAllocationDefault;
    jobSpecifics: outputs.SourceOpinionStageResourceAllocationJobSpecific[];
}

export interface SourceOpinionStageResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceOpinionStageResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceOpinionStageResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceOpinionStageResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceOpsgenieConfiguration {
    /**
     * API token used to access the Opsgenie platform
     */
    apiToken: string;
    /**
     * Service endpoint to use for API calls. Default: "api.opsgenie.com"
     */
    endpoint: string;
    /**
     * The date from which you'd like to replicate data from Opsgenie in the format of YYYY-MM-DDT00:00:00Z. All data generated after this date will be replicated. Note that it will be used only in the following incremental streams: issues.
     */
    startDate?: string;
}

export interface SourceOpsgenieResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceOpsgenieResourceAllocationDefault;
    jobSpecifics: outputs.SourceOpsgenieResourceAllocationJobSpecific[];
}

export interface SourceOpsgenieResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceOpsgenieResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceOpsgenieResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceOpsgenieResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceOracleConfiguration {
    /**
     * Connect data that will be used for DB connection
     */
    connectionData?: outputs.SourceOracleConfigurationConnectionData;
    /**
     * The encryption method with is used when communicating with the database.
     */
    encryption?: outputs.SourceOracleConfigurationEncryption;
    /**
     * Hostname of the database.
     */
    host: string;
    /**
     * Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '&'. (example: key1=value1&key2=value2&key3=value3).
     */
    jdbcUrlParams?: string;
    /**
     * The password associated with the username.
     */
    password?: string;
    /**
     * Port of the database.
     * Oracle Corporations recommends the following port numbers:
     * 1521 - Default listening port for client connections to the listener. 
     * 2484 - Recommended and officially registered listening port for client connections to the listener using TCP/IP with SSL
     * Default: 1521
     */
    port: number;
    /**
     * The list of schemas to sync from. Defaults to user. Case sensitive.
     */
    schemas?: string[];
    /**
     * Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
     */
    tunnelMethod?: outputs.SourceOracleConfigurationTunnelMethod;
    /**
     * The username which is used to access the database.
     */
    username: string;
}

export interface SourceOracleConfigurationConnectionData {
    /**
     * Use service name
     */
    serviceName?: outputs.SourceOracleConfigurationConnectionDataServiceName;
    /**
     * Use SID (Oracle System Identifier)
     */
    systemIdsid?: outputs.SourceOracleConfigurationConnectionDataSystemIdsid;
}

export interface SourceOracleConfigurationConnectionDataServiceName {
    serviceName: string;
}

export interface SourceOracleConfigurationConnectionDataSystemIdsid {
    sid: string;
}

export interface SourceOracleConfigurationEncryption {
    /**
     * The native network encryption gives you the ability to encrypt database connections, without the configuration overhead of TCP/IP and SSL/TLS and without the need to open and listen on different ports.
     */
    nativeNetworkEncryptionNne?: outputs.SourceOracleConfigurationEncryptionNativeNetworkEncryptionNne;
    /**
     * Verify and use the certificate provided by the server.
     */
    tlsEncryptedVerifyCertificate?: outputs.SourceOracleConfigurationEncryptionTlsEncryptedVerifyCertificate;
    /**
     * Data transfer will not be encrypted.
     */
    unencrypted?: outputs.SourceOracleConfigurationEncryptionUnencrypted;
}

export interface SourceOracleConfigurationEncryptionNativeNetworkEncryptionNne {
    /**
     * This parameter defines what encryption algorithm is used. Default: "AES256"; must be one of ["AES256", "RC4_56", "3DES168"]
     */
    encryptionAlgorithm: string;
}

export interface SourceOracleConfigurationEncryptionTlsEncryptedVerifyCertificate {
    /**
     * Privacy Enhanced Mail (PEM) files are concatenated certificate containers frequently used in certificate installations.
     */
    sslCertificate: string;
}

export interface SourceOracleConfigurationEncryptionUnencrypted {
}

export interface SourceOracleConfigurationTunnelMethod {
    noTunnel?: outputs.SourceOracleConfigurationTunnelMethodNoTunnel;
    passwordAuthentication?: outputs.SourceOracleConfigurationTunnelMethodPasswordAuthentication;
    sshKeyAuthentication?: outputs.SourceOracleConfigurationTunnelMethodSshKeyAuthentication;
}

export interface SourceOracleConfigurationTunnelMethodNoTunnel {
}

export interface SourceOracleConfigurationTunnelMethodPasswordAuthentication {
    /**
     * Hostname of the jump server host that allows inbound ssh tunnel.
     */
    tunnelHost: string;
    /**
     * Port on the proxy/jump server that accepts inbound ssh connections. Default: 22
     */
    tunnelPort: number;
    /**
     * OS-level username for logging into the jump server host
     */
    tunnelUser: string;
    /**
     * OS-level password for logging into the jump server host
     */
    tunnelUserPassword: string;
}

export interface SourceOracleConfigurationTunnelMethodSshKeyAuthentication {
    /**
     * OS-level user account ssh key credentials in RSA PEM format ( created with ssh-keygen -t rsa -m PEM -f myuser_rsa )
     */
    sshKey: string;
    /**
     * Hostname of the jump server host that allows inbound ssh tunnel.
     */
    tunnelHost: string;
    /**
     * Port on the proxy/jump server that accepts inbound ssh connections. Default: 22
     */
    tunnelPort: number;
    /**
     * OS-level username for logging into the jump server host.
     */
    tunnelUser: string;
}

export interface SourceOracleEnterpriseConfiguration {
    /**
     * When this feature is enabled, during schema discovery the connector will query each table or view individually to check access privileges and inaccessible tables, views, or columns therein will be removed. In large schemas, this might cause schema discovery to take too long, in which case it might be advisable to disable this feature. Default: true
     */
    checkPrivileges: boolean;
    /**
     * How often (in seconds) a stream should checkpoint, when possible. Default: 300
     */
    checkpointTargetIntervalSeconds: number;
    /**
     * Maximum number of concurrent queries to the database. Default: 1
     */
    concurrency: number;
    /**
     * The scheme by which to establish a database connection.
     */
    connectionData: outputs.SourceOracleEnterpriseConfigurationConnectionData;
    /**
     * Configures how data is extracted from the database.
     */
    cursor: outputs.SourceOracleEnterpriseConfigurationCursor;
    /**
     * The encryption method with is used when communicating with the database.
     */
    encryption: outputs.SourceOracleEnterpriseConfigurationEncryption;
    /**
     * Hostname of the database.
     */
    host: string;
    /**
     * Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '&'. (example: key1=value1&key2=value2&key3=value3).
     */
    jdbcUrlParams?: string;
    /**
     * The password associated with the username.
     */
    password?: string;
    /**
     * Port of the database.
     * Oracle Corporations recommends the following port numbers:
     * 1521 - Default listening port for client connections to the listener. 
     * 2484 - Recommended and officially registered listening port for client connections to the listener using TCP/IP with SSL.
     * Default: 1521
     */
    port: number;
    /**
     * The list of schemas to sync from. Defaults to user. Case sensitive.
     */
    schemas?: string[];
    /**
     * Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
     */
    tunnelMethod: outputs.SourceOracleEnterpriseConfigurationTunnelMethod;
    /**
     * The username which is used to access the database.
     */
    username: string;
}

export interface SourceOracleEnterpriseConfigurationConnectionData {
    /**
     * Use service name.
     */
    serviceName?: outputs.SourceOracleEnterpriseConfigurationConnectionDataServiceName;
    /**
     * Use Oracle System Identifier.
     */
    systemIdsid?: outputs.SourceOracleEnterpriseConfigurationConnectionDataSystemIdsid;
}

export interface SourceOracleEnterpriseConfigurationConnectionDataServiceName {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * Default: "service_name"; must be "service_name"
     */
    connectionType: string;
    serviceName: string;
}

export interface SourceOracleEnterpriseConfigurationConnectionDataSystemIdsid {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * Default: "sid"; must be "sid"
     */
    connectionType: string;
    sid: string;
}

export interface SourceOracleEnterpriseConfigurationCursor {
    /**
     * <i>Recommended</i> - Incrementally reads new inserts, updates, and deletes using Oracle's <a href="https://docs.airbyte.com/integrations/enterprise-connectors/source-oracle#getting-started"> change data capture feature</a>. This must be enabled on your database.
     */
    readChangesUsingChangeDataCaptureCdc?: outputs.SourceOracleEnterpriseConfigurationCursorReadChangesUsingChangeDataCaptureCdc;
    /**
     * Incrementally detects new inserts and updates using the <a href="https://docs.airbyte.com/understanding-airbyte/connections/incremental-append/#user-defined-cursor">cursor column</a> chosen when configuring a connection (e.g. created_at, updated_at).
     */
    scanChangesWithUserDefinedCursor?: outputs.SourceOracleEnterpriseConfigurationCursorScanChangesWithUserDefinedCursor;
}

export interface SourceOracleEnterpriseConfigurationCursorReadChangesUsingChangeDataCaptureCdc {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * Default: "cdc"; must be "cdc"
     */
    cursorMethod: string;
    /**
     * The amount of time to allow the Debezium Engine to shut down, in seconds. Default: 60
     */
    debeziumShutdownTimeoutSeconds: number;
    /**
     * The amount of time an initial load is allowed to continue for before catching up on CDC events. Default: 8
     */
    initialLoadTimeoutHours: number;
    /**
     * Determines whether Airbyte should fail or re-sync data in case of an stale/invalid cursor value in the mined logs. If 'Fail sync' is chosen, a user will have to manually reset the connection before being able to continue syncing data. If 'Re-sync data' is chosen, Airbyte will automatically trigger a refresh but could lead to higher cloud costs and data loss. Default: "Fail sync"; must be one of ["Fail sync", "Re-sync data"]
     */
    invalidCdcCursorPositionBehavior: string;
}

export interface SourceOracleEnterpriseConfigurationCursorScanChangesWithUserDefinedCursor {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * Default: "user_defined"; must be "user_defined"
     */
    cursorMethod: string;
}

export interface SourceOracleEnterpriseConfigurationEncryption {
    /**
     * The native network encryption gives you the ability to encrypt database connections, without the configuration overhead of TCP/IP and SSL/TLS and without the need to open and listen on different ports.
     */
    nativeNetworkEncryptionNne?: outputs.SourceOracleEnterpriseConfigurationEncryptionNativeNetworkEncryptionNne;
    /**
     * Verify and use the certificate provided by the server.
     */
    tlsEncryptedVerifyCertificate?: outputs.SourceOracleEnterpriseConfigurationEncryptionTlsEncryptedVerifyCertificate;
    /**
     * Data transfer will not be encrypted.
     */
    unencrypted?: outputs.SourceOracleEnterpriseConfigurationEncryptionUnencrypted;
}

export interface SourceOracleEnterpriseConfigurationEncryptionNativeNetworkEncryptionNne {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * This parameter defines what encryption algorithm is used. Default: "AES256"; must be one of ["AES256", "AES192", "AES128", "3DES168", "3DES112", "DES"]
     */
    encryptionAlgorithm: string;
    /**
     * Default: "client_nne"; must be "client_nne"
     */
    encryptionMethod: string;
}

export interface SourceOracleEnterpriseConfigurationEncryptionTlsEncryptedVerifyCertificate {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * Default: "encrypted_verify_certificate"; must be "encrypted_verify_certificate"
     */
    encryptionMethod: string;
    /**
     * Privacy Enhanced Mail (PEM) files are concatenated certificate containers frequently used in certificate installations.
     */
    sslCertificate: string;
}

export interface SourceOracleEnterpriseConfigurationEncryptionUnencrypted {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * Default: "unencrypted"; must be "unencrypted"
     */
    encryptionMethod: string;
}

export interface SourceOracleEnterpriseConfigurationTunnelMethod {
    /**
     * No ssh tunnel needed to connect to database
     */
    noTunnel?: outputs.SourceOracleEnterpriseConfigurationTunnelMethodNoTunnel;
    /**
     * Connect through a jump server tunnel host using username and password authentication
     */
    passwordAuthentication?: outputs.SourceOracleEnterpriseConfigurationTunnelMethodPasswordAuthentication;
    /**
     * Connect through a jump server tunnel host using username and ssh key
     */
    sshKeyAuthentication?: outputs.SourceOracleEnterpriseConfigurationTunnelMethodSshKeyAuthentication;
}

export interface SourceOracleEnterpriseConfigurationTunnelMethodNoTunnel {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * Default: "NO_TUNNEL"; must be "NO_TUNNEL"
     */
    tunnelMethod: string;
}

export interface SourceOracleEnterpriseConfigurationTunnelMethodPasswordAuthentication {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * Hostname of the jump server host that allows inbound ssh tunnel.
     */
    tunnelHost: string;
    /**
     * Default: "SSH_PASSWORD_AUTH"; must be "SSH_PASSWORD_AUTH"
     */
    tunnelMethod: string;
    /**
     * Port on the proxy/jump server that accepts inbound ssh connections. Default: 22
     */
    tunnelPort: number;
    /**
     * OS-level username for logging into the jump server host
     */
    tunnelUser: string;
    /**
     * OS-level password for logging into the jump server host
     */
    tunnelUserPassword: string;
}

export interface SourceOracleEnterpriseConfigurationTunnelMethodSshKeyAuthentication {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * OS-level user account ssh key credentials in RSA PEM format ( created with ssh-keygen -t rsa -m PEM -f myuser_rsa )
     */
    sshKey: string;
    /**
     * Hostname of the jump server host that allows inbound ssh tunnel.
     */
    tunnelHost: string;
    /**
     * Default: "SSH_KEY_AUTH"; must be "SSH_KEY_AUTH"
     */
    tunnelMethod: string;
    /**
     * Port on the proxy/jump server that accepts inbound ssh connections. Default: 22
     */
    tunnelPort: number;
    /**
     * OS-level username for logging into the jump server host
     */
    tunnelUser: string;
}

export interface SourceOracleEnterpriseResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceOracleEnterpriseResourceAllocationDefault;
    jobSpecifics: outputs.SourceOracleEnterpriseResourceAllocationJobSpecific[];
}

export interface SourceOracleEnterpriseResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceOracleEnterpriseResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceOracleEnterpriseResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceOracleEnterpriseResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceOracleResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceOracleResourceAllocationDefault;
    jobSpecifics: outputs.SourceOracleResourceAllocationJobSpecific[];
}

export interface SourceOracleResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceOracleResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceOracleResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceOracleResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceOrbConfiguration {
    /**
     * Orb API Key, issued from the Orb admin console.
     */
    apiKey: string;
    /**
     * UTC date and time in the format 2022-03-01T00:00:00Z. Any data with created_at after this data will not be synced. For Subscription Usage, this becomes the `timeframe_start` API parameter.
     */
    endDate?: string;
    /**
     * When set to N, the connector will always refresh resources created within the past N days. By default, updated objects that are not newly created are not incrementally synced. Default: 0
     */
    lookbackWindowDays: number;
    /**
     * Property key names to extract from all events, in order to enrich ledger entries corresponding to an event deduction.
     */
    numericEventPropertiesKeys?: string[];
    /**
     * Orb Plan ID to filter subscriptions that should have usage fetched.
     */
    planId?: string;
    /**
     * UTC date and time in the format 2022-03-01T00:00:00Z. Any data with created_at before this data will not be synced. For Subscription Usage, this becomes the `timeframe_start` API parameter.
     */
    startDate: string;
    /**
     * Property key names to extract from all events, in order to enrich ledger entries corresponding to an event deduction.
     */
    stringEventPropertiesKeys?: string[];
    /**
     * Property key name to group subscription usage by.
     */
    subscriptionUsageGroupingKey?: string;
}

export interface SourceOrbResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceOrbResourceAllocationDefault;
    jobSpecifics: outputs.SourceOrbResourceAllocationJobSpecific[];
}

export interface SourceOrbResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceOrbResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceOrbResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceOrbResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceOuraConfiguration {
    /**
     * API Key
     */
    apiKey: string;
    /**
     * End datetime to sync until. Default is current UTC datetime.
     */
    endDatetime?: string;
    /**
     * Start datetime to sync from. Default is current UTC datetime minus 1
     * day.
     */
    startDatetime?: string;
}

export interface SourceOuraResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceOuraResourceAllocationDefault;
    jobSpecifics: outputs.SourceOuraResourceAllocationJobSpecific[];
}

export interface SourceOuraResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceOuraResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceOuraResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceOuraResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceOutbrainAmplifyConfiguration {
    /**
     * The definition of conversion count in reports. See <a href="https://amplifyv01.docs.apiary.io/#reference/performance-reporting/periodic/retrieve-performance-statistics-for-all-marketer-campaigns-by-periodic-breakdown">the docs</a>. must be one of ["click/view_time", "conversion_time"]
     */
    conversionCount?: string;
    /**
     * Credentials for making authenticated requests requires either username/password or access_token.
     */
    credentials: outputs.SourceOutbrainAmplifyConfigurationCredentials;
    /**
     * Date in the format YYYY-MM-DD.
     */
    endDate?: string;
    /**
     * The granularity used for geo location data in reports. must be one of ["country", "region", "subregion"]
     */
    geoLocationBreakdown?: string;
    /**
     * The granularity used for periodic data in reports. See <a href="https://amplifyv01.docs.apiary.io/#reference/performance-reporting/periodic/retrieve-performance-statistics-for-all-marketer-campaigns-by-periodic-breakdown">the docs</a>. must be one of ["daily", "weekly", "monthly"]
     */
    reportGranularity?: string;
    /**
     * Date in the format YYYY-MM-DD eg. 2017-01-25. Any data before this date will not be replicated.
     */
    startDate: string;
}

export interface SourceOutbrainAmplifyConfigurationCredentials {
    accessToken?: outputs.SourceOutbrainAmplifyConfigurationCredentialsAccessToken;
    usernamePassword?: outputs.SourceOutbrainAmplifyConfigurationCredentialsUsernamePassword;
}

export interface SourceOutbrainAmplifyConfigurationCredentialsAccessToken {
    /**
     * Access Token for making authenticated requests.
     */
    accessToken: string;
}

export interface SourceOutbrainAmplifyConfigurationCredentialsUsernamePassword {
    /**
     * Add Password for authentication.
     */
    password: string;
    /**
     * Add Username for authentication.
     */
    username: string;
}

export interface SourceOutbrainAmplifyResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceOutbrainAmplifyResourceAllocationDefault;
    jobSpecifics: outputs.SourceOutbrainAmplifyResourceAllocationJobSpecific[];
}

export interface SourceOutbrainAmplifyResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceOutbrainAmplifyResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceOutbrainAmplifyResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceOutbrainAmplifyResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceOutreachConfiguration {
    /**
     * The Client ID of your Outreach developer application.
     */
    clientId: string;
    /**
     * The Client Secret of your Outreach developer application.
     */
    clientSecret: string;
    /**
     * A Redirect URI is the location where the authorization server sends the user once the app has been successfully authorized and granted an authorization code or access token.
     */
    redirectUri: string;
    /**
     * The token for obtaining the new access token.
     */
    refreshToken: string;
    /**
     * The date from which you'd like to replicate data for Outreach API, in the format YYYY-MM-DDT00:00:00.000Z. All data generated after this date will be replicated.
     */
    startDate: string;
}

export interface SourceOutreachResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceOutreachResourceAllocationDefault;
    jobSpecifics: outputs.SourceOutreachResourceAllocationJobSpecific[];
}

export interface SourceOutreachResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceOutreachResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceOutreachResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceOutreachResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceOveitConfiguration {
    /**
     * Oveit's login Email
     */
    email: string;
    /**
     * Oveit's login Password
     */
    password: string;
}

export interface SourceOveitResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceOveitResourceAllocationDefault;
    jobSpecifics: outputs.SourceOveitResourceAllocationJobSpecific[];
}

export interface SourceOveitResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceOveitResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceOveitResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceOveitResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourcePabblySubscriptionsBillingConfiguration {
    password?: string;
    username: string;
}

export interface SourcePabblySubscriptionsBillingResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourcePabblySubscriptionsBillingResourceAllocationDefault;
    jobSpecifics: outputs.SourcePabblySubscriptionsBillingResourceAllocationJobSpecific[];
}

export interface SourcePabblySubscriptionsBillingResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourcePabblySubscriptionsBillingResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourcePabblySubscriptionsBillingResourceAllocationJobSpecificResourceRequirements;
}

export interface SourcePabblySubscriptionsBillingResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourcePaddleConfiguration {
    /**
     * Your Paddle API key. You can generate it by navigating to Paddle > Developer tools > Authentication > Generate API key. Treat this key like a password and keep it secure.
     */
    apiKey: string;
    /**
     * The environment for the Paddle API, either 'sandbox' or 'live'. Default: "api"; must be one of ["api", "sandbox-api"]
     */
    environment: string;
    startDate: string;
}

export interface SourcePaddleResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourcePaddleResourceAllocationDefault;
    jobSpecifics: outputs.SourcePaddleResourceAllocationJobSpecific[];
}

export interface SourcePaddleResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourcePaddleResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourcePaddleResourceAllocationJobSpecificResourceRequirements;
}

export interface SourcePaddleResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourcePagerdutyConfiguration {
    /**
     * Fetch pipelines updated in the last number of days. Default: 90
     */
    cutoffDays: number;
    /**
     * A default severity category if not present
     */
    defaultSeverity?: string;
    /**
     * List of PagerDuty service names to ignore incidents from. If not set, all incidents will be pulled.
     */
    excludeServices?: string[];
    /**
     * If true, will return a subset of log entries that show only the most important changes to the incident. Default: true
     */
    incidentLogEntriesOverview: boolean;
    /**
     * Maximum number of PagerDuty API request retries to perform upon connection errors. The source will pause for an exponentially increasing number of seconds before retrying. Default: 5
     */
    maxRetries: number;
    /**
     * page size to use when querying PagerDuty API. Default: 25
     */
    pageSize: number;
    /**
     * List of PagerDuty service additional details to include.
     */
    serviceDetails?: string[];
    /**
     * API key for PagerDuty API authentication
     */
    token: string;
}

export interface SourcePagerdutyResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourcePagerdutyResourceAllocationDefault;
    jobSpecifics: outputs.SourcePagerdutyResourceAllocationJobSpecific[];
}

export interface SourcePagerdutyResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourcePagerdutyResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourcePagerdutyResourceAllocationJobSpecificResourceRequirements;
}

export interface SourcePagerdutyResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourcePandadocConfiguration {
    /**
     * API key to use. Find it at https://app.pandadoc.com/a/#/settings/api-dashboard/configuration
     */
    apiKey: string;
    startDate: string;
}

export interface SourcePandadocResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourcePandadocResourceAllocationDefault;
    jobSpecifics: outputs.SourcePandadocResourceAllocationJobSpecific[];
}

export interface SourcePandadocResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourcePandadocResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourcePandadocResourceAllocationJobSpecificResourceRequirements;
}

export interface SourcePandadocResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourcePaperformConfiguration {
    /**
     * API key to use. Generate it on your account page at https://paperform.co/account/developer.
     */
    apiKey: string;
}

export interface SourcePaperformResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourcePaperformResourceAllocationDefault;
    jobSpecifics: outputs.SourcePaperformResourceAllocationJobSpecific[];
}

export interface SourcePaperformResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourcePaperformResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourcePaperformResourceAllocationJobSpecificResourceRequirements;
}

export interface SourcePaperformResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourcePapersignConfiguration {
    /**
     * API key to use. Generate it on your account page at https://paperform.co/account/developer.
     */
    apiKey: string;
}

export interface SourcePapersignResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourcePapersignResourceAllocationDefault;
    jobSpecifics: outputs.SourcePapersignResourceAllocationJobSpecific[];
}

export interface SourcePapersignResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourcePapersignResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourcePapersignResourceAllocationJobSpecificResourceRequirements;
}

export interface SourcePapersignResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourcePardotConfiguration {
    /**
     * The Consumer Key that can be found when viewing your app in Salesforce
     */
    clientId: string;
    /**
     * The Consumer Secret that can be found when viewing your app in Salesforce
     */
    clientSecret: string;
    /**
     * Whether or not the the app is in a Salesforce sandbox. If you do not know what this, assume it is false. Default: false
     */
    isSandbox: boolean;
    /**
     * The maximum number of records to return per request. Default: "1000"
     */
    pageSize: string;
    /**
     * Pardot Business ID, can be found at Setup > Pardot > Pardot Account Setup
     */
    pardotBusinessUnitId: string;
    /**
     * Salesforce Refresh Token used for Airbyte to access your Salesforce account. If you don't know what this is, follow this <a href="https://medium.com/@bpmmendis94/obtain-access-refresh-tokens-from-salesforce-rest-api-a324fe4ccd9b">guide</a> to retrieve it.
     */
    refreshToken: string;
    /**
     * UTC date and time in the format 2000-01-01T00:00:00Z. Any data before this date will not be replicated. Defaults to the year Pardot was released. Default: "2007-01-01T00:00:00Z"
     */
    startDate: string;
}

export interface SourcePardotResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourcePardotResourceAllocationDefault;
    jobSpecifics: outputs.SourcePardotResourceAllocationJobSpecific[];
}

export interface SourcePardotResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourcePardotResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourcePardotResourceAllocationJobSpecificResourceRequirements;
}

export interface SourcePardotResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourcePartnerizeConfiguration {
    /**
     * The application key identifies the network you are making the request against. Find it in your account settings under 'User Application Key' at https://console.partnerize.com.
     */
    applicationKey: string;
    /**
     * The user API key identifies the user on whose behalf the request is made. Find it in your account settings under 'User API Key' at https://console.partnerize.com.
     */
    userApiKey: string;
}

export interface SourcePartnerizeResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourcePartnerizeResourceAllocationDefault;
    jobSpecifics: outputs.SourcePartnerizeResourceAllocationJobSpecific[];
}

export interface SourcePartnerizeResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourcePartnerizeResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourcePartnerizeResourceAllocationJobSpecificResourceRequirements;
}

export interface SourcePartnerizeResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourcePartnerstackConfiguration {
    /**
     * The Live Private Key for a Partnerstack account.
     */
    privateKey: string;
    /**
     * The Live Public Key for a Partnerstack account.
     */
    publicKey: string;
    /**
     * UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated.
     */
    startDate?: string;
}

export interface SourcePartnerstackResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourcePartnerstackResourceAllocationDefault;
    jobSpecifics: outputs.SourcePartnerstackResourceAllocationJobSpecific[];
}

export interface SourcePartnerstackResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourcePartnerstackResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourcePartnerstackResourceAllocationJobSpecificResourceRequirements;
}

export interface SourcePartnerstackResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourcePayfitConfiguration {
    apiKey: string;
    companyId: string;
}

export interface SourcePayfitResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourcePayfitResourceAllocationDefault;
    jobSpecifics: outputs.SourcePayfitResourceAllocationJobSpecific[];
}

export interface SourcePayfitResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourcePayfitResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourcePayfitResourceAllocationJobSpecificResourceRequirements;
}

export interface SourcePayfitResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourcePaypalTransactionConfiguration {
    /**
     * The Client ID of your Paypal developer application.
     */
    clientId: string;
    /**
     * The Client Secret of your Paypal developer application.
     */
    clientSecret: string;
    /**
     * Start Date parameter for the list dispute endpoint in <a href=\"https://datatracker.ietf.org/doc/html/rfc3339#section-5.6\">ISO format</a>. This Start Date must be in range within 180 days before present time, and requires ONLY 3 miliseconds(mandatory). If you don't use this option, it defaults to a start date set 180 days in the past.
     */
    disputeStartDate?: string;
    /**
     * End Date for data extraction in <a href=\"https://datatracker.ietf.org/doc/html/rfc3339#section-5.6\">ISO format</a>. This can be help you select specific range of time, mainly for test purposes  or data integrity tests. When this is not used, now_utc() is used by the streams. This does not apply to Disputes and Product streams.
     */
    endDate?: string;
    /**
     * Determines whether to use the sandbox or production environment. Default: false
     */
    isSandbox: boolean;
    /**
     * The key to refresh the expired access token.
     */
    refreshToken?: string;
    /**
     * Start Date for data extraction in <a href=\"https://datatracker.ietf.org/doc/html/rfc3339#section-5.6\">ISO format</a>. Date must be in range from 3 years till 12 hrs before present time.
     */
    startDate: string;
    /**
     * The number of days per request. Must be a number between 1 and 31. Default: 7
     */
    timeWindow: number;
}

export interface SourcePaypalTransactionResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourcePaypalTransactionResourceAllocationDefault;
    jobSpecifics: outputs.SourcePaypalTransactionResourceAllocationJobSpecific[];
}

export interface SourcePaypalTransactionResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourcePaypalTransactionResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourcePaypalTransactionResourceAllocationJobSpecificResourceRequirements;
}

export interface SourcePaypalTransactionResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourcePaystackConfiguration {
    /**
     * When set, the connector will always reload data from the past N days, where N is the value set here. This is useful if your data is updated after creation. Default: 0
     */
    lookbackWindowDays: number;
    /**
     * The Paystack API key (usually starts with 'sk_live_'; find yours <a href="https://dashboard.paystack.com/#/settings/developer">here</a>).
     */
    secretKey: string;
    /**
     * UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated.
     */
    startDate: string;
}

export interface SourcePaystackResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourcePaystackResourceAllocationDefault;
    jobSpecifics: outputs.SourcePaystackResourceAllocationJobSpecific[];
}

export interface SourcePaystackResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourcePaystackResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourcePaystackResourceAllocationJobSpecificResourceRequirements;
}

export interface SourcePaystackResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourcePendoConfiguration {
    apiKey: string;
}

export interface SourcePendoResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourcePendoResourceAllocationDefault;
    jobSpecifics: outputs.SourcePendoResourceAllocationJobSpecific[];
}

export interface SourcePendoResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourcePendoResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourcePendoResourceAllocationJobSpecificResourceRequirements;
}

export interface SourcePendoResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourcePennylaneConfiguration {
    apiKey: string;
    startTime: string;
}

export interface SourcePennylaneResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourcePennylaneResourceAllocationDefault;
    jobSpecifics: outputs.SourcePennylaneResourceAllocationJobSpecific[];
}

export interface SourcePennylaneResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourcePennylaneResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourcePennylaneResourceAllocationJobSpecificResourceRequirements;
}

export interface SourcePennylaneResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourcePersistiqConfiguration {
    /**
     * PersistIq API Key. See the <a href="https://apidocs.persistiq.com/#authentication">docs</a> for more information on where to find that key.
     */
    apiKey: string;
}

export interface SourcePersistiqResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourcePersistiqResourceAllocationDefault;
    jobSpecifics: outputs.SourcePersistiqResourceAllocationJobSpecific[];
}

export interface SourcePersistiqResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourcePersistiqResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourcePersistiqResourceAllocationJobSpecificResourceRequirements;
}

export interface SourcePersistiqResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourcePersonaConfiguration {
    /**
     * API key or access token
     */
    apiKey: string;
}

export interface SourcePersonaResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourcePersonaResourceAllocationDefault;
    jobSpecifics: outputs.SourcePersonaResourceAllocationJobSpecific[];
}

export interface SourcePersonaResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourcePersonaResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourcePersonaResourceAllocationJobSpecificResourceRequirements;
}

export interface SourcePersonaResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourcePexelsApiConfiguration {
    /**
     * API key is required to access pexels api, For getting your's goto https://www.pexels.com/api/documentation and create account for free.
     */
    apiKey: string;
    /**
     * Optional, Desired photo color. Supported colors red, orange, yellow, green, turquoise, blue, violet, pink, brown, black, gray, white or any hexidecimal color code.
     */
    color?: string;
    /**
     * Optional, The locale of the search you are performing. The current supported locales are 'en-US' 'pt-BR' 'es-ES' 'ca-ES' 'de-DE' 'it-IT' 'fr-FR' 'sv-SE' 'id-ID' 'pl-PL' 'ja-JP' 'zh-TW' 'zh-CN' 'ko-KR' 'th-TH' 'nl-NL' 'hu-HU' 'vi-VN' 'cs-CZ' 'da-DK' 'fi-FI' 'uk-UA' 'el-GR' 'ro-RO' 'nb-NO' 'sk-SK' 'tr-TR' 'ru-RU'.
     */
    locale?: string;
    /**
     * Optional, Desired photo orientation. The current supported orientations are landscape, portrait or square
     */
    orientation?: string;
    /**
     * Optional, the search query, Example Ocean, Tigers, Pears, etc.
     */
    query: string;
    /**
     * Optional, Minimum photo size. The current supported sizes are large(24MP), medium(12MP) or small(4MP).
     */
    size?: string;
}

export interface SourcePexelsApiResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourcePexelsApiResourceAllocationDefault;
    jobSpecifics: outputs.SourcePexelsApiResourceAllocationJobSpecific[];
}

export interface SourcePexelsApiResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourcePexelsApiResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourcePexelsApiResourceAllocationJobSpecificResourceRequirements;
}

export interface SourcePexelsApiResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourcePhylloConfiguration {
    /**
     * Your Client ID for the Phyllo API. You can find this in the Phyllo Developer Dashboard under API credentials.
     */
    clientId: string;
    /**
     * Your Client Secret for the Phyllo API. You can find this in the Phyllo Developer Dashboard under API credentials.
     */
    clientSecret: string;
    /**
     * The environment for the API (e.g., 'api.sandbox', 'api.staging', 'api'). Default: "api"; must be one of ["api.sandbox", "api.staging", "api"]
     */
    environment: string;
    startDate: string;
}

export interface SourcePhylloResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourcePhylloResourceAllocationDefault;
    jobSpecifics: outputs.SourcePhylloResourceAllocationJobSpecific[];
}

export interface SourcePhylloResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourcePhylloResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourcePhylloResourceAllocationJobSpecificResourceRequirements;
}

export interface SourcePhylloResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourcePicqerConfiguration {
    /**
     * The organization name which is used to login to picqer
     */
    organizationName: string;
    password?: string;
    startDate: string;
    username: string;
}

export interface SourcePicqerResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourcePicqerResourceAllocationDefault;
    jobSpecifics: outputs.SourcePicqerResourceAllocationJobSpecific[];
}

export interface SourcePicqerResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourcePicqerResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourcePicqerResourceAllocationJobSpecificResourceRequirements;
}

export interface SourcePicqerResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourcePingdomConfiguration {
    apiKey: string;
    probes?: string;
    /**
     * Default: "hour"; must be one of ["hour", "day", "week"]
     */
    resolution: string;
    startDate: string;
}

export interface SourcePingdomResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourcePingdomResourceAllocationDefault;
    jobSpecifics: outputs.SourcePingdomResourceAllocationJobSpecific[];
}

export interface SourcePingdomResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourcePingdomResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourcePingdomResourceAllocationJobSpecificResourceRequirements;
}

export interface SourcePingdomResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourcePinterestConfiguration {
    /**
     * The Pinterest account ID you want to fetch data for. This ID must be provided to filter the data for a specific account.
     */
    accountId?: string;
    credentials?: outputs.SourcePinterestConfigurationCredentials;
    /**
     * A list which contains ad statistics entries, each entry must have a name and can contains fields, breakdowns or action_breakdowns. Click on "add" to fill this field.
     */
    customReports?: outputs.SourcePinterestConfigurationCustomReport[];
    /**
     * A date in the format YYYY-MM-DD. If you have not set a date, it would be defaulted to latest allowed date by api (89 days from today).
     */
    startDate?: string;
    /**
     * For the ads, ad_groups, and campaigns streams, specifying a status will filter out records that do not match the specified ones. If a status is not specified, the source will default to records with a status of either ACTIVE or PAUSED.
     */
    statuses?: string[];
}

export interface SourcePinterestConfigurationCredentials {
    /**
     * The Client ID of your OAuth application
     */
    clientId: string;
    /**
     * The Client Secret of your OAuth application.
     */
    clientSecret: string;
    /**
     * Refresh Token to obtain new Access Token, when it's expired.
     */
    refreshToken: string;
}

export interface SourcePinterestConfigurationCustomReport {
    /**
     * List of types of attribution for the conversion report
     */
    attributionTypes?: string[];
    /**
     * Number of days to use as the conversion attribution window for a pin click action. Default: 30; must be one of ["0", "1", "7", "14", "30", "60"]
     */
    clickWindowDays: number;
    /**
     * A list of chosen columns
     */
    columns: string[];
    /**
     * The date by which the conversion metrics returned from this endpoint will be reported. There are two dates associated with a conversion event: the date that the user interacted with the ad, and the date that the user completed a conversion event.. Default: "TIME_OF_AD_ACTION"; must be one of ["TIME_OF_AD_ACTION", "TIME_OF_CONVERSION"]
     */
    conversionReportTime: string;
    /**
     * Number of days to use as the conversion attribution window for an engagement action. must be one of ["0", "1", "7", "14", "30", "60"]
     */
    engagementWindowDays?: number;
    /**
     * Chosen granularity for API. Default: "TOTAL"; must be one of ["TOTAL", "DAY", "HOUR", "WEEK", "MONTH"]
     */
    granularity: string;
    /**
     * Chosen level for API. Default: "ADVERTISER"; must be one of ["ADVERTISER", "ADVERTISER_TARGETING", "CAMPAIGN", "CAMPAIGN_TARGETING", "AD_GROUP", "AD_GROUP_TARGETING", "PIN_PROMOTION", "PIN_PROMOTION_TARGETING", "KEYWORD", "PRODUCT_GROUP", "PRODUCT_GROUP_TARGETING", "PRODUCT_ITEM"]
     */
    level: string;
    /**
     * The name value of report
     */
    name: string;
    /**
     * A date in the format YYYY-MM-DD. If you have not set a date, it would be defaulted to latest allowed date by report api (913 days from today).
     */
    startDate?: string;
    /**
     * Number of days to use as the conversion attribution window for a view action. must be one of ["0", "1", "7", "14", "30", "60"]
     */
    viewWindowDays?: number;
}

export interface SourcePinterestResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourcePinterestResourceAllocationDefault;
    jobSpecifics: outputs.SourcePinterestResourceAllocationJobSpecific[];
}

export interface SourcePinterestResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourcePinterestResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourcePinterestResourceAllocationJobSpecificResourceRequirements;
}

export interface SourcePinterestResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourcePipedriveConfiguration {
    /**
     * The Pipedrive API Token.
     */
    apiToken: string;
    /**
     * UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated. When specified and not None, then stream will behave as incremental
     */
    replicationStartDate: string;
}

export interface SourcePipedriveResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourcePipedriveResourceAllocationDefault;
    jobSpecifics: outputs.SourcePipedriveResourceAllocationJobSpecific[];
}

export interface SourcePipedriveResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourcePipedriveResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourcePipedriveResourceAllocationJobSpecificResourceRequirements;
}

export interface SourcePipedriveResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourcePipelinerConfiguration {
    password?: string;
    /**
     * must be one of ["eu-central", "us-east", "ca-central", "ap-southeast"]
     */
    service: string;
    spaceid: string;
    username: string;
}

export interface SourcePipelinerResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourcePipelinerResourceAllocationDefault;
    jobSpecifics: outputs.SourcePipelinerResourceAllocationJobSpecific[];
}

export interface SourcePipelinerResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourcePipelinerResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourcePipelinerResourceAllocationJobSpecificResourceRequirements;
}

export interface SourcePipelinerResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourcePivotalTrackerConfiguration {
    /**
     * Pivotal Tracker API token
     */
    apiToken: string;
}

export interface SourcePivotalTrackerResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourcePivotalTrackerResourceAllocationDefault;
    jobSpecifics: outputs.SourcePivotalTrackerResourceAllocationJobSpecific[];
}

export interface SourcePivotalTrackerResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourcePivotalTrackerResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourcePivotalTrackerResourceAllocationJobSpecificResourceRequirements;
}

export interface SourcePivotalTrackerResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourcePiwikConfiguration {
    clientId: string;
    clientSecret: string;
    /**
     * The organization id appearing at URL of your piwik website
     */
    organizationId: string;
}

export interface SourcePiwikResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourcePiwikResourceAllocationDefault;
    jobSpecifics: outputs.SourcePiwikResourceAllocationJobSpecific[];
}

export interface SourcePiwikResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourcePiwikResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourcePiwikResourceAllocationJobSpecificResourceRequirements;
}

export interface SourcePiwikResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourcePlaidConfiguration {
    /**
     * The end-user's Link access token.
     */
    accessToken: string;
    /**
     * The Plaid API key to use to hit the API.
     */
    apiKey: string;
    /**
     * The Plaid client id.
     */
    clientId: string;
    /**
     * The Plaid environment. must be one of ["sandbox", "development", "production"]
     */
    plaidEnv: string;
    /**
     * The date from which you'd like to replicate data for Plaid in the format YYYY-MM-DD. All data generated after this date will be replicated.
     */
    startDate?: string;
}

export interface SourcePlaidResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourcePlaidResourceAllocationDefault;
    jobSpecifics: outputs.SourcePlaidResourceAllocationJobSpecific[];
}

export interface SourcePlaidResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourcePlaidResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourcePlaidResourceAllocationJobSpecificResourceRequirements;
}

export interface SourcePlaidResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourcePlanhatConfiguration {
    /**
     * Your Planhat <a href="https://docs.planhat.com/#authentication">API Access Token</a>
     */
    apiToken: string;
}

export interface SourcePlanhatResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourcePlanhatResourceAllocationDefault;
    jobSpecifics: outputs.SourcePlanhatResourceAllocationJobSpecific[];
}

export interface SourcePlanhatResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourcePlanhatResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourcePlanhatResourceAllocationJobSpecificResourceRequirements;
}

export interface SourcePlanhatResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourcePlausibleConfiguration {
    /**
     * Plausible API Key. See the <a href="https://plausible.io/docs/stats-api">docs</a> for information on how to generate this key.
     */
    apiKey: string;
    /**
     * The API URL of your plausible instance. Change this if you self-host plausible. The default is https://plausible.io/api/v1/stats
     */
    apiUrl?: string;
    /**
     * The domain of the site you want to retrieve data for. Enter the name of your site as configured on Plausible, i.e., excluding "https://" and "www". Can be retrieved from the 'domain' field in your Plausible site settings.
     */
    siteId: string;
    /**
     * Start date for data to retrieve, in ISO-8601 format.
     */
    startDate?: string;
}

export interface SourcePlausibleResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourcePlausibleResourceAllocationDefault;
    jobSpecifics: outputs.SourcePlausibleResourceAllocationJobSpecific[];
}

export interface SourcePlausibleResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourcePlausibleResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourcePlausibleResourceAllocationJobSpecificResourceRequirements;
}

export interface SourcePlausibleResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourcePocketConfiguration {
    /**
     * The user's Pocket access token.
     */
    accessToken: string;
    /**
     * Your application's Consumer Key.
     */
    consumerKey: string;
    /**
     * Select the content type of the items to retrieve. must be one of ["article", "video", "image"]
     */
    contentType?: string;
    /**
     * Select the granularity of the information about each item. must be one of ["simple", "complete"]
     */
    detailType?: string;
    /**
     * Only return items from a particular `domain`.
     */
    domain?: string;
    /**
     * Retrieve only favorited items. Default: false
     */
    favorite: boolean;
    /**
     * Only return items whose title or url contain the `search` string.
     */
    search?: string;
    /**
     * Only return items modified since the given timestamp.
     */
    since?: string;
    /**
     * Sort retrieved items by the given criteria. must be one of ["newest", "oldest", "title", "site"]
     */
    sort?: string;
    /**
     * Select the state of the items to retrieve. must be one of ["unread", "archive", "all"]
     */
    state?: string;
    /**
     * Return only items tagged with this tag name. Use _untagged_ for retrieving only untagged items.
     */
    tag?: string;
}

export interface SourcePocketResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourcePocketResourceAllocationDefault;
    jobSpecifics: outputs.SourcePocketResourceAllocationJobSpecific[];
}

export interface SourcePocketResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourcePocketResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourcePocketResourceAllocationJobSpecificResourceRequirements;
}

export interface SourcePocketResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourcePokeapiConfiguration {
    /**
     * Pokemon requested from the API. must be one of ["bulbasaur", "ivysaur", "venusaur", "charmander", "charmeleon", "charizard", "squirtle", "wartortle", "blastoise", "caterpie", "metapod", "butterfree", "weedle", "kakuna", "beedrill", "pidgey", "pidgeotto", "pidgeot", "rattata", "raticate", "spearow", "fearow", "ekans", "arbok", "pikachu", "raichu", "sandshrew", "sandslash", "nidoranf", "nidorina", "nidoqueen", "nidoranm", "nidorino", "nidoking", "clefairy", "clefable", "vulpix", "ninetales", "jigglypuff", "wigglytuff", "zubat", "golbat", "oddish", "gloom", "vileplume", "paras", "parasect", "venonat", "venomoth", "diglett", "dugtrio", "meowth", "persian", "psyduck", "golduck", "mankey", "primeape", "growlithe", "arcanine", "poliwag", "poliwhirl", "poliwrath", "abra", "kadabra", "alakazam", "machop", "machoke", "machamp", "bellsprout", "weepinbell", "victreebel", "tentacool", "tentacruel", "geodude", "graveler", "golem", "ponyta", "rapidash", "slowpoke", "slowbro", "magnemite", "magneton", "farfetchd", "doduo", "dodrio", "seel", "dewgong", "grimer", "muk", "shellder", "cloyster", "gastly", "haunter", "gengar", "onix", "drowzee", "hypno", "krabby", "kingler", "voltorb", "electrode", "exeggcute", "exeggutor", "cubone", "marowak", "hitmonlee", "hitmonchan", "lickitung", "koffing", "weezing", "rhyhorn", "rhydon", "chansey", "tangela", "kangaskhan", "horsea", "seadra", "goldeen", "seaking", "staryu", "starmie", "mrmime", "scyther", "jynx", "electabuzz", "magmar", "pinsir", "tauros", "magikarp", "gyarados", "lapras", "ditto", "eevee", "vaporeon", "jolteon", "flareon", "porygon", "omanyte", "omastar", "kabuto", "kabutops", "aerodactyl", "snorlax", "articuno", "zapdos", "moltres", "dratini", "dragonair", "dragonite", "mewtwo", "mew", "chikorita", "bayleef", "meganium", "cyndaquil", "quilava", "typhlosion", "totodile", "croconaw", "feraligatr", "sentret", "furret", "hoothoot", "noctowl", "ledyba", "ledian", "spinarak", "ariados", "crobat", "chinchou", "lanturn", "pichu", "cleffa", "igglybuff", "togepi", "togetic", "natu", "xatu", "mareep", "flaaffy", "ampharos", "bellossom", "marill", "azumarill", "sudowoodo", "politoed", "hoppip", "skiploom", "jumpluff", "aipom", "sunkern", "sunflora", "yanma", "wooper", "quagsire", "espeon", "umbreon", "murkrow", "slowking", "misdreavus", "unown", "wobbuffet", "girafarig", "pineco", "forretress", "dunsparce", "gligar", "steelix", "snubbull", "granbull", "qwilfish", "scizor", "shuckle", "heracross", "sneasel", "teddiursa", "ursaring", "slugma", "magcargo", "swinub", "piloswine", "corsola", "remoraid", "octillery", "delibird", "mantine", "skarmory", "houndour", "houndoom", "kingdra", "phanpy", "donphan", "porygon2", "stantler", "smeargle", "tyrogue", "hitmontop", "smoochum", "elekid", "magby", "miltank", "blissey", "raikou", "entei", "suicune", "larvitar", "pupitar", "tyranitar", "lugia", "ho-oh", "celebi", "treecko", "grovyle", "sceptile", "torchic", "combusken", "blaziken", "mudkip", "marshtomp", "swampert", "poochyena", "mightyena", "zigzagoon", "linoone", "wurmple", "silcoon", "beautifly", "cascoon", "dustox", "lotad", "lombre", "ludicolo", "seedot", "nuzleaf", "shiftry", "taillow", "swellow", "wingull", "pelipper", "ralts", "kirlia", "gardevoir", "surskit", "masquerain", "shroomish", "breloom", "slakoth", "vigoroth", "slaking", "nincada", "ninjask", "shedinja", "whismur", "loudred", "exploud", "makuhita", "hariyama", "azurill", "nosepass", "skitty", "delcatty", "sableye", "mawile", "aron", "lairon", "aggron", "meditite", "medicham", "electrike", "manectric", "plusle", "minun", "volbeat", "illumise", "roselia", "gulpin", "swalot", "carvanha", "sharpedo", "wailmer", "wailord", "numel", "camerupt", "torkoal", "spoink", "grumpig", "spinda", "trapinch", "vibrava", "flygon", "cacnea", "cacturne", "swablu", "altaria", "zangoose", "seviper", "lunatone", "solrock", "barboach", "whiscash", "corphish", "crawdaunt", "baltoy", "claydol", "lileep", "cradily", "anorith", "armaldo", "feebas", "milotic", "castform", "kecleon", "shuppet", "banette", "duskull", "dusclops", "tropius", "chimecho", "absol", "wynaut", "snorunt", "glalie", "spheal", "sealeo", "walrein", "clamperl", "huntail", "gorebyss", "relicanth", "luvdisc", "bagon", "shelgon", "salamence", "beldum", "metang", "metagross", "regirock", "regice", "registeel", "latias", "latios", "kyogre", "groudon", "rayquaza", "jirachi", "deoxys", "turtwig", "grotle", "torterra", "chimchar", "monferno", "infernape", "piplup", "prinplup", "empoleon", "starly", "staravia", "staraptor", "bidoof", "bibarel", "kricketot", "kricketune", "shinx", "luxio", "luxray", "budew", "roserade", "cranidos", "rampardos", "shieldon", "bastiodon", "burmy", "wormadam", "mothim", "combee", "vespiquen", "pachirisu", "buizel", "floatzel", "cherubi", "cherrim", "shellos", "gastrodon", "ambipom", "drifloon", "drifblim", "buneary", "lopunny", "mismagius", "honchkrow", "glameow", "purugly", "chingling", "stunky", "skuntank", "bronzor", "bronzong", "bonsly", "mimejr", "happiny", "chatot", "spiritomb", "gible", "gabite", "garchomp", "munchlax", "riolu", "lucario", "hippopotas", "hippowdon", "skorupi", "drapion", "croagunk", "toxicroak", "carnivine", "finneon", "lumineon", "mantyke", "snover", "abomasnow", "weavile", "magnezone", "lickilicky", "rhyperior", "tangrowth", "electivire", "magmortar", "togekiss", "yanmega", "leafeon", "glaceon", "gliscor", "mamoswine", "porygon-z", "gallade", "probopass", "dusknoir", "froslass", "rotom", "uxie", "mesprit", "azelf", "dialga", "palkia", "heatran", "regigigas", "giratina", "cresselia", "phione", "manaphy", "darkrai", "shaymin", "arceus", "victini", "snivy", "servine", "serperior", "tepig", "pignite", "emboar", "oshawott", "dewott", "samurott", "patrat", "watchog", "lillipup", "herdier", "stoutland", "purrloin", "liepard", "pansage", "simisage", "pansear", "simisear", "panpour", "simipour", "munna", "musharna", "pidove", "tranquill", "unfezant", "blitzle", "zebstrika", "roggenrola", "boldore", "gigalith", "woobat", "swoobat", "drilbur", "excadrill", "audino", "timburr", "gurdurr", "conkeldurr", "tympole", "palpitoad", "seismitoad", "throh", "sawk", "sewaddle", "swadloon", "leavanny", "venipede", "whirlipede", "scolipede", "cottonee", "whimsicott", "petilil", "lilligant", "basculin", "sandile", "krokorok", "krookodile", "darumaka", "darmanitan", "maractus", "dwebble", "crustle", "scraggy", "scrafty", "sigilyph", "yamask", "cofagrigus", "tirtouga", "carracosta", "archen", "archeops", "trubbish", "garbodor", "zorua", "zoroark", "minccino", "cinccino", "gothita", "gothorita", "gothitelle", "solosis", "duosion", "reuniclus", "ducklett", "swanna", "vanillite", "vanillish", "vanilluxe", "deerling", "sawsbuck", "emolga", "karrablast", "escavalier", "foongus", "amoonguss", "frillish", "jellicent", "alomomola", "joltik", "galvantula", "ferroseed", "ferrothorn", "klink", "klang", "klinklang", "tynamo", "eelektrik", "eelektross", "elgyem", "beheeyem", "litwick", "lampent", "chandelure", "axew", "fraxure", "haxorus", "cubchoo", "beartic", "cryogonal", "shelmet", "accelgor", "stunfisk", "mienfoo", "mienshao", "druddigon", "golett", "golurk", "pawniard", "bisharp", "bouffalant", "rufflet", "braviary", "vullaby", "mandibuzz", "heatmor", "durant", "deino", "zweilous", "hydreigon", "larvesta", "volcarona", "cobalion", "terrakion", "virizion", "tornadus", "thundurus", "reshiram", "zekrom", "landorus", "kyurem", "keldeo", "meloetta", "genesect", "chespin", "quilladin", "chesnaught", "fennekin", "braixen", "delphox", "froakie", "frogadier", "greninja", "bunnelby", "diggersby", "fletchling", "fletchinder", "talonflame", "scatterbug", "spewpa", "vivillon", "litleo", "pyroar", "flabebe", "floette", "florges", "skiddo", "gogoat", "pancham", "pangoro", "furfrou", "espurr", "meowstic", "honedge", "doublade", "aegislash", "spritzee", "aromatisse", "swirlix", "slurpuff", "inkay", "malamar", "binacle", "barbaracle", "skrelp", "dragalge", "clauncher", "clawitzer", "helioptile", "heliolisk", "tyrunt", "tyrantrum", "amaura", "aurorus", "sylveon", "hawlucha", "dedenne", "carbink", "goomy", "sliggoo", "goodra", "klefki", "phantump", "trevenant", "pumpkaboo", "gourgeist", "bergmite", "avalugg", "noibat", "noivern", "xerneas", "yveltal", "zygarde", "diancie", "hoopa", "volcanion", "rowlet", "dartrix", "decidueye", "litten", "torracat", "incineroar", "popplio", "brionne", "primarina", "pikipek", "trumbeak", "toucannon", "yungoos", "gumshoos", "grubbin", "charjabug", "vikavolt", "crabrawler", "crabominable", "oricorio", "cutiefly", "ribombee", "rockruff", "lycanroc", "wishiwashi", "mareanie", "toxapex", "mudbray", "mudsdale", "dewpider", "araquanid", "fomantis", "lurantis", "morelull", "shiinotic", "salandit", "salazzle", "stufful", "bewear", "bounsweet", "steenee", "tsareena", "comfey", "oranguru", "passimian", "wimpod", "golisopod", "sandygast", "palossand", "pyukumuku", "typenull", "silvally", "minior", "komala", "turtonator", "togedemaru", "mimikyu", "bruxish", "drampa", "dhelmise", "jangmo-o", "hakamo-o", "kommo-o", "tapukoko", "tapulele", "tapubulu", "tapufini", "cosmog", "cosmoem", "solgaleo", "lunala", "nihilego", "buzzwole", "pheromosa", "xurkitree", "celesteela", "kartana", "guzzlord", "necrozma", "magearna", "marshadow", "poipole", "naganadel", "stakataka", "blacephalon", "zeraora", "meltan", "melmetal", "grookey", "thwackey", "rillaboom", "scorbunny", "raboot", "cinderace", "sobble", "drizzile", "inteleon", "skwovet", "greedent", "rookidee", "corvisquire", "corviknight", "blipbug", "dottler", "orbeetle", "nickit", "thievul", "gossifleur", "eldegoss", "wooloo", "dubwool", "chewtle", "drednaw", "yamper", "boltund", "rolycoly", "carkol", "coalossal", "applin", "flapple", "appletun", "silicobra", "sandaconda", "cramorant", "arrokuda", "barraskewda", "toxel", "toxtricity", "sizzlipede", "centiskorch", "clobbopus", "grapploct", "sinistea", "polteageist", "hatenna", "hattrem", "hatterene", "impidimp", "morgrem", "grimmsnarl", "obstagoon", "perrserker", "cursola", "sirfetchd", "mrrime", "runerigus", "milcery", "alcremie", "falinks", "pincurchin", "snom", "frosmoth", "stonjourner", "eiscue", "indeedee", "morpeko", "cufant", "copperajah", "dracozolt", "arctozolt", "dracovish", "arctovish", "duraludon", "dreepy", "drakloak", "dragapult", "zacian", "zamazenta", "eternatus", "kubfu", "urshifu", "zarude", "regieleki", "regidrago", "glastrier", "spectrier", "calyrex"]
     */
    pokemonName: string;
}

export interface SourcePokeapiResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourcePokeapiResourceAllocationDefault;
    jobSpecifics: outputs.SourcePokeapiResourceAllocationJobSpecific[];
}

export interface SourcePokeapiResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourcePokeapiResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourcePokeapiResourceAllocationJobSpecificResourceRequirements;
}

export interface SourcePokeapiResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourcePolygonStockApiConfiguration {
    /**
     * Determines whether or not the results are adjusted for splits. By default, results are adjusted and set to true. Set this to false to get results that are NOT adjusted for splits.
     */
    adjusted?: string;
    /**
     * Your API ACCESS Key
     */
    apiKey: string;
    /**
     * The target date for the aggregate window.
     */
    endDate: string;
    /**
     * The target date for the aggregate window.
     */
    limit?: number;
    /**
     * The size of the timespan multiplier.
     */
    multiplier: number;
    /**
     * Sort the results by timestamp. asc will return results in ascending order (oldest at the top), desc will return results in descending order (newest at the top).
     */
    sort?: string;
    /**
     * The beginning date for the aggregate window.
     */
    startDate: string;
    /**
     * The exchange symbol that this item is traded under.
     */
    stocksTicker: string;
    /**
     * The size of the time window.
     */
    timespan: string;
}

export interface SourcePolygonStockApiResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourcePolygonStockApiResourceAllocationDefault;
    jobSpecifics: outputs.SourcePolygonStockApiResourceAllocationJobSpecific[];
}

export interface SourcePolygonStockApiResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourcePolygonStockApiResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourcePolygonStockApiResourceAllocationJobSpecificResourceRequirements;
}

export interface SourcePolygonStockApiResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourcePoplarConfiguration {
    /**
     * Your Poplar API Access Token. Generate it from the [API Credentials page](https://app.heypoplar.com/credentials) in your account. Use a production token for live data or a test token for testing purposes.
     */
    accessToken: string;
    startDate: string;
}

export interface SourcePoplarResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourcePoplarResourceAllocationDefault;
    jobSpecifics: outputs.SourcePoplarResourceAllocationJobSpecific[];
}

export interface SourcePoplarResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourcePoplarResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourcePoplarResourceAllocationJobSpecificResourceRequirements;
}

export interface SourcePoplarResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourcePostgresConfiguration {
    /**
     * Name of the database.
     */
    database: string;
    /**
     * Hostname of the database.
     */
    host: string;
    /**
     * Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '&'. (Eg. key1=value1&key2=value2&key3=value3). For more information read about <a href="https://jdbc.postgresql.org/documentation/head/connect.html">JDBC URL parameters</a>.
     */
    jdbcUrlParams?: string;
    /**
     * Password associated with the username.
     */
    password?: string;
    /**
     * Port of the database. Default: 5432
     */
    port: number;
    /**
     * Configures how data is extracted from the database.
     */
    replicationMethod?: outputs.SourcePostgresConfigurationReplicationMethod;
    /**
     * The list of schemas (case sensitive) to sync from. Defaults to public.
     */
    schemas?: string[];
    /**
     * SSL connection modes. 
     *   Read more <a href="https://jdbc.postgresql.org/documentation/head/ssl-client.html"> in the docs</a>.
     */
    sslMode?: outputs.SourcePostgresConfigurationSslMode;
    /**
     * Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
     */
    tunnelMethod?: outputs.SourcePostgresConfigurationTunnelMethod;
    /**
     * Username to access the database.
     */
    username: string;
}

export interface SourcePostgresConfigurationReplicationMethod {
    /**
     * <i>Recommended</i> - Incrementally reads new inserts and updates via Postgres <a href="https://docs.airbyte.com/integrations/sources/postgres/#xmin">Xmin system column</a>. Suitable for databases that have low transaction pressure.
     */
    detectChangesWithXminSystemColumn?: outputs.SourcePostgresConfigurationReplicationMethodDetectChangesWithXminSystemColumn;
    /**
     * <i>Recommended</i> - Incrementally reads new inserts, updates, and deletes using the Postgres <a href="https://docs.airbyte.com/integrations/sources/postgres/#cdc">write-ahead log (WAL)</a>. This needs to be configured on the source database itself. Recommended for tables of any size.
     */
    readChangesUsingWriteAheadLogCdc?: outputs.SourcePostgresConfigurationReplicationMethodReadChangesUsingWriteAheadLogCdc;
    /**
     * Incrementally detects new inserts and updates using the <a href="https://docs.airbyte.com/understanding-airbyte/connections/incremental-append/#user-defined-cursor">cursor column</a> chosen when configuring a connection (e.g. created_at, updated_at).
     */
    scanChangesWithUserDefinedCursor?: outputs.SourcePostgresConfigurationReplicationMethodScanChangesWithUserDefinedCursor;
}

export interface SourcePostgresConfigurationReplicationMethodDetectChangesWithXminSystemColumn {
}

export interface SourcePostgresConfigurationReplicationMethodReadChangesUsingWriteAheadLogCdc {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * Specifies a query that the connector executes on the source database when the connector sends a heartbeat message. Please see the <a href="https://docs.airbyte.com/integrations/sources/postgres/postgres-troubleshooting#advanced-wal-disk-consumption-and-heartbeat-action-query">setup guide</a> for how and when to configure this setting. Default: ""
     */
    heartbeatActionQuery: string;
    /**
     * The amount of time an initial load is allowed to continue for before catching up on CDC logs. Default: 8
     */
    initialLoadTimeoutHours: number;
    /**
     * The amount of time the connector will wait when it launches to determine if there is new data to sync or not. Defaults to 1200 seconds. Valid range: 120 seconds to 2400 seconds. Read about <a href="https://docs.airbyte.com/integrations/sources/postgres/postgres-troubleshooting#advanced-setting-up-initial-cdc-waiting-time">initial waiting time</a>. Default: 1200
     */
    initialWaitingSeconds: number;
    /**
     * Determines whether Airbyte should fail or re-sync data in case of an stale/invalid cursor value into the WAL. If 'Fail sync' is chosen, a user will have to manually reset the connection before being able to continue syncing data. If 'Re-sync data' is chosen, Airbyte will automatically trigger a refresh but could lead to higher cloud costs and data loss. Default: "Fail sync"; must be one of ["Fail sync", "Re-sync data"]
     */
    invalidCdcCursorPositionBehavior: string;
    /**
     * Determines when Airbyte should flush the LSN of processed WAL logs in the source database. `After loading Data in the destination` is default. If `While reading Data` is selected, in case of a downstream failure (while loading data into the destination), next sync would result in a full sync. Default: "After loading Data in the destination"; must be one of ["While reading Data", "After loading Data in the destination"]
     */
    lsnCommitBehaviour: string;
    /**
     * A logical decoding plugin installed on the PostgreSQL server. Default: "pgoutput"; must be "pgoutput"
     */
    plugin: string;
    /**
     * A Postgres publication used for consuming changes. Read about <a href="https://docs.airbyte.com/integrations/sources/postgres#step-4-create-publications-and-replication-identities-for-tables">publications and replication identities</a>.
     */
    publication: string;
    /**
     * The size of the internal queue. This may interfere with memory consumption and efficiency of the connector, please be careful. Default: 10000
     */
    queueSize: number;
    /**
     * A plugin logical replication slot. Read about <a href="https://docs.airbyte.com/integrations/sources/postgres#step-3-create-replication-slot">replication slots</a>.
     */
    replicationSlot: string;
}

export interface SourcePostgresConfigurationReplicationMethodScanChangesWithUserDefinedCursor {
}

export interface SourcePostgresConfigurationSslMode {
    /**
     * Enables encryption only when required by the source database.
     */
    allow?: outputs.SourcePostgresConfigurationSslModeAllow;
    /**
     * Disables encryption of communication between Airbyte and source database.
     */
    disable?: outputs.SourcePostgresConfigurationSslModeDisable;
    /**
     * Allows unencrypted connection only if the source database does not support encryption.
     */
    prefer?: outputs.SourcePostgresConfigurationSslModePrefer;
    /**
     * Always require encryption. If the source database server does not support encryption, connection will fail.
     */
    require?: outputs.SourcePostgresConfigurationSslModeRequire;
    /**
     * Always require encryption and verifies that the source database server has a valid SSL certificate.
     */
    verifyCa?: outputs.SourcePostgresConfigurationSslModeVerifyCa;
    /**
     * This is the most secure mode. Always require encryption and verifies the identity of the source database server.
     */
    verifyFull?: outputs.SourcePostgresConfigurationSslModeVerifyFull;
}

export interface SourcePostgresConfigurationSslModeAllow {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
}

export interface SourcePostgresConfigurationSslModeDisable {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
}

export interface SourcePostgresConfigurationSslModePrefer {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
}

export interface SourcePostgresConfigurationSslModeRequire {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
}

export interface SourcePostgresConfigurationSslModeVerifyCa {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * CA certificate
     */
    caCertificate: string;
    /**
     * Client certificate
     */
    clientCertificate?: string;
    /**
     * Client key
     */
    clientKey?: string;
    /**
     * Password for keystorage. If you do not add it - the password will be generated automatically.
     */
    clientKeyPassword?: string;
}

export interface SourcePostgresConfigurationSslModeVerifyFull {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * CA certificate
     */
    caCertificate: string;
    /**
     * Client certificate
     */
    clientCertificate?: string;
    /**
     * Client key
     */
    clientKey?: string;
    /**
     * Password for keystorage. If you do not add it - the password will be generated automatically.
     */
    clientKeyPassword?: string;
}

export interface SourcePostgresConfigurationTunnelMethod {
    noTunnel?: outputs.SourcePostgresConfigurationTunnelMethodNoTunnel;
    passwordAuthentication?: outputs.SourcePostgresConfigurationTunnelMethodPasswordAuthentication;
    sshKeyAuthentication?: outputs.SourcePostgresConfigurationTunnelMethodSshKeyAuthentication;
}

export interface SourcePostgresConfigurationTunnelMethodNoTunnel {
}

export interface SourcePostgresConfigurationTunnelMethodPasswordAuthentication {
    /**
     * Hostname of the jump server host that allows inbound ssh tunnel.
     */
    tunnelHost: string;
    /**
     * Port on the proxy/jump server that accepts inbound ssh connections. Default: 22
     */
    tunnelPort: number;
    /**
     * OS-level username for logging into the jump server host
     */
    tunnelUser: string;
    /**
     * OS-level password for logging into the jump server host
     */
    tunnelUserPassword: string;
}

export interface SourcePostgresConfigurationTunnelMethodSshKeyAuthentication {
    /**
     * OS-level user account ssh key credentials in RSA PEM format ( created with ssh-keygen -t rsa -m PEM -f myuser_rsa )
     */
    sshKey: string;
    /**
     * Hostname of the jump server host that allows inbound ssh tunnel.
     */
    tunnelHost: string;
    /**
     * Port on the proxy/jump server that accepts inbound ssh connections. Default: 22
     */
    tunnelPort: number;
    /**
     * OS-level username for logging into the jump server host.
     */
    tunnelUser: string;
}

export interface SourcePostgresResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourcePostgresResourceAllocationDefault;
    jobSpecifics: outputs.SourcePostgresResourceAllocationJobSpecific[];
}

export interface SourcePostgresResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourcePostgresResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourcePostgresResourceAllocationJobSpecificResourceRequirements;
}

export interface SourcePostgresResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourcePosthogConfiguration {
    /**
     * API Key. See the <a href="https://docs.airbyte.com/integrations/sources/posthog">docs</a> for information on how to generate this key.
     */
    apiKey: string;
    /**
     * Base PostHog url. Defaults to PostHog Cloud (https://app.posthog.com). Default: "https://app.posthog.com"
     */
    baseUrl: string;
    /**
     * Set lower value in case of failing long running sync of events stream. Default: 30
     */
    eventsTimeStep: number;
    /**
     * The date from which you'd like to replicate the data. Any data before this date will not be replicated.
     */
    startDate: string;
}

export interface SourcePosthogResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourcePosthogResourceAllocationDefault;
    jobSpecifics: outputs.SourcePosthogResourceAllocationJobSpecific[];
}

export interface SourcePosthogResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourcePosthogResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourcePosthogResourceAllocationJobSpecificResourceRequirements;
}

export interface SourcePosthogResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourcePostmarkappConfiguration {
    /**
     * API Key for account
     */
    xPostmarkAccountToken: string;
    /**
     * API Key for server
     */
    xPostmarkServerToken: string;
}

export interface SourcePostmarkappResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourcePostmarkappResourceAllocationDefault;
    jobSpecifics: outputs.SourcePostmarkappResourceAllocationJobSpecific[];
}

export interface SourcePostmarkappResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourcePostmarkappResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourcePostmarkappResourceAllocationJobSpecificResourceRequirements;
}

export interface SourcePostmarkappResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourcePrestashopConfiguration {
    /**
     * Your PrestaShop access key. See <a href="https://devdocs.prestashop.com/1.7/webservice/tutorials/creating-access/#create-an-access-key"> the docs </a> for info on how to obtain this.
     */
    accessKey: string;
    /**
     * The Start date in the format YYYY-MM-DD.
     */
    startDate: string;
    /**
     * Shop URL without trailing slash.
     */
    url: string;
}

export interface SourcePrestashopResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourcePrestashopResourceAllocationDefault;
    jobSpecifics: outputs.SourcePrestashopResourceAllocationJobSpecific[];
}

export interface SourcePrestashopResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourcePrestashopResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourcePrestashopResourceAllocationJobSpecificResourceRequirements;
}

export interface SourcePrestashopResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourcePretixConfiguration {
    /**
     * API token to use. Obtain it from the pretix web interface by creating a new token under your team settings.
     */
    apiToken: string;
}

export interface SourcePretixResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourcePretixResourceAllocationDefault;
    jobSpecifics: outputs.SourcePretixResourceAllocationJobSpecific[];
}

export interface SourcePretixResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourcePretixResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourcePretixResourceAllocationJobSpecificResourceRequirements;
}

export interface SourcePretixResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourcePrimetricConfiguration {
    /**
     * The Client ID of your Primetric developer application. The Client ID is visible <a href=\"https://app.primetric.com/administrator/integrations">here</a>.
     */
    clientId: string;
    /**
     * The Client Secret of your Primetric developer application. You can manage your client's credentials <a href=\"https://app.primetric.com/administrator/integrations">here</a>.
     */
    clientSecret: string;
}

export interface SourcePrimetricResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourcePrimetricResourceAllocationDefault;
    jobSpecifics: outputs.SourcePrimetricResourceAllocationJobSpecific[];
}

export interface SourcePrimetricResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourcePrimetricResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourcePrimetricResourceAllocationJobSpecificResourceRequirements;
}

export interface SourcePrimetricResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceProductboardConfiguration {
    /**
     * Your Productboard access token. See https://developer.productboard.com/reference/authentication for steps to generate one.
     */
    accessToken: string;
    startDate: string;
}

export interface SourceProductboardResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceProductboardResourceAllocationDefault;
    jobSpecifics: outputs.SourceProductboardResourceAllocationJobSpecific[];
}

export interface SourceProductboardResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceProductboardResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceProductboardResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceProductboardResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceProductiveConfiguration {
    apiKey: string;
    /**
     * The organization ID which could be seen from `https://app.productive.io/xxxx-xxxx/settings/api-integrations` page
     */
    organizationId: string;
}

export interface SourceProductiveResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceProductiveResourceAllocationDefault;
    jobSpecifics: outputs.SourceProductiveResourceAllocationJobSpecific[];
}

export interface SourceProductiveResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceProductiveResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceProductiveResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceProductiveResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourcePypiConfiguration {
    /**
     * Name of the project/package. Can only be in lowercase with hyphen. This is the name used using pip command for installing the package.
     */
    projectName: string;
    /**
     * Version of the project/package.  Use it to find a particular release instead of all releases.
     */
    version?: string;
}

export interface SourcePypiResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourcePypiResourceAllocationDefault;
    jobSpecifics: outputs.SourcePypiResourceAllocationJobSpecific[];
}

export interface SourcePypiResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourcePypiResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourcePypiResourceAllocationJobSpecificResourceRequirements;
}

export interface SourcePypiResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceQualarooConfiguration {
    /**
     * A Qualaroo token. See the <a href="https://help.qualaroo.com/hc/en-us/articles/201969438-The-REST-Reporting-API">docs</a> for instructions on how to generate it.
     */
    key: string;
    /**
     * UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated.
     */
    startDate: string;
    /**
     * IDs of the surveys from which you'd like to replicate data. If left empty, data from all surveys to which you have access will be replicated.
     */
    surveyIds?: string[];
    /**
     * A Qualaroo token. See the <a href="https://help.qualaroo.com/hc/en-us/articles/201969438-The-REST-Reporting-API">docs</a> for instructions on how to generate it.
     */
    token: string;
}

export interface SourceQualarooResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceQualarooResourceAllocationDefault;
    jobSpecifics: outputs.SourceQualarooResourceAllocationJobSpecific[];
}

export interface SourceQualarooResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceQualarooResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceQualarooResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceQualarooResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceQuickbooksConfiguration {
    /**
     * Access token for making authenticated requests.
     */
    accessToken: string;
    /**
     * Identifies which app is making the request. Obtain this value from the Keys tab on the app profile via My Apps on the developer site. There are two versions of this key: development and production.
     */
    clientId: string;
    /**
     * Obtain this value from the Keys tab on the app profile via My Apps on the developer site. There are two versions of this key: development and production.
     */
    clientSecret: string;
    /**
     * Labeled Company ID. The Make API Calls panel is populated with the realm id and the current access token.
     */
    realmId: string;
    /**
     * A token used when refreshing the access token.
     */
    refreshToken: string;
    /**
     * Determines whether to use the sandbox or production environment. Default: false
     */
    sandbox: boolean;
    /**
     * The default value to use if no bookmark exists for an endpoint (rfc3339 date string). E.g, 2021-03-20T00:00:00Z. Any data before this date will not be replicated.
     */
    startDate: string;
    /**
     * The date-time when the access token should be refreshed.
     */
    tokenExpiryDate: string;
}

export interface SourceQuickbooksResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceQuickbooksResourceAllocationDefault;
    jobSpecifics: outputs.SourceQuickbooksResourceAllocationJobSpecific[];
}

export interface SourceQuickbooksResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceQuickbooksResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceQuickbooksResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceQuickbooksResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceRailzConfiguration {
    /**
     * Client ID (client_id)
     */
    clientId: string;
    /**
     * Secret key (secret_key)
     */
    secretKey: string;
    /**
     * Start date
     */
    startDate: string;
}

export interface SourceRailzResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceRailzResourceAllocationDefault;
    jobSpecifics: outputs.SourceRailzResourceAllocationJobSpecific[];
}

export interface SourceRailzResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceRailzResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceRailzResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceRailzResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceRdStationMarketingConfiguration {
    /**
     * Choose one of the possible authorization method
     */
    authorization?: outputs.SourceRdStationMarketingConfigurationAuthorization;
    /**
     * UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated. When specified and not None, then stream will behave as incremental
     */
    startDate: string;
}

export interface SourceRdStationMarketingConfigurationAuthorization {
    signInViaRdStationOAuth?: outputs.SourceRdStationMarketingConfigurationAuthorizationSignInViaRdStationOAuth;
}

export interface SourceRdStationMarketingConfigurationAuthorizationSignInViaRdStationOAuth {
    /**
     * The Client ID of your RD Station developer application.
     */
    clientId?: string;
    /**
     * The Client Secret of your RD Station developer application
     */
    clientSecret?: string;
    /**
     * The token for obtaining the new access token.
     */
    refreshToken?: string;
}

export interface SourceRdStationMarketingResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceRdStationMarketingResourceAllocationDefault;
    jobSpecifics: outputs.SourceRdStationMarketingResourceAllocationJobSpecific[];
}

export interface SourceRdStationMarketingResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceRdStationMarketingResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceRdStationMarketingResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceRdStationMarketingResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceRechargeConfiguration {
    /**
     * The value of the Access Token generated. See the <a href="https://docs.airbyte.com/integrations/sources/recharge">docs</a> for more information.
     */
    accessToken: string;
    /**
     * The date from which you'd like to replicate data for Recharge API, in the format YYYY-MM-DDT00:00:00Z. Any data before this date will not be replicated.
     */
    startDate: string;
    /**
     * Define whether or not the `Orders` stream should use the deprecated `2021-01` API version, or use `2021-11`, otherwise. Default: true
     */
    useOrdersDeprecatedApi: boolean;
}

export interface SourceRechargeResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceRechargeResourceAllocationDefault;
    jobSpecifics: outputs.SourceRechargeResourceAllocationJobSpecific[];
}

export interface SourceRechargeResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceRechargeResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceRechargeResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceRechargeResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceRecreationConfiguration {
    /**
     * API Key
     */
    apikey: string;
    queryCampsites?: string;
}

export interface SourceRecreationResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceRecreationResourceAllocationDefault;
    jobSpecifics: outputs.SourceRecreationResourceAllocationJobSpecific[];
}

export interface SourceRecreationResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceRecreationResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceRecreationResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceRecreationResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceRecruiteeConfiguration {
    /**
     * Recruitee API Key. See <a href="https://docs.recruitee.com/reference/getting-started#generate-api-token">here</a>.
     */
    apiKey: string;
    /**
     * Recruitee Company ID. You can also find this ID on the <a href="https://app.recruitee.com/#/settings/api_tokens">Recruitee API tokens page</a>.
     */
    companyId: number;
}

export interface SourceRecruiteeResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceRecruiteeResourceAllocationDefault;
    jobSpecifics: outputs.SourceRecruiteeResourceAllocationJobSpecific[];
}

export interface SourceRecruiteeResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceRecruiteeResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceRecruiteeResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceRecruiteeResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceRecurlyConfiguration {
    /**
     * Recurly API Key. See the  <a href="https://docs.airbyte.com/integrations/sources/recurly">docs</a> for more information on how to generate this key.
     */
    apiKey: string;
    /**
     * ISO8601 timestamp from which the replication from Recurly API will start from.
     */
    beginTime?: string;
    /**
     * ISO8601 timestamp to which the replication from Recurly API will stop. Records after that date won't be imported.
     */
    endTime?: string;
}

export interface SourceRecurlyResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceRecurlyResourceAllocationDefault;
    jobSpecifics: outputs.SourceRecurlyResourceAllocationJobSpecific[];
}

export interface SourceRecurlyResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceRecurlyResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceRecurlyResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceRecurlyResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceRedditConfiguration {
    apiKey: string;
    /**
     * Specifies exact keyword and reduces distractions
     */
    exact?: boolean;
    /**
     * Includes mature content. Default: false
     */
    includeOver18: boolean;
    /**
     * Max records per page limit
     */
    limit?: number;
    /**
     * Specifies the query for searching in reddits and subreddits. Default: "airbyte"
     */
    query: string;
    startDate: string;
    /**
     * Subreddits for exploration
     */
    subreddits?: string[];
}

export interface SourceRedditResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceRedditResourceAllocationDefault;
    jobSpecifics: outputs.SourceRedditResourceAllocationJobSpecific[];
}

export interface SourceRedditResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceRedditResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceRedditResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceRedditResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceRedshiftConfiguration {
    /**
     * Name of the database.
     */
    database: string;
    /**
     * Host Endpoint of the Redshift Cluster (must include the cluster-id, region and end with .redshift.amazonaws.com).
     */
    host: string;
    /**
     * Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '&'. (example: key1=value1&key2=value2&key3=value3).
     */
    jdbcUrlParams?: string;
    /**
     * Password associated with the username.
     */
    password: string;
    /**
     * Port of the database. Default: 5439
     */
    port: number;
    /**
     * The list of schemas to sync from. Specify one or more explicitly or keep empty to process all schemas. Schema names are case sensitive.
     */
    schemas?: string[];
    /**
     * Username to use to access the database.
     */
    username: string;
}

export interface SourceRedshiftResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceRedshiftResourceAllocationDefault;
    jobSpecifics: outputs.SourceRedshiftResourceAllocationJobSpecific[];
}

export interface SourceRedshiftResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceRedshiftResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceRedshiftResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceRedshiftResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceReferralheroConfiguration {
    apiKey: string;
}

export interface SourceReferralheroResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceReferralheroResourceAllocationDefault;
    jobSpecifics: outputs.SourceReferralheroResourceAllocationJobSpecific[];
}

export interface SourceReferralheroResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceReferralheroResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceReferralheroResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceReferralheroResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceRentcastConfiguration {
    /**
     * The full address of the property, in the format of Street, City, State, Zip. Used to retrieve data for a specific property, or together with the radius parameter to search for listings in a specific area
     */
    address?: string;
    apiKey: string;
    /**
     * The number of bathrooms, used to search for listings matching this criteria. Supports fractions to indicate partial bathrooms
     */
    bathRooms?: number;
    /**
     * The number of bedrooms, used to search for listings matching this criteria. Use 0 to indicate a studio layout
     */
    bedrooms?: number;
    /**
     * The name of the city, used to search for listings in a specific city. This parameter is case-sensitive
     */
    city?: string;
    /**
     * The type of aggregate market data to return. Defaults to "All" if not provided : All , Sale , Rental
     */
    dataType?: string;
    /**
     * The maximum number of days since a property was listed on the market, with a minimum of 1 or The maximum number of days since a property was last sold, with a minimum of 1. Used to search for properties that were sold within the specified date range
     */
    daysOld?: string;
    /**
     * The time range for historical record entries, in months. Defaults to 12 if not provided
     */
    historyRange?: string;
    /**
     * The latitude of the search area. Use the latitude/longitude and radius parameters to search for listings in a specific area
     */
    latitude?: string;
    /**
     * The longitude of the search area. Use the latitude/longitude and radius parameters to search for listings in a specific area
     */
    longitude?: string;
    /**
     * The type of the property, used to search for listings matching this criteria : Single Family , Condo , Townhouse , Manufactured ,  Multi-Family , Apartment , Land ,
     */
    propertyType?: string;
    /**
     * The radius of the search area in miles, with a maximum of 100. Use in combination with the latitude/longitude or address parameters to search for listings in a specific area
     */
    radius?: string;
    /**
     * The 2-character state abbreviation, used to search for listings in a specific state. This parameter is case-sensitive
     */
    state?: string;
    /**
     * The current listing status, used to search for listings matching this criteria : Active or Inactive
     */
    status?: string;
    /**
     * The 5-digit zip code, used to search for listings in a specific zip code
     */
    zipcode?: string;
}

export interface SourceRentcastResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceRentcastResourceAllocationDefault;
    jobSpecifics: outputs.SourceRentcastResourceAllocationJobSpecific[];
}

export interface SourceRentcastResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceRentcastResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceRentcastResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceRentcastResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceRepairshoprConfiguration {
    apiKey: string;
    subdomain: string;
}

export interface SourceRepairshoprResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceRepairshoprResourceAllocationDefault;
    jobSpecifics: outputs.SourceRepairshoprResourceAllocationJobSpecific[];
}

export interface SourceRepairshoprResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceRepairshoprResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceRepairshoprResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceRepairshoprResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceReplyIoConfiguration {
    /**
     * The API Token for Reply
     */
    apiKey: string;
}

export interface SourceReplyIoResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceReplyIoResourceAllocationDefault;
    jobSpecifics: outputs.SourceReplyIoResourceAllocationJobSpecific[];
}

export interface SourceReplyIoResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceReplyIoResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceReplyIoResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceReplyIoResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceRetailexpressByMaropostConfiguration {
    apiKey: string;
    startDate: string;
}

export interface SourceRetailexpressByMaropostResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceRetailexpressByMaropostResourceAllocationDefault;
    jobSpecifics: outputs.SourceRetailexpressByMaropostResourceAllocationJobSpecific[];
}

export interface SourceRetailexpressByMaropostResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceRetailexpressByMaropostResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceRetailexpressByMaropostResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceRetailexpressByMaropostResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceRetentlyConfiguration {
    /**
     * Choose how to authenticate to Retently
     */
    credentials?: outputs.SourceRetentlyConfigurationCredentials;
}

export interface SourceRetentlyConfigurationCredentials {
    authenticateViaRetentlyOAuth?: outputs.SourceRetentlyConfigurationCredentialsAuthenticateViaRetentlyOAuth;
    authenticateWithApiToken?: outputs.SourceRetentlyConfigurationCredentialsAuthenticateWithApiToken;
}

export interface SourceRetentlyConfigurationCredentialsAuthenticateViaRetentlyOAuth {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * The Client ID of your Retently developer application.
     */
    clientId: string;
    /**
     * The Client Secret of your Retently developer application.
     */
    clientSecret: string;
    /**
     * Retently Refresh Token which can be used to fetch new Bearer Tokens when the current one expires.
     */
    refreshToken: string;
}

export interface SourceRetentlyConfigurationCredentialsAuthenticateWithApiToken {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * Retently API Token. See the <a href="https://app.retently.com/settings/api/tokens">docs</a> for more information on how to obtain this key.
     */
    apiKey: string;
}

export interface SourceRetentlyResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceRetentlyResourceAllocationDefault;
    jobSpecifics: outputs.SourceRetentlyResourceAllocationJobSpecific[];
}

export interface SourceRetentlyResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceRetentlyResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceRetentlyResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceRetentlyResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceRevenuecatConfiguration {
    /**
     * API key or access token
     */
    apiKey: string;
    startDate: string;
}

export interface SourceRevenuecatResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceRevenuecatResourceAllocationDefault;
    jobSpecifics: outputs.SourceRevenuecatResourceAllocationJobSpecific[];
}

export interface SourceRevenuecatResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceRevenuecatResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceRevenuecatResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceRevenuecatResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceRevolutMerchantConfiguration {
    /**
     * Specify the API version to use. This is required for certain API calls. Example: '2024-09-01'.
     */
    apiVersion: string;
    /**
     * The base url of your environment. Either sandbox or production. must be one of ["sandbox-merchant", "merchant"]
     */
    environment: string;
    /**
     * Secret API key to use for authenticating with the Revolut Merchant API. Find it in your Revolut Business account under APIs > Merchant API.
     */
    secretApiKey: string;
    startDate: string;
}

export interface SourceRevolutMerchantResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceRevolutMerchantResourceAllocationDefault;
    jobSpecifics: outputs.SourceRevolutMerchantResourceAllocationJobSpecific[];
}

export interface SourceRevolutMerchantResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceRevolutMerchantResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceRevolutMerchantResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceRevolutMerchantResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceRingcentralConfiguration {
    /**
     * Could be seen at response to basic api call to an endpoint with ~ operator.  Example- (https://platform.devtest.ringcentral.com/restapi/v1.0/account/~/extension/~/business-hours)
     */
    accountId: string;
    /**
     * Token could be recieved by following instructions at https://developers.ringcentral.com/api-reference/authentication
     */
    authToken: string;
    /**
     * Could be seen at response to basic api call to an endpoint with ~ operator.  Example- (https://platform.devtest.ringcentral.com/restapi/v1.0/account/~/extension/~/business-hours)
     */
    extensionId: string;
}

export interface SourceRingcentralResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceRingcentralResourceAllocationDefault;
    jobSpecifics: outputs.SourceRingcentralResourceAllocationJobSpecific[];
}

export interface SourceRingcentralResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceRingcentralResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceRingcentralResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceRingcentralResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceRkiCovidConfiguration {
    /**
     * UTC date in the format 2017-01-25. Any data before this date will not be replicated.
     */
    startDate: string;
}

export interface SourceRkiCovidResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceRkiCovidResourceAllocationDefault;
    jobSpecifics: outputs.SourceRkiCovidResourceAllocationJobSpecific[];
}

export interface SourceRkiCovidResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceRkiCovidResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceRkiCovidResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceRkiCovidResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceRocketChatConfiguration {
    /**
     * Your rocket.chat instance URL.
     */
    endpoint: string;
    /**
     * Your API Token. See <a href="https://developer.rocket.chat/reference/api/rest-api/endpoints/other-important-endpoints/access-tokens-endpoints">here</a>. The token is case sensitive.
     */
    token: string;
    /**
     * Your User Id.
     */
    userId: string;
}

export interface SourceRocketChatResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceRocketChatResourceAllocationDefault;
    jobSpecifics: outputs.SourceRocketChatResourceAllocationJobSpecific[];
}

export interface SourceRocketChatResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceRocketChatResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceRocketChatResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceRocketChatResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceRocketlaneConfiguration {
    /**
     * API key to use. Generate it from the API section in Settings of your Rocketlane account.
     */
    apiKey: string;
}

export interface SourceRocketlaneResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceRocketlaneResourceAllocationDefault;
    jobSpecifics: outputs.SourceRocketlaneResourceAllocationJobSpecific[];
}

export interface SourceRocketlaneResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceRocketlaneResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceRocketlaneResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceRocketlaneResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceRollbarConfiguration {
    accountAccessToken: string;
    projectAccessToken: string;
    startDate: string;
}

export interface SourceRollbarResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceRollbarResourceAllocationDefault;
    jobSpecifics: outputs.SourceRollbarResourceAllocationJobSpecific[];
}

export interface SourceRollbarResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceRollbarResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceRollbarResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceRollbarResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceRootlyConfiguration {
    apiKey: string;
    startDate: string;
}

export interface SourceRootlyResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceRootlyResourceAllocationDefault;
    jobSpecifics: outputs.SourceRootlyResourceAllocationJobSpecific[];
}

export interface SourceRootlyResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceRootlyResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceRootlyResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceRootlyResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceRssConfiguration {
    /**
     * RSS Feed URL
     */
    url: string;
}

export interface SourceRssResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceRssResourceAllocationDefault;
    jobSpecifics: outputs.SourceRssResourceAllocationJobSpecific[];
}

export interface SourceRssResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceRssResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceRssResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceRssResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceRuddrConfiguration {
    /**
     * API token to use. Generate it in the API Keys section of your Ruddr workspace settings.
     */
    apiToken: string;
}

export interface SourceRuddrResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceRuddrResourceAllocationDefault;
    jobSpecifics: outputs.SourceRuddrResourceAllocationJobSpecific[];
}

export interface SourceRuddrResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceRuddrResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceRuddrResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceRuddrResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceS3Configuration {
    /**
     * In order to access private Buckets stored on AWS S3, this connector requires credentials with the proper permissions. If accessing publicly available data, this field is not necessary.
     */
    awsAccessKeyId?: string;
    /**
     * In order to access private Buckets stored on AWS S3, this connector requires credentials with the proper permissions. If accessing publicly available data, this field is not necessary.
     */
    awsSecretAccessKey?: string;
    /**
     * Name of the S3 bucket where the file(s) exist.
     */
    bucket: string;
    deliveryMethod?: outputs.SourceS3ConfigurationDeliveryMethod;
    /**
     * Endpoint to an S3 compatible service. Leave empty to use AWS. Default: ""
     */
    endpoint: string;
    /**
     * AWS region where the S3 bucket is located. If not provided, the region will be determined automatically.
     */
    regionName?: string;
    /**
     * Specifies the Amazon Resource Name (ARN) of an IAM role that you want to use to perform operations requested using this profile. Set the External ID to the Airbyte workspace ID, which can be found in the URL of this page.
     */
    roleArn?: string;
    /**
     * UTC date and time in the format 2017-01-25T00:00:00.000000Z. Any file modified before this date will not be replicated.
     */
    startDate?: string;
    /**
     * Each instance of this configuration defines a <a href="https://docs.airbyte.com/cloud/core-concepts#stream">stream</a>. Use this to define which files belong in the stream, their format, and how they should be parsed and validated. When sending data to warehouse destination such as Snowflake or BigQuery, each stream is a separate table.
     */
    streams: outputs.SourceS3ConfigurationStream[];
}

export interface SourceS3ConfigurationDeliveryMethod {
    /**
     * Copy raw files without parsing their contents. Bits are copied into the destination exactly as they appeared in the source. Recommended for use with unstructured text data, non-text and compressed files.
     */
    copyRawFiles?: outputs.SourceS3ConfigurationDeliveryMethodCopyRawFiles;
    /**
     * Recommended - Extract and load structured records into your destination of choice. This is the classic method of moving data in Airbyte. It allows for blocking and hashing individual fields or files from a structured schema. Data can be flattened, typed and deduped depending on the destination.
     */
    replicateRecords?: outputs.SourceS3ConfigurationDeliveryMethodReplicateRecords;
}

export interface SourceS3ConfigurationDeliveryMethodCopyRawFiles {
    /**
     * If enabled, sends subdirectory folder structure along with source file names to the destination. Otherwise, files will be synced by their names only. This option is ignored when file-based replication is not enabled. Default: true
     */
    preserveDirectoryStructure: boolean;
}

export interface SourceS3ConfigurationDeliveryMethodReplicateRecords {
}

export interface SourceS3ConfigurationStream {
    /**
     * When the state history of the file store is full, syncs will only read files that were last modified in the provided day range. Default: 3
     */
    daysToSyncIfHistoryIsFull: number;
    /**
     * The configuration options that are used to alter how to read incoming files that deviate from the standard formatting.
     */
    format: outputs.SourceS3ConfigurationStreamFormat;
    /**
     * The pattern used to specify which files should be selected from the file system. For more information on glob pattern matching look <a href="https://en.wikipedia.org/wiki/Glob_(programming)">here</a>.
     */
    globs?: string[];
    /**
     * The schema that will be used to validate records extracted from the file. This will override the stream schema that is auto-detected from incoming files.
     */
    inputSchema?: string;
    /**
     * The name of the stream.
     */
    name: string;
    /**
     * The number of resent files which will be used to discover the schema for this stream.
     */
    recentNFilesToReadForSchemaDiscovery?: number;
    /**
     * When enabled, syncs will not validate or structure records against the stream's schema. Default: false
     */
    schemaless: boolean;
    /**
     * The name of the validation policy that dictates sync behavior when a record does not adhere to the stream schema. Default: "Emit Record"; must be one of ["Emit Record", "Skip Record", "Wait for Discover"]
     */
    validationPolicy: string;
}

export interface SourceS3ConfigurationStreamFormat {
    avroFormat?: outputs.SourceS3ConfigurationStreamFormatAvroFormat;
    csvFormat?: outputs.SourceS3ConfigurationStreamFormatCsvFormat;
    excelFormat?: outputs.SourceS3ConfigurationStreamFormatExcelFormat;
    jsonlFormat?: outputs.SourceS3ConfigurationStreamFormatJsonlFormat;
    parquetFormat?: outputs.SourceS3ConfigurationStreamFormatParquetFormat;
    /**
     * Extract text from document formats (.pdf, .docx, .md, .pptx) and emit as one record per file.
     */
    unstructuredDocumentFormat?: outputs.SourceS3ConfigurationStreamFormatUnstructuredDocumentFormat;
}

export interface SourceS3ConfigurationStreamFormatAvroFormat {
    /**
     * Whether to convert double fields to strings. This is recommended if you have decimal numbers with a high degree of precision because there can be a loss precision when handling floating point numbers. Default: false
     */
    doubleAsString: boolean;
}

export interface SourceS3ConfigurationStreamFormatCsvFormat {
    /**
     * The character delimiting individual cells in the CSV data. This may only be a 1-character string. For tab-delimited data enter '\t'. Default: ","
     */
    delimiter: string;
    /**
     * Whether two quotes in a quoted CSV value denote a single quote in the data. Default: true
     */
    doubleQuote: boolean;
    /**
     * The character encoding of the CSV data. Leave blank to default to <strong>UTF8</strong>. See <a href="https://docs.python.org/3/library/codecs.html#standard-encodings" target="_blank">list of python encodings</a> for allowable options. Default: "utf8"
     */
    encoding: string;
    /**
     * The character used for escaping special characters. To disallow escaping, leave this field blank.
     */
    escapeChar?: string;
    /**
     * A set of case-sensitive strings that should be interpreted as false values.
     */
    falseValues?: string[];
    /**
     * How headers will be defined. `User Provided` assumes the CSV does not have a header row and uses the headers provided and `Autogenerated` assumes the CSV does not have a header row and the CDK will generate headers using for `f{i}` where `i` is the index starting from 0. Else, the default behavior is to use the header from the CSV file. If a user wants to autogenerate or provide column names for a CSV having headers, they can skip rows.
     */
    headerDefinition?: outputs.SourceS3ConfigurationStreamFormatCsvFormatHeaderDefinition;
    /**
     * Whether to ignore errors that occur when the number of fields in the CSV does not match the number of columns in the schema. Default: false
     */
    ignoreErrorsOnFieldsMismatch: boolean;
    /**
     * A set of case-sensitive strings that should be interpreted as null values. For example, if the value 'NA' should be interpreted as null, enter 'NA' in this field.
     */
    nullValues: string[];
    /**
     * The character used for quoting CSV values. To disallow quoting, make this field blank. Default: "\""
     */
    quoteChar: string;
    /**
     * The number of rows to skip after the header row. Default: 0
     */
    skipRowsAfterHeader: number;
    /**
     * The number of rows to skip before the header row. For example, if the header row is on the 3rd row, enter 2 in this field. Default: 0
     */
    skipRowsBeforeHeader: number;
    /**
     * Whether strings can be interpreted as null values. If true, strings that match the null_values set will be interpreted as null. If false, strings that match the null_values set will be interpreted as the string itself. Default: true
     */
    stringsCanBeNull: boolean;
    /**
     * A set of case-sensitive strings that should be interpreted as true values.
     */
    trueValues?: string[];
}

export interface SourceS3ConfigurationStreamFormatCsvFormatHeaderDefinition {
    autogenerated?: outputs.SourceS3ConfigurationStreamFormatCsvFormatHeaderDefinitionAutogenerated;
    fromCsv?: outputs.SourceS3ConfigurationStreamFormatCsvFormatHeaderDefinitionFromCsv;
    userProvided?: outputs.SourceS3ConfigurationStreamFormatCsvFormatHeaderDefinitionUserProvided;
}

export interface SourceS3ConfigurationStreamFormatCsvFormatHeaderDefinitionAutogenerated {
}

export interface SourceS3ConfigurationStreamFormatCsvFormatHeaderDefinitionFromCsv {
}

export interface SourceS3ConfigurationStreamFormatCsvFormatHeaderDefinitionUserProvided {
    /**
     * The column names that will be used while emitting the CSV records
     */
    columnNames: string[];
}

export interface SourceS3ConfigurationStreamFormatExcelFormat {
}

export interface SourceS3ConfigurationStreamFormatJsonlFormat {
}

export interface SourceS3ConfigurationStreamFormatParquetFormat {
    /**
     * Whether to convert decimal fields to floats. There is a loss of precision when converting decimals to floats, so this is not recommended. Default: false
     */
    decimalAsFloat: boolean;
}

export interface SourceS3ConfigurationStreamFormatUnstructuredDocumentFormat {
    /**
     * Processing configuration
     */
    processing?: outputs.SourceS3ConfigurationStreamFormatUnstructuredDocumentFormatProcessing;
    /**
     * If true, skip files that cannot be parsed and pass the error message along as the _ab_source_file_parse_error field. If false, fail the sync. Default: true
     */
    skipUnprocessableFiles: boolean;
    /**
     * The strategy used to parse documents. `fast` extracts text directly from the document which doesn't work for all files. `ocr_only` is more reliable, but slower. `hi_res` is the most reliable, but requires an API key and a hosted instance of unstructured and can't be used with local mode. See the unstructured.io documentation for more details: https://unstructured-io.github.io/unstructured/core/partition.html#partition-pdf. Default: "auto"; must be one of ["auto", "fast", "ocr_only", "hi_res"]
     */
    strategy: string;
}

export interface SourceS3ConfigurationStreamFormatUnstructuredDocumentFormatProcessing {
    /**
     * Process files locally, supporting `fast` and `ocr` modes. This is the default option.
     */
    local?: outputs.SourceS3ConfigurationStreamFormatUnstructuredDocumentFormatProcessingLocal;
}

export interface SourceS3ConfigurationStreamFormatUnstructuredDocumentFormatProcessingLocal {
}

export interface SourceS3ResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceS3ResourceAllocationDefault;
    jobSpecifics: outputs.SourceS3ResourceAllocationJobSpecific[];
}

export interface SourceS3ResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceS3ResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceS3ResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceS3ResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSafetycultureConfiguration {
    apiKey: string;
}

export interface SourceSafetycultureResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceSafetycultureResourceAllocationDefault;
    jobSpecifics: outputs.SourceSafetycultureResourceAllocationJobSpecific[];
}

export interface SourceSafetycultureResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSafetycultureResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceSafetycultureResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceSafetycultureResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSageHrConfiguration {
    apiKey: string;
    subdomain: string;
}

export interface SourceSageHrResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceSageHrResourceAllocationDefault;
    jobSpecifics: outputs.SourceSageHrResourceAllocationJobSpecific[];
}

export interface SourceSageHrResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSageHrResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceSageHrResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceSageHrResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSalesflareConfiguration {
    /**
     * Enter you api key like this : Bearer YOUR_API_KEY
     */
    apiKey: string;
}

export interface SourceSalesflareResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceSalesflareResourceAllocationDefault;
    jobSpecifics: outputs.SourceSalesflareResourceAllocationJobSpecific[];
}

export interface SourceSalesflareResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSalesflareResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceSalesflareResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceSalesflareResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSalesforceConfiguration {
    /**
     * Enter your Salesforce developer application's <a href="https://developer.salesforce.com/forums/?id=9062I000000DLgbQAG">Client ID</a>
     */
    clientId: string;
    /**
     * Enter your Salesforce developer application's <a href="https://developer.salesforce.com/forums/?id=9062I000000DLgbQAG">Client secret</a>
     */
    clientSecret: string;
    /**
     * Toggle to use Bulk API (this might cause empty fields for some streams). Default: false
     */
    forceUseBulkApi: boolean;
    /**
     * Toggle if you're using a <a href="https://help.salesforce.com/s/articleView?id=sf.deploy_sandboxes_parent.htm&type=5">Salesforce Sandbox</a>. Default: false
     */
    isSandbox: boolean;
    /**
     * Enter your application's <a href="https://developer.salesforce.com/docs/atlas.en-us.mobile_sdk.meta/mobile_sdk/oauth_refresh_token_flow.htm">Salesforce Refresh Token</a> used for Airbyte to access your Salesforce account.
     */
    refreshToken: string;
    /**
     * Enter the date (or date-time) in the YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. Airbyte will replicate the data updated on and after this date. If this field is blank, Airbyte will replicate the data for last two years.
     */
    startDate?: string;
    /**
     * The size of the time window (ISO8601 duration) to slice requests. Default: "P30D"
     */
    streamSliceStep: string;
    /**
     * Add filters to select only required stream based on `SObject` name. Use this field to filter which tables are displayed by this connector. This is useful if your Salesforce account has a large number of tables (>1000), in which case you may find it easier to navigate the UI and speed up the connector's performance if you restrict the tables displayed by this connector.
     */
    streamsCriterias?: outputs.SourceSalesforceConfigurationStreamsCriteria[];
}

export interface SourceSalesforceConfigurationStreamsCriteria {
    /**
     * Default: "contains"; must be one of ["starts with", "ends with", "contains", "exacts", "starts not with", "ends not with", "not contains", "not exacts"]
     */
    criteria: string;
    value: string;
}

export interface SourceSalesforceResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceSalesforceResourceAllocationDefault;
    jobSpecifics: outputs.SourceSalesforceResourceAllocationJobSpecific[];
}

export interface SourceSalesforceResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSalesforceResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceSalesforceResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceSalesforceResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSalesloftConfiguration {
    credentials: outputs.SourceSalesloftConfigurationCredentials;
    /**
     * The date from which you'd like to replicate data for Salesloft API, in the format YYYY-MM-DDT00:00:00Z. All data generated after this date will be replicated.
     */
    startDate: string;
}

export interface SourceSalesloftConfigurationCredentials {
    authenticateViaApiKey?: outputs.SourceSalesloftConfigurationCredentialsAuthenticateViaApiKey;
    authenticateViaOAuth?: outputs.SourceSalesloftConfigurationCredentialsAuthenticateViaOAuth;
}

export interface SourceSalesloftConfigurationCredentialsAuthenticateViaApiKey {
    /**
     * API Key for making authenticated requests. More instruction on how to find this value in our <a href="https://docs.airbyte.com/integrations/sources/salesloft#setup-guide">docs</a>
     */
    apiKey: string;
}

export interface SourceSalesloftConfigurationCredentialsAuthenticateViaOAuth {
    /**
     * Access Token for making authenticated requests.
     */
    accessToken: string;
    /**
     * The Client ID of your Salesloft developer application.
     */
    clientId: string;
    /**
     * The Client Secret of your Salesloft developer application.
     */
    clientSecret: string;
    /**
     * The token for obtaining a new access token.
     */
    refreshToken: string;
    /**
     * The date-time when the access token should be refreshed.
     */
    tokenExpiryDate: string;
}

export interface SourceSalesloftResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceSalesloftResourceAllocationDefault;
    jobSpecifics: outputs.SourceSalesloftResourceAllocationJobSpecific[];
}

export interface SourceSalesloftResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSalesloftResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceSalesloftResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceSalesloftResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSapFieldglassConfiguration {
    /**
     * API Key
     */
    apiKey: string;
}

export interface SourceSapFieldglassResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceSapFieldglassResourceAllocationDefault;
    jobSpecifics: outputs.SourceSapFieldglassResourceAllocationJobSpecific[];
}

export interface SourceSapFieldglassResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSapFieldglassResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceSapFieldglassResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceSapFieldglassResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSapHanaEnterpriseConfiguration {
    /**
     * When this feature is enabled, during schema discovery the connector will query each table or view individually to check access privileges and inaccessible tables, views, or columns therein will be removed. In large schemas, this might cause schema discovery to take too long, in which case it might be advisable to disable this feature. Default: true
     */
    checkPrivileges: boolean;
    /**
     * How often (in seconds) a stream should checkpoint, when possible. Default: 300
     */
    checkpointTargetIntervalSeconds: number;
    /**
     * Maximum number of concurrent queries to the database. Default: 1
     */
    concurrency: number;
    /**
     * Configures how data is extracted from the database.
     */
    cursor: outputs.SourceSapHanaEnterpriseConfigurationCursor;
    /**
     * The encryption method with is used when communicating with the database.
     */
    encryption: outputs.SourceSapHanaEnterpriseConfigurationEncryption;
    /**
     * Hostname of the database.
     */
    host: string;
    /**
     * Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '&'. (example: key1=value1&key2=value2&key3=value3).
     */
    jdbcUrlParams?: string;
    /**
     * The password associated with the username.
     */
    password?: string;
    /**
     * Port of the database.
     * SapHana Corporations recommends the following port numbers:
     * 443 - Default listening port for SAP HANA cloud client connections to the listener.
     * Default: 443
     */
    port: number;
    /**
     * The list of schemas to sync from. Defaults to user. Case sensitive.
     */
    schemas?: string[];
    /**
     * Whether to initiate an SSH tunnel before connecting to the database, and if so, which kind of authentication to use.
     */
    tunnelMethod: outputs.SourceSapHanaEnterpriseConfigurationTunnelMethod;
    /**
     * The username which is used to access the database.
     */
    username: string;
}

export interface SourceSapHanaEnterpriseConfigurationCursor {
    /**
     * <i>Recommended</i> - Incrementally reads new inserts, updates, and deletes using change data capture feature. This must be enabled on your database.
     */
    readChangesUsingChangeDataCaptureCdc?: outputs.SourceSapHanaEnterpriseConfigurationCursorReadChangesUsingChangeDataCaptureCdc;
    /**
     * Incrementally detects new inserts and updates using the <a href="https://docs.airbyte.com/understanding-airbyte/connections/incremental-append/#user-defined-cursor">cursor column</a> chosen when configuring a connection (e.g. created_at, updated_at).
     */
    scanChangesWithUserDefinedCursor?: outputs.SourceSapHanaEnterpriseConfigurationCursorScanChangesWithUserDefinedCursor;
}

export interface SourceSapHanaEnterpriseConfigurationCursorReadChangesUsingChangeDataCaptureCdc {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * Default: "cdc"; must be "cdc"
     */
    cursorMethod: string;
    /**
     * The amount of time an initial load is allowed to continue for before catching up on CDC events. Default: 8
     */
    initialLoadTimeoutHours: number;
    /**
     * Determines whether Airbyte should fail or re-sync data in case of an stale/invalid cursor value in the mined logs. If 'Fail sync' is chosen, a user will have to manually reset the connection before being able to continue syncing data. If 'Re-sync data' is chosen, Airbyte will automatically trigger a refresh but could lead to higher cloud costs and data loss. Default: "Fail sync"; must be one of ["Fail sync", "Re-sync data"]
     */
    invalidCdcCursorPositionBehavior: string;
}

export interface SourceSapHanaEnterpriseConfigurationCursorScanChangesWithUserDefinedCursor {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * Default: "user_defined"; must be "user_defined"
     */
    cursorMethod: string;
}

export interface SourceSapHanaEnterpriseConfigurationEncryption {
    /**
     * The native network encryption gives you the ability to encrypt database connections, without the configuration overhead of TCP/IP and SSL/TLS and without the need to open and listen on different ports.
     */
    nativeNetworkEncryptionNne?: outputs.SourceSapHanaEnterpriseConfigurationEncryptionNativeNetworkEncryptionNne;
    /**
     * Verify and use the certificate provided by the server.
     */
    tlsEncryptedVerifyCertificate?: outputs.SourceSapHanaEnterpriseConfigurationEncryptionTlsEncryptedVerifyCertificate;
    /**
     * Data transfer will not be encrypted.
     */
    unencrypted?: outputs.SourceSapHanaEnterpriseConfigurationEncryptionUnencrypted;
}

export interface SourceSapHanaEnterpriseConfigurationEncryptionNativeNetworkEncryptionNne {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * This parameter defines what encryption algorithm is used. Default: "AES256"; must be one of ["AES256", "RC4_56", "3DES168"]
     */
    encryptionAlgorithm: string;
    /**
     * Default: "client_nne"; must be "client_nne"
     */
    encryptionMethod: string;
}

export interface SourceSapHanaEnterpriseConfigurationEncryptionTlsEncryptedVerifyCertificate {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * Default: "encrypted_verify_certificate"; must be "encrypted_verify_certificate"
     */
    encryptionMethod: string;
    /**
     * Privacy Enhanced Mail (PEM) files are concatenated certificate containers frequently used in certificate installations.
     */
    sslCertificate: string;
}

export interface SourceSapHanaEnterpriseConfigurationEncryptionUnencrypted {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * Default: "unencrypted"; must be "unencrypted"
     */
    encryptionMethod: string;
}

export interface SourceSapHanaEnterpriseConfigurationTunnelMethod {
    /**
     * No ssh tunnel needed to connect to database
     */
    noTunnel?: outputs.SourceSapHanaEnterpriseConfigurationTunnelMethodNoTunnel;
    /**
     * Connect through a jump server tunnel host using username and password authentication
     */
    passwordAuthentication?: outputs.SourceSapHanaEnterpriseConfigurationTunnelMethodPasswordAuthentication;
    /**
     * Connect through a jump server tunnel host using username and ssh key
     */
    sshKeyAuthentication?: outputs.SourceSapHanaEnterpriseConfigurationTunnelMethodSshKeyAuthentication;
}

export interface SourceSapHanaEnterpriseConfigurationTunnelMethodNoTunnel {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * Default: "NO_TUNNEL"; must be "NO_TUNNEL"
     */
    tunnelMethod: string;
}

export interface SourceSapHanaEnterpriseConfigurationTunnelMethodPasswordAuthentication {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * Hostname of the jump server host that allows inbound ssh tunnel.
     */
    tunnelHost: string;
    /**
     * Default: "SSH_PASSWORD_AUTH"; must be "SSH_PASSWORD_AUTH"
     */
    tunnelMethod: string;
    /**
     * Port on the proxy/jump server that accepts inbound ssh connections. Default: 22
     */
    tunnelPort: number;
    /**
     * OS-level username for logging into the jump server host
     */
    tunnelUser: string;
    /**
     * OS-level password for logging into the jump server host
     */
    tunnelUserPassword: string;
}

export interface SourceSapHanaEnterpriseConfigurationTunnelMethodSshKeyAuthentication {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * OS-level user account ssh key credentials in RSA PEM format ( created with ssh-keygen -t rsa -m PEM -f myuser_rsa )
     */
    sshKey: string;
    /**
     * Hostname of the jump server host that allows inbound ssh tunnel.
     */
    tunnelHost: string;
    /**
     * Default: "SSH_KEY_AUTH"; must be "SSH_KEY_AUTH"
     */
    tunnelMethod: string;
    /**
     * Port on the proxy/jump server that accepts inbound ssh connections. Default: 22
     */
    tunnelPort: number;
    /**
     * OS-level username for logging into the jump server host
     */
    tunnelUser: string;
}

export interface SourceSapHanaEnterpriseResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceSapHanaEnterpriseResourceAllocationDefault;
    jobSpecifics: outputs.SourceSapHanaEnterpriseResourceAllocationJobSpecific[];
}

export interface SourceSapHanaEnterpriseResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSapHanaEnterpriseResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceSapHanaEnterpriseResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceSapHanaEnterpriseResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSavvycalConfiguration {
    /**
     * Go to SavvyCal → Settings → Developer → Personal Tokens and make a new token. Then, copy the private key. https://savvycal.com/developers
     */
    apiKey: string;
}

export interface SourceSavvycalResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceSavvycalResourceAllocationDefault;
    jobSpecifics: outputs.SourceSavvycalResourceAllocationJobSpecific[];
}

export interface SourceSavvycalResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSavvycalResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceSavvycalResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceSavvycalResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceScryfallConfiguration {
}

export interface SourceScryfallResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceScryfallResourceAllocationDefault;
    jobSpecifics: outputs.SourceScryfallResourceAllocationJobSpecific[];
}

export interface SourceScryfallResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceScryfallResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceScryfallResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceScryfallResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSecodaConfiguration {
    /**
     * Your API Access Key. See <a href="https://docs.secoda.co/secoda-api/authentication">here</a>. The key is case sensitive.
     */
    apiKey: string;
}

export interface SourceSecodaResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceSecodaResourceAllocationDefault;
    jobSpecifics: outputs.SourceSecodaResourceAllocationJobSpecific[];
}

export interface SourceSecodaResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSecodaResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceSecodaResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceSecodaResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSegmentConfiguration {
    /**
     * API token to use. Generate it in Segment's Workspace settings.
     */
    apiToken: string;
    /**
     * The region for the API, e.g., 'api' for US or 'eu1' for EU. Default: "api"
     */
    region: string;
    startDate: string;
}

export interface SourceSegmentResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceSegmentResourceAllocationDefault;
    jobSpecifics: outputs.SourceSegmentResourceAllocationJobSpecific[];
}

export interface SourceSegmentResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSegmentResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceSegmentResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceSegmentResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSendgridConfiguration {
    /**
     * Sendgrid API Key, use <a href=\"https://app.sendgrid.com/settings/api_keys/\">admin</a> to generate this key.
     */
    apiKey: string;
    /**
     * UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated.
     */
    startDate: string;
}

export interface SourceSendgridResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceSendgridResourceAllocationDefault;
    jobSpecifics: outputs.SourceSendgridResourceAllocationJobSpecific[];
}

export interface SourceSendgridResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSendgridResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceSendgridResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceSendgridResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSendinblueConfiguration {
    /**
     * Your API Key. See <a href="https://developers.sendinblue.com/docs/getting-started">here</a>.
     */
    apiKey: string;
}

export interface SourceSendinblueResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceSendinblueResourceAllocationDefault;
    jobSpecifics: outputs.SourceSendinblueResourceAllocationJobSpecific[];
}

export interface SourceSendinblueResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSendinblueResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceSendinblueResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceSendinblueResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSendowlConfiguration {
    /**
     * Enter your API secret
     */
    password?: string;
    startDate: string;
    /**
     * Enter you API Key
     */
    username: string;
}

export interface SourceSendowlResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceSendowlResourceAllocationDefault;
    jobSpecifics: outputs.SourceSendowlResourceAllocationJobSpecific[];
}

export interface SourceSendowlResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSendowlResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceSendowlResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceSendowlResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSendpulseConfiguration {
    clientId: string;
    clientSecret: string;
}

export interface SourceSendpulseResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceSendpulseResourceAllocationDefault;
    jobSpecifics: outputs.SourceSendpulseResourceAllocationJobSpecific[];
}

export interface SourceSendpulseResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSendpulseResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceSendpulseResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceSendpulseResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSenseforceConfiguration {
    /**
     * Your API access token. See <a href="https://manual.senseforce.io/manual/sf-platform/public-api/get-your-access-token/">here</a>. The toke is case sensitive.
     */
    accessToken: string;
    /**
     * Your Senseforce API backend URL. This is the URL shown during the Login screen. See <a href="https://manual.senseforce.io/manual/sf-platform/public-api/get-your-access-token/">here</a> for more details. (Note: Most Senseforce backend APIs have the term 'galaxy' in their ULR)
     */
    backendUrl: string;
    /**
     * The ID of the dataset you want to synchronize. The ID can be found in the URL when opening the dataset. See <a href="https://manual.senseforce.io/manual/sf-platform/public-api/get-your-access-token/">here</a> for more details. (Note: As the Senseforce API only allows to synchronize a specific dataset, each dataset you  want to synchronize needs to be implemented as a separate airbyte source).
     */
    datasetId: string;
    /**
     * UTC date and time in the format 2017-01-25. Only data with "Timestamp" after this date will be replicated. Important note: This start date must be set to the first day of where your dataset provides data.  If your dataset has data from 2020-10-10 10:21:10, set the start_date to 2020-10-10 or later
     */
    startDate: string;
}

export interface SourceSenseforceResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceSenseforceResourceAllocationDefault;
    jobSpecifics: outputs.SourceSenseforceResourceAllocationJobSpecific[];
}

export interface SourceSenseforceResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSenseforceResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceSenseforceResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceSenseforceResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSentryConfiguration {
    /**
     * Log into Sentry and then <a href="https://sentry.io/settings/account/api/auth-tokens/">create authentication tokens</a>.For self-hosted, you can find or create authentication tokens by visiting "{instance_url_prefix}/settings/account/api/auth-tokens/"
     */
    authToken: string;
    /**
     * Fields to retrieve when fetching discover events
     */
    discoverFields?: string[];
    /**
     * Host name of Sentry API server.For self-hosted, specify your host name here. Otherwise, leave it empty. Default: "sentry.io"
     */
    hostname: string;
    /**
     * The slug of the organization the groups belong to.
     */
    organization: string;
    /**
     * The name (slug) of the Project you want to sync.
     */
    project: string;
}

export interface SourceSentryResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceSentryResourceAllocationDefault;
    jobSpecifics: outputs.SourceSentryResourceAllocationJobSpecific[];
}

export interface SourceSentryResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSentryResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceSentryResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceSentryResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSerpstatConfiguration {
    /**
     * Serpstat API key can be found here: https://serpstat.com/users/profile/
     */
    apiKey: string;
    /**
     * The domain name to get data for (ex. serpstat.com). Default: "serpstat.com"
     */
    domain: string;
    /**
     * The list of domains that will be used in streams that support batch operations
     */
    domains?: string[];
    /**
     * The field name by which the results should be filtered. Filtering the results will result in fewer API credits spent. Each stream has different filtering options. See https://serpstat.com/api/ for more details.
     */
    filterBy?: string;
    /**
     * The value of the field to filter by. Each stream has different filtering options. See https://serpstat.com/api/ for more details.
     */
    filterValue?: string;
    /**
     * The number of data rows per page to be returned. Each data row can contain multiple data points. The max value is 1000. Reducing the size of the page will result in fewer API credits spent. Default: 10
     */
    pageSize: number;
    /**
     * The number of pages that should be fetched. All results will be obtained if left blank. Reducing the number of pages will result in fewer API credits spent. Default: 1
     */
    pagesToFetch: number;
    /**
     * The ID of a region to get data from in the form of a two-letter country code prepended with the g_ prefix. See the list of supported region IDs here: https://serpstat.com/api/664-request-parameters-v4/. Default: "g_us"
     */
    regionId: string;
    /**
     * The field name by which the results should be sorted. Each stream has different sorting options. See https://serpstat.com/api/ for more details.
     */
    sortBy?: string;
    /**
     * The value of the field to sort by. Each stream has different sorting options. See https://serpstat.com/api/ for more details.
     */
    sortValue?: string;
}

export interface SourceSerpstatResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceSerpstatResourceAllocationDefault;
    jobSpecifics: outputs.SourceSerpstatResourceAllocationJobSpecific[];
}

export interface SourceSerpstatResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSerpstatResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceSerpstatResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceSerpstatResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceServiceNowConfiguration {
    baseUrl: string;
    password?: string;
    username: string;
}

export interface SourceServiceNowResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceServiceNowResourceAllocationDefault;
    jobSpecifics: outputs.SourceServiceNowResourceAllocationJobSpecific[];
}

export interface SourceServiceNowResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceServiceNowResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceServiceNowResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceServiceNowResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSftpBulkConfiguration {
    /**
     * Credentials for connecting to the SFTP Server
     */
    credentials: outputs.SourceSftpBulkConfigurationCredentials;
    deliveryMethod?: outputs.SourceSftpBulkConfigurationDeliveryMethod;
    /**
     * The directory to search files for sync. Default: "/"
     */
    folderPath: string;
    /**
     * The server host address
     */
    host: string;
    /**
     * The server port. Default: 22
     */
    port: number;
    /**
     * UTC date and time in the format 2017-01-25T00:00:00.000000Z. Any file modified before this date will not be replicated.
     */
    startDate?: string;
    /**
     * Each instance of this configuration defines a <a href="https://docs.airbyte.com/cloud/core-concepts#stream">stream</a>. Use this to define which files belong in the stream, their format, and how they should be parsed and validated. When sending data to warehouse destination such as Snowflake or BigQuery, each stream is a separate table.
     */
    streams: outputs.SourceSftpBulkConfigurationStream[];
    /**
     * The server user
     */
    username: string;
}

export interface SourceSftpBulkConfigurationCredentials {
    authenticateViaPassword?: outputs.SourceSftpBulkConfigurationCredentialsAuthenticateViaPassword;
    authenticateViaPrivateKey?: outputs.SourceSftpBulkConfigurationCredentialsAuthenticateViaPrivateKey;
}

export interface SourceSftpBulkConfigurationCredentialsAuthenticateViaPassword {
    /**
     * Password
     */
    password: string;
}

export interface SourceSftpBulkConfigurationCredentialsAuthenticateViaPrivateKey {
    /**
     * The Private key
     */
    privateKey: string;
}

export interface SourceSftpBulkConfigurationDeliveryMethod {
    /**
     * Copy raw files without parsing their contents. Bits are copied into the destination exactly as they appeared in the source. Recommended for use with unstructured text data, non-text and compressed files.
     */
    copyRawFiles?: outputs.SourceSftpBulkConfigurationDeliveryMethodCopyRawFiles;
    /**
     * Recommended - Extract and load structured records into your destination of choice. This is the classic method of moving data in Airbyte. It allows for blocking and hashing individual fields or files from a structured schema. Data can be flattened, typed and deduped depending on the destination.
     */
    replicateRecords?: outputs.SourceSftpBulkConfigurationDeliveryMethodReplicateRecords;
}

export interface SourceSftpBulkConfigurationDeliveryMethodCopyRawFiles {
    /**
     * If enabled, sends subdirectory folder structure along with source file names to the destination. Otherwise, files will be synced by their names only. This option is ignored when file-based replication is not enabled. Default: true
     */
    preserveDirectoryStructure: boolean;
}

export interface SourceSftpBulkConfigurationDeliveryMethodReplicateRecords {
}

export interface SourceSftpBulkConfigurationStream {
    /**
     * When the state history of the file store is full, syncs will only read files that were last modified in the provided day range. Default: 3
     */
    daysToSyncIfHistoryIsFull: number;
    /**
     * The configuration options that are used to alter how to read incoming files that deviate from the standard formatting.
     */
    format: outputs.SourceSftpBulkConfigurationStreamFormat;
    /**
     * The pattern used to specify which files should be selected from the file system. For more information on glob pattern matching look <a href="https://en.wikipedia.org/wiki/Glob_(programming)">here</a>.
     */
    globs?: string[];
    /**
     * The schema that will be used to validate records extracted from the file. This will override the stream schema that is auto-detected from incoming files.
     */
    inputSchema?: string;
    /**
     * The name of the stream.
     */
    name: string;
    /**
     * The number of resent files which will be used to discover the schema for this stream.
     */
    recentNFilesToReadForSchemaDiscovery?: number;
    /**
     * When enabled, syncs will not validate or structure records against the stream's schema. Default: false
     */
    schemaless: boolean;
    /**
     * The name of the validation policy that dictates sync behavior when a record does not adhere to the stream schema. Default: "Emit Record"; must be one of ["Emit Record", "Skip Record", "Wait for Discover"]
     */
    validationPolicy: string;
}

export interface SourceSftpBulkConfigurationStreamFormat {
    avroFormat?: outputs.SourceSftpBulkConfigurationStreamFormatAvroFormat;
    csvFormat?: outputs.SourceSftpBulkConfigurationStreamFormatCsvFormat;
    excelFormat?: outputs.SourceSftpBulkConfigurationStreamFormatExcelFormat;
    jsonlFormat?: outputs.SourceSftpBulkConfigurationStreamFormatJsonlFormat;
    parquetFormat?: outputs.SourceSftpBulkConfigurationStreamFormatParquetFormat;
    /**
     * Extract text from document formats (.pdf, .docx, .md, .pptx) and emit as one record per file.
     */
    unstructuredDocumentFormat?: outputs.SourceSftpBulkConfigurationStreamFormatUnstructuredDocumentFormat;
}

export interface SourceSftpBulkConfigurationStreamFormatAvroFormat {
    /**
     * Whether to convert double fields to strings. This is recommended if you have decimal numbers with a high degree of precision because there can be a loss precision when handling floating point numbers. Default: false
     */
    doubleAsString: boolean;
}

export interface SourceSftpBulkConfigurationStreamFormatCsvFormat {
    /**
     * The character delimiting individual cells in the CSV data. This may only be a 1-character string. For tab-delimited data enter '\t'. Default: ","
     */
    delimiter: string;
    /**
     * Whether two quotes in a quoted CSV value denote a single quote in the data. Default: true
     */
    doubleQuote: boolean;
    /**
     * The character encoding of the CSV data. Leave blank to default to <strong>UTF8</strong>. See <a href="https://docs.python.org/3/library/codecs.html#standard-encodings" target="_blank">list of python encodings</a> for allowable options. Default: "utf8"
     */
    encoding: string;
    /**
     * The character used for escaping special characters. To disallow escaping, leave this field blank.
     */
    escapeChar?: string;
    /**
     * A set of case-sensitive strings that should be interpreted as false values.
     */
    falseValues?: string[];
    /**
     * How headers will be defined. `User Provided` assumes the CSV does not have a header row and uses the headers provided and `Autogenerated` assumes the CSV does not have a header row and the CDK will generate headers using for `f{i}` where `i` is the index starting from 0. Else, the default behavior is to use the header from the CSV file. If a user wants to autogenerate or provide column names for a CSV having headers, they can skip rows.
     */
    headerDefinition?: outputs.SourceSftpBulkConfigurationStreamFormatCsvFormatHeaderDefinition;
    /**
     * Whether to ignore errors that occur when the number of fields in the CSV does not match the number of columns in the schema. Default: false
     */
    ignoreErrorsOnFieldsMismatch: boolean;
    /**
     * A set of case-sensitive strings that should be interpreted as null values. For example, if the value 'NA' should be interpreted as null, enter 'NA' in this field.
     */
    nullValues: string[];
    /**
     * The character used for quoting CSV values. To disallow quoting, make this field blank. Default: "\""
     */
    quoteChar: string;
    /**
     * The number of rows to skip after the header row. Default: 0
     */
    skipRowsAfterHeader: number;
    /**
     * The number of rows to skip before the header row. For example, if the header row is on the 3rd row, enter 2 in this field. Default: 0
     */
    skipRowsBeforeHeader: number;
    /**
     * Whether strings can be interpreted as null values. If true, strings that match the null_values set will be interpreted as null. If false, strings that match the null_values set will be interpreted as the string itself. Default: true
     */
    stringsCanBeNull: boolean;
    /**
     * A set of case-sensitive strings that should be interpreted as true values.
     */
    trueValues?: string[];
}

export interface SourceSftpBulkConfigurationStreamFormatCsvFormatHeaderDefinition {
    autogenerated?: outputs.SourceSftpBulkConfigurationStreamFormatCsvFormatHeaderDefinitionAutogenerated;
    fromCsv?: outputs.SourceSftpBulkConfigurationStreamFormatCsvFormatHeaderDefinitionFromCsv;
    userProvided?: outputs.SourceSftpBulkConfigurationStreamFormatCsvFormatHeaderDefinitionUserProvided;
}

export interface SourceSftpBulkConfigurationStreamFormatCsvFormatHeaderDefinitionAutogenerated {
}

export interface SourceSftpBulkConfigurationStreamFormatCsvFormatHeaderDefinitionFromCsv {
}

export interface SourceSftpBulkConfigurationStreamFormatCsvFormatHeaderDefinitionUserProvided {
    /**
     * The column names that will be used while emitting the CSV records
     */
    columnNames: string[];
}

export interface SourceSftpBulkConfigurationStreamFormatExcelFormat {
}

export interface SourceSftpBulkConfigurationStreamFormatJsonlFormat {
}

export interface SourceSftpBulkConfigurationStreamFormatParquetFormat {
    /**
     * Whether to convert decimal fields to floats. There is a loss of precision when converting decimals to floats, so this is not recommended. Default: false
     */
    decimalAsFloat: boolean;
}

export interface SourceSftpBulkConfigurationStreamFormatUnstructuredDocumentFormat {
    /**
     * Processing configuration
     */
    processing?: outputs.SourceSftpBulkConfigurationStreamFormatUnstructuredDocumentFormatProcessing;
    /**
     * If true, skip files that cannot be parsed and pass the error message along as the _ab_source_file_parse_error field. If false, fail the sync. Default: true
     */
    skipUnprocessableFiles: boolean;
    /**
     * The strategy used to parse documents. `fast` extracts text directly from the document which doesn't work for all files. `ocr_only` is more reliable, but slower. `hi_res` is the most reliable, but requires an API key and a hosted instance of unstructured and can't be used with local mode. See the unstructured.io documentation for more details: https://unstructured-io.github.io/unstructured/core/partition.html#partition-pdf. Default: "auto"; must be one of ["auto", "fast", "ocr_only", "hi_res"]
     */
    strategy: string;
}

export interface SourceSftpBulkConfigurationStreamFormatUnstructuredDocumentFormatProcessing {
    /**
     * Process files locally, supporting `fast` and `ocr` modes. This is the default option.
     */
    local?: outputs.SourceSftpBulkConfigurationStreamFormatUnstructuredDocumentFormatProcessingLocal;
    /**
     * Process files via an API, using the `hi_res` mode. This option is useful for increased performance and accuracy, but requires an API key and a hosted instance of unstructured.
     */
    viaApi?: outputs.SourceSftpBulkConfigurationStreamFormatUnstructuredDocumentFormatProcessingViaApi;
}

export interface SourceSftpBulkConfigurationStreamFormatUnstructuredDocumentFormatProcessingLocal {
}

export interface SourceSftpBulkConfigurationStreamFormatUnstructuredDocumentFormatProcessingViaApi {
    /**
     * The API key to use matching the environment. Default: ""
     */
    apiKey: string;
    /**
     * The URL of the unstructured API to use. Default: "https://api.unstructured.io"
     */
    apiUrl: string;
    /**
     * List of parameters send to the API
     */
    parameters?: outputs.SourceSftpBulkConfigurationStreamFormatUnstructuredDocumentFormatProcessingViaApiParameter[];
}

export interface SourceSftpBulkConfigurationStreamFormatUnstructuredDocumentFormatProcessingViaApiParameter {
    /**
     * The name of the unstructured API parameter to use
     */
    name: string;
    /**
     * The value of the parameter
     */
    value: string;
}

export interface SourceSftpBulkResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceSftpBulkResourceAllocationDefault;
    jobSpecifics: outputs.SourceSftpBulkResourceAllocationJobSpecific[];
}

export interface SourceSftpBulkResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSftpBulkResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceSftpBulkResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceSftpBulkResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSftpConfiguration {
    /**
     * The server authentication method
     */
    credentials?: outputs.SourceSftpConfigurationCredentials;
    /**
     * The regular expression to specify files for sync in a chosen Folder Path. Default: ""
     */
    filePattern: string;
    /**
     * Coma separated file types. Currently only 'csv' and 'json' types are supported. Default: "csv,json"
     */
    fileTypes: string;
    /**
     * The directory to search files for sync. Default: ""
     */
    folderPath: string;
    /**
     * The server host address
     */
    host: string;
    /**
     * The server port. Default: 22
     */
    port: number;
    /**
     * The server user
     */
    user: string;
}

export interface SourceSftpConfigurationCredentials {
    passwordAuthentication?: outputs.SourceSftpConfigurationCredentialsPasswordAuthentication;
    sshKeyAuthentication?: outputs.SourceSftpConfigurationCredentialsSshKeyAuthentication;
}

export interface SourceSftpConfigurationCredentialsPasswordAuthentication {
    /**
     * OS-level password for logging into the jump server host
     */
    authUserPassword: string;
}

export interface SourceSftpConfigurationCredentialsSshKeyAuthentication {
    /**
     * OS-level user account ssh key credentials in RSA PEM format ( created with ssh-keygen -t rsa -m PEM -f myuser_rsa )
     */
    authSshKey: string;
}

export interface SourceSftpResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceSftpResourceAllocationDefault;
    jobSpecifics: outputs.SourceSftpResourceAllocationJobSpecific[];
}

export interface SourceSftpResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSftpResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceSftpResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceSftpResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSharetribeConfiguration {
    clientId: string;
    clientSecret: string;
    /**
     * The current access token. This field might be overridden by the connector based on the token refresh endpoint response.
     */
    oauthAccessToken?: string;
    /**
     * The date the current access token expires in. This field might be overridden by the connector based on the token refresh endpoint response.
     */
    oauthTokenExpiryDate?: string;
    startDate: string;
}

export interface SourceSharetribeResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceSharetribeResourceAllocationDefault;
    jobSpecifics: outputs.SourceSharetribeResourceAllocationJobSpecific[];
}

export interface SourceSharetribeResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSharetribeResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceSharetribeResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceSharetribeResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceShippoConfiguration {
    /**
     * The bearer token used for making requests
     */
    shippoToken: string;
    startDate: string;
}

export interface SourceShippoResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceShippoResourceAllocationDefault;
    jobSpecifics: outputs.SourceShippoResourceAllocationJobSpecific[];
}

export interface SourceShippoResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceShippoResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceShippoResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceShippoResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceShipstationConfiguration {
    password?: string;
    startDate: string;
    username: string;
}

export interface SourceShipstationResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceShipstationResourceAllocationDefault;
    jobSpecifics: outputs.SourceShipstationResourceAllocationJobSpecific[];
}

export interface SourceShipstationResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceShipstationResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceShipstationResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceShipstationResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceShopifyConfiguration {
    /**
     * Defines what would be a date range per single BULK Job. Default: 30
     */
    bulkWindowInDays: number;
    /**
     * The authorization method to use to retrieve data from Shopify
     */
    credentials?: outputs.SourceShopifyConfigurationCredentials;
    /**
     * Defines which API type (REST/BULK) to use to fetch `Transactions` data. If you are a `Shopify Plus` user, leave the default value to speed up the fetch. Default: false
     */
    fetchTransactionsUserId: boolean;
    /**
     * The threshold, after which the single BULK Job should be checkpointed (min: 15k, max: 1M). Default: 100000
     */
    jobCheckpointInterval: number;
    /**
     * If enabled, the `Product Variants` stream attempts to include `Presentment prices` field (may affect the performance). Default: true
     */
    jobProductVariantsIncludePresPrices: boolean;
    /**
     * The max time in seconds, after which the single BULK Job should be `CANCELED` and retried. The bigger the value the longer the BULK Job is allowed to run. Default: 7200
     */
    jobTerminationThreshold: number;
    /**
     * The name of your Shopify store found in the URL. For example, if your URL was https://NAME.myshopify.com, then the name would be 'NAME' or 'NAME.myshopify.com'.
     */
    shop: string;
    /**
     * The date you would like to replicate data from. Format: YYYY-MM-DD. Any data before this date will not be replicated. Default: "2020-01-01"
     */
    startDate: string;
}

export interface SourceShopifyConfigurationCredentials {
    /**
     * API Password Auth
     */
    apiPassword?: outputs.SourceShopifyConfigurationCredentialsApiPassword;
    /**
     * OAuth2.0
     */
    oAuth20?: outputs.SourceShopifyConfigurationCredentialsOAuth20;
}

export interface SourceShopifyConfigurationCredentialsApiPassword {
    /**
     * The API Password for your private application in the `Shopify` store.
     */
    apiPassword: string;
}

export interface SourceShopifyConfigurationCredentialsOAuth20 {
    /**
     * The Access Token for making authenticated requests.
     */
    accessToken?: string;
    /**
     * The Client ID of the Shopify developer application.
     */
    clientId?: string;
    /**
     * The Client Secret of the Shopify developer application.
     */
    clientSecret?: string;
}

export interface SourceShopifyResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceShopifyResourceAllocationDefault;
    jobSpecifics: outputs.SourceShopifyResourceAllocationJobSpecific[];
}

export interface SourceShopifyResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceShopifyResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceShopifyResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceShopifyResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceShortcutConfiguration {
    apiKey2: string;
    /**
     * Query for searching as defined in `https://help.shortcut.com/hc/en-us/articles/360000046646-Searching-in-Shortcut-Using-Search-Operators`. Default: "title:Our first Epic"
     */
    query: string;
    startDate: string;
}

export interface SourceShortcutResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceShortcutResourceAllocationDefault;
    jobSpecifics: outputs.SourceShortcutResourceAllocationJobSpecific[];
}

export interface SourceShortcutResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceShortcutResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceShortcutResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceShortcutResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceShortioConfiguration {
    domainId: string;
    /**
     * Short.io Secret Key
     */
    secretKey: string;
    /**
     * UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated.
     */
    startDate: string;
}

export interface SourceShortioResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceShortioResourceAllocationDefault;
    jobSpecifics: outputs.SourceShortioResourceAllocationJobSpecific[];
}

export interface SourceShortioResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceShortioResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceShortioResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceShortioResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceShutterstockConfiguration {
    /**
     * Your OAuth 2.0 token for accessing the Shutterstock API. Obtain this token from your Shutterstock developer account.
     */
    apiToken: string;
    /**
     * The query for image search. Default: "mountain"
     */
    queryForAudioSearch: string;
    /**
     * The query for catalog search. Default: "mountain"
     */
    queryForCatalogSearch: string;
    /**
     * The query for image search. Default: "mountain"
     */
    queryForImageSearch: string;
    /**
     * The Query for `videos_search` stream. Default: "mountain"
     */
    queryForVideoSearch: string;
    startDate: string;
}

export interface SourceShutterstockResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceShutterstockResourceAllocationDefault;
    jobSpecifics: outputs.SourceShutterstockResourceAllocationJobSpecific[];
}

export interface SourceShutterstockResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceShutterstockResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceShutterstockResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceShutterstockResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSigmaComputingConfiguration {
    /**
     * The base url of your sigma organization
     */
    baseUrl: string;
    clientId: string;
    clientRefreshToken: string;
    clientSecret: string;
    /**
     * The current access token. This field might be overridden by the connector based on the token refresh endpoint response.
     */
    oauthAccessToken?: string;
    /**
     * The date the current access token expires in. This field might be overridden by the connector based on the token refresh endpoint response.
     */
    oauthTokenExpiryDate?: string;
}

export interface SourceSigmaComputingResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceSigmaComputingResourceAllocationDefault;
    jobSpecifics: outputs.SourceSigmaComputingResourceAllocationJobSpecific[];
}

export interface SourceSigmaComputingResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSigmaComputingResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceSigmaComputingResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceSigmaComputingResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSignnowConfiguration {
    /**
     * Api key which could be found in API section after enlarging keys section
     */
    apiKeyId: string;
    /**
     * The authorization token is needed for `signing_links` stream which could be seen from enlarged view of `https://app.signnow.com/webapp/api-dashboard/keys`
     */
    authToken: string;
    /**
     * Name filter for documents stream
     */
    nameFilterForDocuments?: string[];
    startDate: string;
}

export interface SourceSignnowResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceSignnowResourceAllocationDefault;
    jobSpecifics: outputs.SourceSignnowResourceAllocationJobSpecific[];
}

export interface SourceSignnowResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSignnowResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceSignnowResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceSignnowResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSimfinConfiguration {
    apiKey: string;
}

export interface SourceSimfinResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceSimfinResourceAllocationDefault;
    jobSpecifics: outputs.SourceSimfinResourceAllocationJobSpecific[];
}

export interface SourceSimfinResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSimfinResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceSimfinResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceSimfinResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSimplecastConfiguration {
    /**
     * API token to use. Find it at your Private Apps page on the Simplecast dashboard.
     */
    apiToken: string;
}

export interface SourceSimplecastResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceSimplecastResourceAllocationDefault;
    jobSpecifics: outputs.SourceSimplecastResourceAllocationJobSpecific[];
}

export interface SourceSimplecastResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSimplecastResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceSimplecastResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceSimplecastResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSimplesatConfiguration {
    apiKey: string;
    /**
     * Date till when the sync should end
     */
    endDate?: string;
    /**
     * Date from when the sync should start
     */
    startDate?: string;
}

export interface SourceSimplesatResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceSimplesatResourceAllocationDefault;
    jobSpecifics: outputs.SourceSimplesatResourceAllocationJobSpecific[];
}

export interface SourceSimplesatResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSimplesatResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceSimplesatResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceSimplesatResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSlackConfiguration {
    /**
     * A channel name list (without leading '#' char) which limit the channels from which you'd like to sync. Empty list means no filter.
     */
    channelFilters: string[];
    /**
     * Choose how to authenticate into Slack
     */
    credentials?: outputs.SourceSlackConfigurationCredentials;
    /**
     * Whether to read information from private channels that the bot is already in.  If false, only public channels will be read.  If true, the bot must be manually added to private channels. Default: false
     */
    includePrivateChannels: boolean;
    /**
     * Whether to join all channels or to sync data only from channels the bot is already in.  If false, you'll need to manually add the bot to all the channels from which you'd like to sync messages. Default: true
     */
    joinChannels: boolean;
    /**
     * How far into the past to look for messages in threads, default is 0 days. Default: 0
     */
    lookbackWindow: number;
    /**
     * UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated.
     */
    startDate: string;
}

export interface SourceSlackConfigurationCredentials {
    apiToken?: outputs.SourceSlackConfigurationCredentialsApiToken;
    signInViaSlackOAuth?: outputs.SourceSlackConfigurationCredentialsSignInViaSlackOAuth;
}

export interface SourceSlackConfigurationCredentialsApiToken {
    /**
     * A Slack bot token. See the <a href="https://docs.airbyte.com/integrations/sources/slack">docs</a> for instructions on how to generate it.
     */
    apiToken: string;
}

export interface SourceSlackConfigurationCredentialsSignInViaSlackOAuth {
    /**
     * Slack access_token. See our <a href="https://docs.airbyte.com/integrations/sources/slack">docs</a> if you need help generating the token.
     */
    accessToken: string;
    /**
     * Slack client_id. See our <a href="https://docs.airbyte.com/integrations/sources/slack">docs</a> if you need help finding this id.
     */
    clientId: string;
    /**
     * Slack client_secret. See our <a href="https://docs.airbyte.com/integrations/sources/slack">docs</a> if you need help finding this secret.
     */
    clientSecret: string;
}

export interface SourceSlackResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceSlackResourceAllocationDefault;
    jobSpecifics: outputs.SourceSlackResourceAllocationJobSpecific[];
}

export interface SourceSlackResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSlackResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceSlackResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceSlackResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSmailyConfiguration {
    /**
     * API user password. See https://smaily.com/help/api/general/create-api-user/
     */
    apiPassword: string;
    /**
     * API Subdomain. See https://smaily.com/help/api/general/create-api-user/
     */
    apiSubdomain: string;
    /**
     * API user username. See https://smaily.com/help/api/general/create-api-user/
     */
    apiUsername: string;
}

export interface SourceSmailyResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceSmailyResourceAllocationDefault;
    jobSpecifics: outputs.SourceSmailyResourceAllocationJobSpecific[];
}

export interface SourceSmailyResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSmailyResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceSmailyResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceSmailyResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSmartengageConfiguration {
    /**
     * API Key
     */
    apiKey: string;
}

export interface SourceSmartengageResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceSmartengageResourceAllocationDefault;
    jobSpecifics: outputs.SourceSmartengageResourceAllocationJobSpecific[];
}

export interface SourceSmartengageResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSmartengageResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceSmartengageResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceSmartengageResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSmartreachConfiguration {
    apiKey: string;
    teamid: number;
}

export interface SourceSmartreachResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceSmartreachResourceAllocationDefault;
    jobSpecifics: outputs.SourceSmartreachResourceAllocationJobSpecific[];
}

export interface SourceSmartreachResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSmartreachResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceSmartreachResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceSmartreachResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSmartsheetsConfiguration {
    credentials: outputs.SourceSmartsheetsConfigurationCredentials;
    /**
     * If true, the source will treat the provided sheet_id as a report. If false, the source will treat the provided sheet_id as a sheet. Default: false
     */
    isReport: boolean;
    /**
     * A List of available columns which metadata can be pulled from.
     */
    metadataFields?: string[];
    /**
     * The spreadsheet ID. Find it by opening the spreadsheet then navigating to File > Properties
     */
    spreadsheetId: string;
}

export interface SourceSmartsheetsConfigurationCredentials {
    apiAccessToken?: outputs.SourceSmartsheetsConfigurationCredentialsApiAccessToken;
    oAuth20?: outputs.SourceSmartsheetsConfigurationCredentialsOAuth20;
}

export interface SourceSmartsheetsConfigurationCredentialsApiAccessToken {
    /**
     * The access token to use for accessing your data from Smartsheets. This access token must be generated by a user with at least read access to the data you'd like to replicate. Generate an access token in the Smartsheets main menu by clicking Account > Apps & Integrations > API Access. See the <a href="https://docs.airbyte.com/integrations/sources/smartsheets/#setup-guide">setup guide</a> for information on how to obtain this token.
     */
    accessToken: string;
}

export interface SourceSmartsheetsConfigurationCredentialsOAuth20 {
    /**
     * Access Token for making authenticated requests.
     */
    accessToken: string;
    /**
     * The API ID of the SmartSheets developer application.
     */
    clientId: string;
    /**
     * The API Secret the SmartSheets developer application.
     */
    clientSecret: string;
    /**
     * The key to refresh the expired access_token.
     */
    refreshToken: string;
    /**
     * The date-time when the access token should be refreshed.
     */
    tokenExpiryDate: string;
}

export interface SourceSmartsheetsResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceSmartsheetsResourceAllocationDefault;
    jobSpecifics: outputs.SourceSmartsheetsResourceAllocationJobSpecific[];
}

export interface SourceSmartsheetsResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSmartsheetsResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceSmartsheetsResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceSmartsheetsResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSmartwaiverConfiguration {
    /**
     * You can retrieve your token by visiting your dashboard then click on My Account then click on API keys.
     */
    apiKey: string;
    /**
     * Default: "2017-01-24 13:12:29"
     */
    startDate: string;
    startDate2: string;
}

export interface SourceSmartwaiverResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceSmartwaiverResourceAllocationDefault;
    jobSpecifics: outputs.SourceSmartwaiverResourceAllocationJobSpecific[];
}

export interface SourceSmartwaiverResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSmartwaiverResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceSmartwaiverResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceSmartwaiverResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSnapchatMarketingConfiguration {
    /**
     * Specifies the principle for conversion reporting. Default: "conversion"; must be one of ["conversion", "impression"]
     */
    actionReportTime: string;
    /**
     * Ad Account IDs of the ad accounts to retrieve
     */
    adAccountIds?: string[];
    /**
     * The Client ID of your Snapchat developer application.
     */
    clientId: string;
    /**
     * The Client Secret of your Snapchat developer application.
     */
    clientSecret: string;
    /**
     * Date in the format 2017-01-25. Any data after this date will not be replicated.
     */
    endDate?: string;
    /**
     * The IDs of the organizations to retrieve
     */
    organizationIds?: string[];
    /**
     * Refresh Token to renew the expired Access Token.
     */
    refreshToken: string;
    /**
     * Date in the format 2022-01-01. Any data before this date will not be replicated. Default: "2022-01-01"
     */
    startDate: string;
    /**
     * Attribution window for swipe ups. Default: "28_DAY"; must be one of ["1_DAY", "7_DAY", "28_DAY"]
     */
    swipeUpAttributionWindow: string;
    /**
     * Attribution window for views. Default: "1_DAY"; must be one of ["1_HOUR", "3_HOUR", "6_HOUR", "1_DAY", "7_DAY"]
     */
    viewAttributionWindow: string;
}

export interface SourceSnapchatMarketingResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceSnapchatMarketingResourceAllocationDefault;
    jobSpecifics: outputs.SourceSnapchatMarketingResourceAllocationJobSpecific[];
}

export interface SourceSnapchatMarketingResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSnapchatMarketingResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceSnapchatMarketingResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceSnapchatMarketingResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSnowflakeConfiguration {
    credentials?: outputs.SourceSnowflakeConfigurationCredentials;
    /**
     * The database you created for Airbyte to access data.
     */
    database: string;
    /**
     * The host domain of the snowflake instance (must include the account, region, cloud environment, and end with snowflakecomputing.com).
     */
    host: string;
    /**
     * Additional properties to pass to the JDBC URL string when connecting to the database formatted as 'key=value' pairs separated by the symbol '&'. (example: key1=value1&key2=value2&key3=value3).
     */
    jdbcUrlParams?: string;
    /**
     * The role you created for Airbyte to access Snowflake.
     */
    role: string;
    /**
     * The source Snowflake schema tables. Leave empty to access tables from multiple schemas.
     */
    schema?: string;
    /**
     * The warehouse you created for Airbyte to access data.
     */
    warehouse: string;
}

export interface SourceSnowflakeConfigurationCredentials {
    keyPairAuthentication?: outputs.SourceSnowflakeConfigurationCredentialsKeyPairAuthentication;
    oAuth20?: outputs.SourceSnowflakeConfigurationCredentialsOAuth20;
    usernameAndPassword?: outputs.SourceSnowflakeConfigurationCredentialsUsernameAndPassword;
}

export interface SourceSnowflakeConfigurationCredentialsKeyPairAuthentication {
    /**
     * RSA Private key to use for Snowflake connection. See the <a href="https://docs.airbyte.com/integrations/sources/snowflake#key-pair-authentication">docs</a> for more information on how to obtain this key.
     */
    privateKey: string;
    /**
     * Passphrase for private key
     */
    privateKeyPassword?: string;
    /**
     * The username you created to allow Airbyte to access the database.
     */
    username: string;
}

export interface SourceSnowflakeConfigurationCredentialsOAuth20 {
    /**
     * Access Token for making authenticated requests.
     */
    accessToken?: string;
    /**
     * The Client ID of your Snowflake developer application.
     */
    clientId: string;
    /**
     * The Client Secret of your Snowflake developer application.
     */
    clientSecret: string;
    /**
     * Refresh Token for making authenticated requests.
     */
    refreshToken?: string;
}

export interface SourceSnowflakeConfigurationCredentialsUsernameAndPassword {
    /**
     * The password associated with the username.
     */
    password: string;
    /**
     * The username you created to allow Airbyte to access the database.
     */
    username: string;
}

export interface SourceSnowflakeResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceSnowflakeResourceAllocationDefault;
    jobSpecifics: outputs.SourceSnowflakeResourceAllocationJobSpecific[];
}

export interface SourceSnowflakeResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSnowflakeResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceSnowflakeResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceSnowflakeResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSolarwindsServiceDeskConfiguration {
    /**
     * Refer to `https://documentation.solarwinds.com/en/success_center/swsd/content/completeguidetoswsd/token-authentication-for-api-integration.htm#link4`
     */
    apiKey2: string;
    startDate: string;
}

export interface SourceSolarwindsServiceDeskResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceSolarwindsServiceDeskResourceAllocationDefault;
    jobSpecifics: outputs.SourceSolarwindsServiceDeskResourceAllocationJobSpecific[];
}

export interface SourceSolarwindsServiceDeskResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSolarwindsServiceDeskResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceSolarwindsServiceDeskResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceSolarwindsServiceDeskResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSonarCloudConfiguration {
    /**
     * Comma-separated list of component keys.
     */
    componentKeys: string[];
    /**
     * To retrieve issues created before the given date (inclusive).
     */
    endDate?: string;
    /**
     * Organization key. See <a href="https://docs.sonarcloud.io/appendices/project-information/#project-and-organization-keys">here</a>.
     */
    organization: string;
    /**
     * To retrieve issues created after the given date (inclusive).
     */
    startDate?: string;
    /**
     * Your User Token. See <a href="https://docs.sonarcloud.io/advanced-setup/user-accounts/">here</a>. The token is case sensitive.
     */
    userToken: string;
}

export interface SourceSonarCloudResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceSonarCloudResourceAllocationDefault;
    jobSpecifics: outputs.SourceSonarCloudResourceAllocationJobSpecific[];
}

export interface SourceSonarCloudResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSonarCloudResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceSonarCloudResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceSonarCloudResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSpacexApiConfiguration {
    id?: string;
    options?: string;
}

export interface SourceSpacexApiResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceSpacexApiResourceAllocationDefault;
    jobSpecifics: outputs.SourceSpacexApiResourceAllocationJobSpecific[];
}

export interface SourceSpacexApiResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSpacexApiResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceSpacexApiResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceSpacexApiResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSparkpostConfiguration {
    apiKey: string;
    /**
     * Default: "api"; must be one of ["api", "api.eu"]
     */
    apiPrefix: string;
    startDate: string;
}

export interface SourceSparkpostResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceSparkpostResourceAllocationDefault;
    jobSpecifics: outputs.SourceSparkpostResourceAllocationJobSpecific[];
}

export interface SourceSparkpostResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSparkpostResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceSparkpostResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceSparkpostResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSplitIoConfiguration {
    apiKey: string;
    startDate: string;
}

export interface SourceSplitIoResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceSplitIoResourceAllocationDefault;
    jobSpecifics: outputs.SourceSplitIoResourceAllocationJobSpecific[];
}

export interface SourceSplitIoResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSplitIoResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceSplitIoResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceSplitIoResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSpotlercrmConfiguration {
    /**
     * Access Token to authenticate API requests. Generate it by logging into your CRM system, navigating to Settings / Integrations / API V4, and clicking 'generate new key'.
     */
    accessToken: string;
}

export interface SourceSpotlercrmResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceSpotlercrmResourceAllocationDefault;
    jobSpecifics: outputs.SourceSpotlercrmResourceAllocationJobSpecific[];
}

export interface SourceSpotlercrmResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSpotlercrmResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceSpotlercrmResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceSpotlercrmResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSquareConfiguration {
    /**
     * Choose how to authenticate to Square.
     */
    credentials?: outputs.SourceSquareConfigurationCredentials;
    /**
     * In some streams there is an option to include deleted objects (Items, Categories, Discounts, Taxes). Default: false
     */
    includeDeletedObjects: boolean;
    /**
     * Determines whether to use the sandbox or production environment. Default: false
     */
    isSandbox: boolean;
    /**
     * UTC date in the format YYYY-MM-DD. Any data before this date will not be replicated. If not set, all data will be replicated. Default: "2021-01-01"
     */
    startDate: string;
}

export interface SourceSquareConfigurationCredentials {
    apiKey?: outputs.SourceSquareConfigurationCredentialsApiKey;
    oauthAuthentication?: outputs.SourceSquareConfigurationCredentialsOauthAuthentication;
}

export interface SourceSquareConfigurationCredentialsApiKey {
    /**
     * The API key for a Square application
     */
    apiKey: string;
}

export interface SourceSquareConfigurationCredentialsOauthAuthentication {
    /**
     * The Square-issued ID of your application
     */
    clientId: string;
    /**
     * The Square-issued application secret for your application
     */
    clientSecret: string;
    /**
     * A refresh token generated using the above client ID and secret
     */
    refreshToken: string;
}

export interface SourceSquareResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceSquareResourceAllocationDefault;
    jobSpecifics: outputs.SourceSquareResourceAllocationJobSpecific[];
}

export interface SourceSquareResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSquareResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceSquareResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceSquareResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSquarespaceConfiguration {
    /**
     * API key to use. Find it at https://developers.squarespace.com/commerce-apis/authentication-and-permissions
     */
    apiKey: string;
    /**
     * Any data before this date will not be replicated.
     */
    startDate: string;
}

export interface SourceSquarespaceResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceSquarespaceResourceAllocationDefault;
    jobSpecifics: outputs.SourceSquarespaceResourceAllocationJobSpecific[];
}

export interface SourceSquarespaceResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSquarespaceResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceSquarespaceResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceSquarespaceResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceStatsigConfiguration {
    apiKey: string;
    endDate: string;
    startDate: string;
}

export interface SourceStatsigResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceStatsigResourceAllocationDefault;
    jobSpecifics: outputs.SourceStatsigResourceAllocationJobSpecific[];
}

export interface SourceStatsigResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceStatsigResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceStatsigResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceStatsigResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceStatuspageConfiguration {
    /**
     * Your API Key. See <a href="https://developer.statuspage.io/#section/Authentication/api_key">here</a>.
     */
    apiKey: string;
}

export interface SourceStatuspageResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceStatuspageResourceAllocationDefault;
    jobSpecifics: outputs.SourceStatuspageResourceAllocationJobSpecific[];
}

export interface SourceStatuspageResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceStatuspageResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceStatuspageResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceStatuspageResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceStockdataConfiguration {
    apiKey: string;
    /**
     * Default: false
     */
    filterEntities: boolean;
    /**
     * Specify the industries of entities which have been identified within the article.
     */
    industries?: string[];
    startDate: string;
    symbols?: string[];
}

export interface SourceStockdataResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceStockdataResourceAllocationDefault;
    jobSpecifics: outputs.SourceStockdataResourceAllocationJobSpecific[];
}

export interface SourceStockdataResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceStockdataResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceStockdataResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceStockdataResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceStravaConfiguration {
    /**
     * The Athlete ID of your Strava developer application.
     */
    athleteId: number;
    /**
     * The Client ID of your Strava developer application.
     */
    clientId: string;
    /**
     * The Client Secret of your Strava developer application.
     */
    clientSecret: string;
    /**
     * The Refresh Token with the activity: read_all permissions.
     */
    refreshToken: string;
    /**
     * UTC date and time. Any data before this date will not be replicated.
     */
    startDate: string;
}

export interface SourceStravaResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceStravaResourceAllocationDefault;
    jobSpecifics: outputs.SourceStravaResourceAllocationJobSpecific[];
}

export interface SourceStravaResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceStravaResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceStravaResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceStravaResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceStripeConfiguration {
    /**
     * Your Stripe account ID (starts with 'acct_', find yours <a href="https://dashboard.stripe.com/settings/account">here</a>).
     */
    accountId: string;
    /**
     * The number of API calls per second that you allow connector to make. This value can not be bigger than real API call rate limit (https://stripe.com/docs/rate-limits). If not specified the default maximum is 25 and 100 calls per second for test and production tokens respectively.
     */
    callRateLimit?: number;
    /**
     * Stripe API key (usually starts with 'sk_live_'; find yours <a href="https://dashboard.stripe.com/apikeys">here</a>).
     */
    clientSecret: string;
    /**
     * When set, the connector will always re-export data from the past N days, where N is the value set here. This is useful if your data is frequently updated after creation. The Lookback Window only applies to streams that do not support event-based incremental syncs: Events, SetupAttempts, ShippingRates, BalanceTransactions, Files, FileLinks, Refunds. More info <a href="https://docs.airbyte.com/integrations/sources/stripe#requirements">here</a>. Default: 0
     */
    lookbackWindowDays: number;
    /**
     * The number of worker thread to use for the sync. The performance upper boundary depends on call_rate_limit setting and type of account. Default: 10
     */
    numWorkers: number;
    /**
     * The time increment used by the connector when requesting data from the Stripe API. The bigger the value is, the less requests will be made and faster the sync will be. On the other hand, the more seldom the state is persisted. Default: 365
     */
    sliceRange: number;
    /**
     * UTC date and time in the format 2017-01-25T00:00:00Z. Only data generated after this date will be replicated. Default: "2017-01-25T00:00:00Z"
     */
    startDate: string;
}

export interface SourceStripeResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceStripeResourceAllocationDefault;
    jobSpecifics: outputs.SourceStripeResourceAllocationJobSpecific[];
}

export interface SourceStripeResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceStripeResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceStripeResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceStripeResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSurveySparrowConfiguration {
    /**
     * Your access token. See <a href="https://developers.surveysparrow.com/rest-apis#authentication">here</a>. The key is case sensitive.
     */
    accessToken: string;
    /**
     * Is your account location is EU based? If yes, the base url to retrieve data will be different.
     */
    region?: outputs.SourceSurveySparrowConfigurationRegion;
    /**
     * A List of your survey ids for survey-specific stream
     */
    surveyIds?: string[];
}

export interface SourceSurveySparrowConfigurationRegion {
    euBasedAccount?: outputs.SourceSurveySparrowConfigurationRegionEuBasedAccount;
    globalAccount?: outputs.SourceSurveySparrowConfigurationRegionGlobalAccount;
}

export interface SourceSurveySparrowConfigurationRegionEuBasedAccount {
}

export interface SourceSurveySparrowConfigurationRegionGlobalAccount {
}

export interface SourceSurveySparrowResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceSurveySparrowResourceAllocationDefault;
    jobSpecifics: outputs.SourceSurveySparrowResourceAllocationJobSpecific[];
}

export interface SourceSurveySparrowResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSurveySparrowResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceSurveySparrowResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceSurveySparrowResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSurveymonkeyConfiguration {
    /**
     * The authorization method to use to retrieve data from SurveyMonkey
     */
    credentials: outputs.SourceSurveymonkeyConfigurationCredentials;
    /**
     * Depending on the originating datacenter of the SurveyMonkey account, the API access URL may be different. Default: "USA"; must be one of ["USA", "Europe", "Canada"]
     */
    origin: string;
    /**
     * UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated.
     */
    startDate: string;
    /**
     * IDs of the surveys from which you'd like to replicate data. If left empty, data from all boards to which you have access will be replicated.
     */
    surveyIds?: string[];
}

export interface SourceSurveymonkeyConfigurationCredentials {
    /**
     * Access Token for making authenticated requests. See the <a href="https://docs.airbyte.io/integrations/sources/surveymonkey">docs</a> for information on how to generate this key.
     */
    accessToken: string;
    /**
     * The Client ID of the SurveyMonkey developer application.
     */
    clientId?: string;
    /**
     * The Client Secret of the SurveyMonkey developer application.
     */
    clientSecret?: string;
}

export interface SourceSurveymonkeyResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceSurveymonkeyResourceAllocationDefault;
    jobSpecifics: outputs.SourceSurveymonkeyResourceAllocationJobSpecific[];
}

export interface SourceSurveymonkeyResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSurveymonkeyResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceSurveymonkeyResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceSurveymonkeyResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSurvicateConfiguration {
    apiKey: string;
    startDate: string;
}

export interface SourceSurvicateResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceSurvicateResourceAllocationDefault;
    jobSpecifics: outputs.SourceSurvicateResourceAllocationJobSpecific[];
}

export interface SourceSurvicateResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSurvicateResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceSurvicateResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceSurvicateResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSystemeConfiguration {
    apiKey: string;
}

export interface SourceSystemeResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceSystemeResourceAllocationDefault;
    jobSpecifics: outputs.SourceSystemeResourceAllocationJobSpecific[];
}

export interface SourceSystemeResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceSystemeResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceSystemeResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceSystemeResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceTaboolaConfiguration {
    /**
     * The ID associated with your taboola account
     */
    accountId: string;
    clientId: string;
    clientSecret: string;
}

export interface SourceTaboolaResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceTaboolaResourceAllocationDefault;
    jobSpecifics: outputs.SourceTaboolaResourceAllocationJobSpecific[];
}

export interface SourceTaboolaResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceTaboolaResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceTaboolaResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceTaboolaResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceTeamtailorConfiguration {
    api: string;
    /**
     * The version of the API
     */
    xApiVersion: string;
}

export interface SourceTeamtailorResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceTeamtailorResourceAllocationDefault;
    jobSpecifics: outputs.SourceTeamtailorResourceAllocationJobSpecific[];
}

export interface SourceTeamtailorResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceTeamtailorResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceTeamtailorResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceTeamtailorResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceTeamworkConfiguration {
    password?: string;
    /**
     * The teamwork site name appearing at the url
     */
    siteName: string;
    startDate: string;
    username: string;
}

export interface SourceTeamworkResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceTeamworkResourceAllocationDefault;
    jobSpecifics: outputs.SourceTeamworkResourceAllocationJobSpecific[];
}

export interface SourceTeamworkResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceTeamworkResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceTeamworkResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceTeamworkResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceTempoConfiguration {
    /**
     * Tempo API Token. Go to Tempo>Settings, scroll down to Data Access and select API integration.
     */
    apiToken: string;
}

export interface SourceTempoResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceTempoResourceAllocationDefault;
    jobSpecifics: outputs.SourceTempoResourceAllocationJobSpecific[];
}

export interface SourceTempoResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceTempoResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceTempoResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceTempoResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceTestrailConfiguration {
    /**
     * The unique domain name for accessing testrail
     */
    domainName: string;
    password?: string;
    startDate: string;
    username: string;
}

export interface SourceTestrailResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceTestrailResourceAllocationDefault;
    jobSpecifics: outputs.SourceTestrailResourceAllocationJobSpecific[];
}

export interface SourceTestrailResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceTestrailResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceTestrailResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceTestrailResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceTheGuardianApiConfiguration {
    /**
     * Your API Key. See <a href="https://open-platform.theguardian.com/access/">here</a>. The key is case sensitive.
     */
    apiKey: string;
    /**
     * (Optional) Use this to set the maximum date (YYYY-MM-DD) of the results. Results newer than the end_date will not be shown. Default is set to the current date (today) for incremental syncs.
     */
    endDate?: string;
    /**
     * (Optional) The query (q) parameter filters the results to only those that include that search term. The q parameter supports AND, OR and NOT operators.
     */
    query?: string;
    /**
     * (Optional) Use this to filter the results by a particular section. See <a href="https://content.guardianapis.com/sections?api-key=test">here</a> for a list of all sections, and <a href="https://open-platform.theguardian.com/documentation/section">here</a> for the sections endpoint documentation.
     */
    section?: string;
    /**
     * Use this to set the minimum date (YYYY-MM-DD) of the results. Results older than the start_date will not be shown.
     */
    startDate: string;
    /**
     * (Optional) A tag is a piece of data that is used by The Guardian to categorise content. Use this parameter to filter results by showing only the ones matching the entered tag. See <a href="https://content.guardianapis.com/tags?api-key=test">here</a> for a list of all tags, and <a href="https://open-platform.theguardian.com/documentation/tag">here</a> for the tags endpoint documentation.
     */
    tag?: string;
}

export interface SourceTheGuardianApiResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceTheGuardianApiResourceAllocationDefault;
    jobSpecifics: outputs.SourceTheGuardianApiResourceAllocationJobSpecific[];
}

export interface SourceTheGuardianApiResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceTheGuardianApiResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceTheGuardianApiResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceTheGuardianApiResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceThinkificConfiguration {
    /**
     * Your Thinkific API key for authentication.
     */
    apiKey: string;
    /**
     * The subdomain of your Thinkific URL (e.g., if your URL is example.thinkific.com, your subdomain is "example".
     */
    subdomain: string;
}

export interface SourceThinkificCoursesConfiguration {
    apiKey: string;
    xAuthSubdomain: string;
}

export interface SourceThinkificCoursesResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceThinkificCoursesResourceAllocationDefault;
    jobSpecifics: outputs.SourceThinkificCoursesResourceAllocationJobSpecific[];
}

export interface SourceThinkificCoursesResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceThinkificCoursesResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceThinkificCoursesResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceThinkificCoursesResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceThinkificResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceThinkificResourceAllocationDefault;
    jobSpecifics: outputs.SourceThinkificResourceAllocationJobSpecific[];
}

export interface SourceThinkificResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceThinkificResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceThinkificResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceThinkificResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceTicketmasterConfiguration {
    apiKey: string;
}

export interface SourceTicketmasterResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceTicketmasterResourceAllocationDefault;
    jobSpecifics: outputs.SourceTicketmasterResourceAllocationJobSpecific[];
}

export interface SourceTicketmasterResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceTicketmasterResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceTicketmasterResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceTicketmasterResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceTickettailorConfiguration {
    /**
     * API key to use. Find it at https://www.getdrip.com/user/edit
     */
    apiKey: string;
}

export interface SourceTickettailorResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceTickettailorResourceAllocationDefault;
    jobSpecifics: outputs.SourceTickettailorResourceAllocationJobSpecific[];
}

export interface SourceTickettailorResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceTickettailorResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceTickettailorResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceTickettailorResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceTiktokMarketingConfiguration {
    /**
     * The attribution window in days. Default: 3
     */
    attributionWindow: number;
    /**
     * Authentication method
     */
    credentials?: outputs.SourceTiktokMarketingConfigurationCredentials;
    /**
     * The date until which you'd like to replicate data for all incremental streams, in the format YYYY-MM-DD. All data generated between start_date and this date will be replicated. Not setting this option will result in always syncing the data till the current date.
     */
    endDate?: string;
    /**
     * Set to active if you want to include deleted data in report based streams and Ads, Ad Groups and Campaign streams. Default: false
     */
    includeDeleted: boolean;
    /**
     * The Start Date in format: YYYY-MM-DD. Any data before this date will not be replicated. If this parameter is not set, all data will be replicated. Default: "2016-09-01"
     */
    startDate: string;
}

export interface SourceTiktokMarketingConfigurationCredentials {
    oAuth20?: outputs.SourceTiktokMarketingConfigurationCredentialsOAuth20;
    sandboxAccessToken?: outputs.SourceTiktokMarketingConfigurationCredentialsSandboxAccessToken;
}

export interface SourceTiktokMarketingConfigurationCredentialsOAuth20 {
    /**
     * Long-term Authorized Access Token.
     */
    accessToken: string;
    /**
     * The Advertiser ID to filter reports and streams. Let this empty to retrieve all.
     */
    advertiserId?: string;
    /**
     * The Developer Application App ID.
     */
    appId: string;
    /**
     * The Developer Application Secret.
     */
    secret: string;
}

export interface SourceTiktokMarketingConfigurationCredentialsSandboxAccessToken {
    /**
     * The long-term authorized access token.
     */
    accessToken: string;
    /**
     * The Advertiser ID which generated for the developer's Sandbox application.
     */
    advertiserId: string;
}

export interface SourceTiktokMarketingResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceTiktokMarketingResourceAllocationDefault;
    jobSpecifics: outputs.SourceTiktokMarketingResourceAllocationJobSpecific[];
}

export interface SourceTiktokMarketingResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceTiktokMarketingResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceTiktokMarketingResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceTiktokMarketingResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceTimelyConfiguration {
    /**
     * The Account ID for your Timely account
     */
    accountId: string;
    /**
     * The Bearer Token for your Timely account
     */
    bearerToken: string;
    /**
     * Earliest date from which you want to pull data from.
     */
    startDate: string;
}

export interface SourceTimelyResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceTimelyResourceAllocationDefault;
    jobSpecifics: outputs.SourceTimelyResourceAllocationJobSpecific[];
}

export interface SourceTimelyResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceTimelyResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceTimelyResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceTimelyResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceTinyemailConfiguration {
    apiKey: string;
}

export interface SourceTinyemailResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceTinyemailResourceAllocationDefault;
    jobSpecifics: outputs.SourceTinyemailResourceAllocationJobSpecific[];
}

export interface SourceTinyemailResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceTinyemailResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceTinyemailResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceTinyemailResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceTmdbConfiguration {
    /**
     * API Key from tmdb account
     */
    apiKey: string;
    /**
     * Language expressed in ISO 639-1 scheme, Mandate for required streams (Example en-US)
     */
    language: string;
    /**
     * Target movie ID, Mandate for movie streams (Example is 550)
     */
    movieId: string;
    /**
     * Target movie ID, Mandate for search streams
     */
    query: string;
}

export interface SourceTmdbResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceTmdbResourceAllocationDefault;
    jobSpecifics: outputs.SourceTmdbResourceAllocationJobSpecific[];
}

export interface SourceTmdbResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceTmdbResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceTmdbResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceTmdbResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceTodoistConfiguration {
    /**
     * API authorization bearer token for authenticating the API
     */
    token: string;
}

export interface SourceTodoistResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceTodoistResourceAllocationDefault;
    jobSpecifics: outputs.SourceTodoistResourceAllocationJobSpecific[];
}

export interface SourceTodoistResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceTodoistResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceTodoistResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceTodoistResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceTogglConfiguration {
    /**
     * Your API Token. See <a href="https://developers.track.toggl.com/docs/authentication">here</a>. The token is case sensitive.
     */
    apiToken: string;
    /**
     * To retrieve time entries created before the given date (inclusive).
     */
    endDate: string;
    /**
     * Your organization id. See <a href="https://developers.track.toggl.com/docs/organization">here</a>.
     */
    organizationId: number;
    /**
     * To retrieve time entries created after the given date (inclusive).
     */
    startDate: string;
    /**
     * Your workspace id. See <a href="https://developers.track.toggl.com/docs/workspaces">here</a>.
     */
    workspaceId: number;
}

export interface SourceTogglResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceTogglResourceAllocationDefault;
    jobSpecifics: outputs.SourceTogglResourceAllocationJobSpecific[];
}

export interface SourceTogglResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceTogglResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceTogglResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceTogglResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceTrackPmsConfiguration {
    apiKey: string;
    apiSecret?: string;
    customerDomain: string;
}

export interface SourceTrackPmsResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceTrackPmsResourceAllocationDefault;
    jobSpecifics: outputs.SourceTrackPmsResourceAllocationJobSpecific[];
}

export interface SourceTrackPmsResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceTrackPmsResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceTrackPmsResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceTrackPmsResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceTrelloConfiguration {
    /**
     * IDs of the boards to replicate data from. If left empty, data from all boards to which you have access will be replicated. Please note that this is not the 8-character ID in the board's shortLink (URL of the board). Rather, what is required here is the 24-character ID usually returned by the API
     */
    boardIds?: string[];
    /**
     * Trello API key. See the <a href="https://developer.atlassian.com/cloud/trello/guides/rest-api/authorization/#using-basic-oauth">docs</a> for instructions on how to generate it.
     */
    key: string;
    /**
     * UTC date and time in the format 2017-01-25T00:00:00Z. Any data before this date will not be replicated.
     */
    startDate: string;
    /**
     * Trello API token. See the <a href="https://developer.atlassian.com/cloud/trello/guides/rest-api/authorization/#using-basic-oauth">docs</a> for instructions on how to generate it.
     */
    token: string;
}

export interface SourceTrelloResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceTrelloResourceAllocationDefault;
    jobSpecifics: outputs.SourceTrelloResourceAllocationJobSpecific[];
}

export interface SourceTrelloResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceTrelloResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceTrelloResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceTrelloResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceTremendousConfiguration {
    /**
     * API key to use. You can generate an API key through the Tremendous dashboard under Team Settings > Developers. Save the key once you’ve generated it.
     */
    apiKey: string;
    /**
     * must be one of ["api", "testflight"]
     */
    environment: string;
}

export interface SourceTremendousResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceTremendousResourceAllocationDefault;
    jobSpecifics: outputs.SourceTremendousResourceAllocationJobSpecific[];
}

export interface SourceTremendousResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceTremendousResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceTremendousResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceTremendousResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceTrustpilotConfiguration {
    /**
     * The names of business units which shall be synchronized. Some streams e.g. configured_business_units or private_reviews use this configuration.
     */
    businessUnits: string[];
    credentials: outputs.SourceTrustpilotConfigurationCredentials;
    /**
     * For streams with sync. method incremental the start date time to be used
     */
    startDate: string;
}

export interface SourceTrustpilotConfigurationCredentials {
    /**
     * The API key authentication method gives you access to only the streams which are part of the Public API. When you want to get streams available via the Consumer API (e.g. the private reviews) you need to use authentication method OAuth 2.0.
     */
    apiKey?: outputs.SourceTrustpilotConfigurationCredentialsApiKey;
    oAuth20?: outputs.SourceTrustpilotConfigurationCredentialsOAuth20;
}

export interface SourceTrustpilotConfigurationCredentialsApiKey {
    /**
     * The API key of the Trustpilot API application.
     */
    clientId: string;
}

export interface SourceTrustpilotConfigurationCredentialsOAuth20 {
    /**
     * Access Token for making authenticated requests.
     */
    accessToken: string;
    /**
     * The API key of the Trustpilot API application. (represents the OAuth Client ID)
     */
    clientId: string;
    /**
     * The Secret of the Trustpilot API application. (represents the OAuth Client Secret)
     */
    clientSecret: string;
    /**
     * The key to refresh the expired access_token.
     */
    refreshToken: string;
    /**
     * The date-time when the access token should be refreshed.
     */
    tokenExpiryDate: string;
}

export interface SourceTrustpilotResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceTrustpilotResourceAllocationDefault;
    jobSpecifics: outputs.SourceTrustpilotResourceAllocationJobSpecific[];
}

export interface SourceTrustpilotResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceTrustpilotResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceTrustpilotResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceTrustpilotResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceTvmazeScheduleConfiguration {
    /**
     * Country code for domestic TV schedule retrieval.
     */
    domesticScheduleCountryCode: string;
    /**
     * End date for TV schedule retrieval. May be in the future. Optional.
     */
    endDate?: string;
    /**
     * Start date for TV schedule retrieval. May be in the future.
     */
    startDate: string;
    /**
     * ISO 3166-1 country code for web TV schedule retrieval. Leave blank for
     * all countries plus global web channels (e.g. Netflix). Alternatively,
     * set to 'global' for just global web channels.
     */
    webScheduleCountryCode?: string;
}

export interface SourceTvmazeScheduleResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceTvmazeScheduleResourceAllocationDefault;
    jobSpecifics: outputs.SourceTvmazeScheduleResourceAllocationJobSpecific[];
}

export interface SourceTvmazeScheduleResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceTvmazeScheduleResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceTvmazeScheduleResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceTvmazeScheduleResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceTwelveDataConfiguration {
    apiKey: string;
    /**
     * Where instrument is traded
     */
    country?: string;
    /**
     * Where instrument is traded
     */
    exchange?: string;
    /**
     * Between two consecutive points in time series Supports: 1min, 5min, 15min, 30min, 45min, 1h, 2h, 4h, 1day, 1week, 1month. Default: "1day"; must be one of ["1min", "5min", "15min", "30min", "45min", "1h", "2h", "4h", "1day", "1week", "1month"]
     */
    interval: string;
    /**
     * Ticker of the instrument
     */
    symbol?: string;
}

export interface SourceTwelveDataResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceTwelveDataResourceAllocationDefault;
    jobSpecifics: outputs.SourceTwelveDataResourceAllocationJobSpecific[];
}

export interface SourceTwelveDataResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceTwelveDataResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceTwelveDataResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceTwelveDataResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceTwilioConfiguration {
    /**
     * Twilio account SID
     */
    accountSid: string;
    /**
     * Twilio Auth Token.
     */
    authToken: string;
    /**
     * How far into the past to look for records. (in minutes). Default: 0
     */
    lookbackWindow: number;
    /**
     * UTC date and time in the format 2020-10-01T00:00:00Z. Any data before this date will not be replicated.
     */
    startDate: string;
}

export interface SourceTwilioResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceTwilioResourceAllocationDefault;
    jobSpecifics: outputs.SourceTwilioResourceAllocationJobSpecific[];
}

export interface SourceTwilioResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceTwilioResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceTwilioResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceTwilioResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceTwilioTaskrouterConfiguration {
    /**
     * Twilio Account ID
     */
    accountSid: string;
    /**
     * Twilio Auth Token
     */
    authToken: string;
}

export interface SourceTwilioTaskrouterResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceTwilioTaskrouterResourceAllocationDefault;
    jobSpecifics: outputs.SourceTwilioTaskrouterResourceAllocationJobSpecific[];
}

export interface SourceTwilioTaskrouterResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceTwilioTaskrouterResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceTwilioTaskrouterResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceTwilioTaskrouterResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceTwitterConfiguration {
    /**
     * App only Bearer Token. See the <a href="https://developer.twitter.com/en/docs/authentication/oauth-2-0/bearer-tokens">docs</a> for more information on how to obtain this token.
     */
    apiKey: string;
    /**
     * The end date for retrieving tweets must be a minimum of 10 seconds prior to the request time.
     */
    endDate?: string;
    /**
     * Query for matching Tweets. You can learn how to build this query by reading <a href="https://developer.twitter.com/en/docs/twitter-api/tweets/search/integrate/build-a-query"> build a query guide </a>.
     */
    query: string;
    /**
     * The start date for retrieving tweets cannot be more than 7 days in the past.
     */
    startDate?: string;
}

export interface SourceTwitterResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceTwitterResourceAllocationDefault;
    jobSpecifics: outputs.SourceTwitterResourceAllocationJobSpecific[];
}

export interface SourceTwitterResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceTwitterResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceTwitterResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceTwitterResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceTyntecSmsConfiguration {
    /**
     * Your Tyntec API Key. See <a href="https://www.tyntec.com/docs/docs-center-sms-api-quick-start">here</a>
     */
    apiKey: string;
    /**
     * The phone number of the SMS message sender (international).
     */
    from: string;
    /**
     * The content of the SMS message to be sent.
     */
    message?: string;
    /**
     * The phone number of the SMS message recipient (international).
     */
    to: string;
}

export interface SourceTyntecSmsResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceTyntecSmsResourceAllocationDefault;
    jobSpecifics: outputs.SourceTyntecSmsResourceAllocationJobSpecific[];
}

export interface SourceTyntecSmsResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceTyntecSmsResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceTyntecSmsResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceTyntecSmsResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceTypeformConfiguration {
    credentials: outputs.SourceTypeformConfigurationCredentials;
    /**
     * When this parameter is set, the connector will replicate data only from the input forms. Otherwise, all forms in your Typeform account will be replicated. You can find form IDs in your form URLs. For example, in the URL "https://mysite.typeform.com/to/u6nXL7" the form_id is u6nXL7. You can find form URLs on Share panel
     */
    formIds?: string[];
    /**
     * The date from which you'd like to replicate data for Typeform API, in the format YYYY-MM-DDT00:00:00Z. All data generated after this date will be replicated.
     */
    startDate?: string;
}

export interface SourceTypeformConfigurationCredentials {
    oAuth20?: outputs.SourceTypeformConfigurationCredentialsOAuth20;
    privateToken?: outputs.SourceTypeformConfigurationCredentialsPrivateToken;
}

export interface SourceTypeformConfigurationCredentialsOAuth20 {
    /**
     * Access Token for making authenticated requests.
     */
    accessToken: string;
    /**
     * The Client ID of the Typeform developer application.
     */
    clientId: string;
    /**
     * The Client Secret the Typeform developer application.
     */
    clientSecret: string;
    /**
     * The key to refresh the expired access_token.
     */
    refreshToken: string;
    /**
     * The date-time when the access token should be refreshed.
     */
    tokenExpiryDate: string;
}

export interface SourceTypeformConfigurationCredentialsPrivateToken {
    /**
     * Log into your Typeform account and then generate a personal Access Token.
     */
    accessToken: string;
}

export interface SourceTypeformResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceTypeformResourceAllocationDefault;
    jobSpecifics: outputs.SourceTypeformResourceAllocationJobSpecific[];
}

export interface SourceTypeformResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceTypeformResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceTypeformResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceTypeformResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceUbidotsConfiguration {
    /**
     * API token to use for authentication. Obtain it from your Ubidots account.
     */
    apiToken: string;
}

export interface SourceUbidotsResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceUbidotsResourceAllocationDefault;
    jobSpecifics: outputs.SourceUbidotsResourceAllocationJobSpecific[];
}

export interface SourceUbidotsResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceUbidotsResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceUbidotsResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceUbidotsResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceUnleashConfiguration {
    /**
     * Your API Token (Server-Side SDK [Client]). See <a href="https://docs.getunleash.io/how-to/how-to-create-api-tokens/">here</a>. The token is case sensitive.
     */
    apiToken: string;
    /**
     * Your API URL. No trailing slash. ex: https://unleash.host.com/api
     */
    apiUrl: string;
    /**
     * Use this if you want to filter the API call for only one given project (can be used in addition to the "Feature Name Prefix" field). See <a href="https://docs.getunleash.io/reference/api/legacy/unleash/client/features#filter-feature-toggles">here</a>
     */
    nameprefix?: string;
    /**
     * Use this if you want to filter the API call for only one given project (can be used in addition to the "Feature Name Prefix" field). See <a href="https://docs.getunleash.io/reference/api/legacy/unleash/client/features#filter-feature-toggles">here</a>
     */
    projectName?: string;
}

export interface SourceUnleashResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceUnleashResourceAllocationDefault;
    jobSpecifics: outputs.SourceUnleashResourceAllocationJobSpecific[];
}

export interface SourceUnleashResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceUnleashResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceUnleashResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceUnleashResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceUppromoteConfiguration {
    /**
     * For developing your own custom integration with UpPromote, you can create an API key. This is available from Professional plan.  Simply go to Settings > Integration > API > Create API Key.
     */
    apiKey: string;
    /**
     * Data before this date will not be fetched.
     */
    startDate: string;
}

export interface SourceUppromoteResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceUppromoteResourceAllocationDefault;
    jobSpecifics: outputs.SourceUppromoteResourceAllocationJobSpecific[];
}

export interface SourceUppromoteResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceUppromoteResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceUppromoteResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceUppromoteResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceUsCensusConfiguration {
    /**
     * Your API Key. Get your key <a href="https://api.census.gov/data/key_signup.html">here</a>.
     */
    apiKey: string;
    /**
     * The query parameters portion of the GET request, without the api key
     */
    queryParams?: string;
    /**
     * The path portion of the GET request
     */
    queryPath: string;
}

export interface SourceUsCensusResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceUsCensusResourceAllocationDefault;
    jobSpecifics: outputs.SourceUsCensusResourceAllocationJobSpecific[];
}

export interface SourceUsCensusResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceUsCensusResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceUsCensusResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceUsCensusResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceUservoiceConfiguration {
    apiKey: string;
    startDate: string;
    subdomain: string;
}

export interface SourceUservoiceResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceUservoiceResourceAllocationDefault;
    jobSpecifics: outputs.SourceUservoiceResourceAllocationJobSpecific[];
}

export interface SourceUservoiceResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceUservoiceResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceUservoiceResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceUservoiceResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceVantageConfiguration {
    /**
     * Your API Access token. See <a href="https://vantage.readme.io/reference/authentication">here</a>.
     */
    accessToken: string;
}

export interface SourceVantageResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceVantageResourceAllocationDefault;
    jobSpecifics: outputs.SourceVantageResourceAllocationJobSpecific[];
}

export interface SourceVantageResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceVantageResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceVantageResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceVantageResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceVeeqoConfiguration {
    apiKey: string;
    startDate: string;
}

export interface SourceVeeqoResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceVeeqoResourceAllocationDefault;
    jobSpecifics: outputs.SourceVeeqoResourceAllocationJobSpecific[];
}

export interface SourceVeeqoResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceVeeqoResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceVeeqoResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceVeeqoResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceVercelConfiguration {
    /**
     * Access token to authenticate with the Vercel API. Create and manage tokens in your Vercel account settings.
     */
    accessToken: string;
    startDate: string;
}

export interface SourceVercelResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceVercelResourceAllocationDefault;
    jobSpecifics: outputs.SourceVercelResourceAllocationJobSpecific[];
}

export interface SourceVercelResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceVercelResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceVercelResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceVercelResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceVismaEconomicConfiguration {
    /**
     * Identifier for the grant issued by an agreement
     */
    agreementGrantToken: string;
    /**
     * Identification token for app accessing data
     */
    appSecretToken: string;
}

export interface SourceVismaEconomicResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceVismaEconomicResourceAllocationDefault;
    jobSpecifics: outputs.SourceVismaEconomicResourceAllocationJobSpecific[];
}

export interface SourceVismaEconomicResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceVismaEconomicResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceVismaEconomicResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceVismaEconomicResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceVitallyConfiguration {
    /**
     * Basic Auth Header
     */
    basicAuthHeader?: string;
    /**
     * Provide only the domain part, like https://{your-domain}.rest.vitally.io/.  Keep empty if you don't have a subdomain.
     */
    domain: string;
    /**
     * sk_live_secret_token
     */
    secretToken: string;
    /**
     * Status of the Vitally accounts. One of the following values; active, churned, activeOrChurned. must be one of ["active", "churned", "activeOrChurned"]
     */
    status: string;
}

export interface SourceVitallyResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceVitallyResourceAllocationDefault;
    jobSpecifics: outputs.SourceVitallyResourceAllocationJobSpecific[];
}

export interface SourceVitallyResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceVitallyResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceVitallyResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceVitallyResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceVwoConfiguration {
    apiKey: string;
    startDate: string;
}

export interface SourceVwoResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceVwoResourceAllocationDefault;
    jobSpecifics: outputs.SourceVwoResourceAllocationJobSpecific[];
}

export interface SourceVwoResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceVwoResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceVwoResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceVwoResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceWaiteraidConfiguration {
    /**
     * Your WaiterAid API key, obtained from API request with Username and Password
     */
    authHash: string;
    /**
     * Your WaiterAid restaurant id from API request to getRestaurants
     */
    restid: string;
    /**
     * Start getting data from that date.
     */
    startDate: string;
}

export interface SourceWaiteraidResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceWaiteraidResourceAllocationDefault;
    jobSpecifics: outputs.SourceWaiteraidResourceAllocationJobSpecific[];
}

export interface SourceWaiteraidResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceWaiteraidResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceWaiteraidResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceWaiteraidResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceWasabiStatsApiConfiguration {
    /**
     * The API key format is `AccessKey:SecretKey`
     */
    apiKey: string;
    startDate: string;
}

export interface SourceWasabiStatsApiResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceWasabiStatsApiResourceAllocationDefault;
    jobSpecifics: outputs.SourceWasabiStatsApiResourceAllocationJobSpecific[];
}

export interface SourceWasabiStatsApiResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceWasabiStatsApiResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceWasabiStatsApiResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceWasabiStatsApiResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceWeatherstackConfiguration {
    /**
     * API access key used to retrieve data from the Weatherstack API.(https://weatherstack.com/product)
     */
    accessKey: string;
    /**
     * This is required for enabling the Historical date API with format- (YYYY-MM-DD). * Note, only supported by paid accounts
     */
    historicalDate: string;
    /**
     * A location to query such as city, IP, latitudeLongitude, or zipcode. Multiple locations with semicolon seperated if using a professional plan or higher. For more info- (https://weatherstack.com/documentation#query_parameter)
     */
    query: string;
}

export interface SourceWeatherstackResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceWeatherstackResourceAllocationDefault;
    jobSpecifics: outputs.SourceWeatherstackResourceAllocationJobSpecific[];
}

export interface SourceWeatherstackResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceWeatherstackResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceWeatherstackResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceWeatherstackResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceWebScrapperConfiguration {
    /**
     * API token to use. Find it at https://cloud.webscraper.io/api
     */
    apiToken: string;
}

export interface SourceWebScrapperResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceWebScrapperResourceAllocationDefault;
    jobSpecifics: outputs.SourceWebScrapperResourceAllocationJobSpecific[];
}

export interface SourceWebScrapperResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceWebScrapperResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceWebScrapperResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceWebScrapperResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceWebflowConfiguration {
    /**
     * The version of the Webflow API to use. See https://developers.webflow.com/#versioning
     */
    acceptVersion?: string;
    /**
     * The API token for authenticating to Webflow. See https://university.webflow.com/lesson/intro-to-the-webflow-api
     */
    apiKey: string;
    /**
     * The id of the Webflow site you are requesting data from. See https://developers.webflow.com/#sites
     */
    siteId: string;
}

export interface SourceWebflowResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceWebflowResourceAllocationDefault;
    jobSpecifics: outputs.SourceWebflowResourceAllocationJobSpecific[];
}

export interface SourceWebflowResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceWebflowResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceWebflowResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceWebflowResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceWhenIWorkConfiguration {
    /**
     * Email of your when-i-work account
     */
    email: string;
    /**
     * Password for your when-i-work account
     */
    password: string;
}

export interface SourceWhenIWorkResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceWhenIWorkResourceAllocationDefault;
    jobSpecifics: outputs.SourceWhenIWorkResourceAllocationJobSpecific[];
}

export interface SourceWhenIWorkResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceWhenIWorkResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceWhenIWorkResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceWhenIWorkResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceWhiskyHunterConfiguration {
}

export interface SourceWhiskyHunterResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceWhiskyHunterResourceAllocationDefault;
    jobSpecifics: outputs.SourceWhiskyHunterResourceAllocationJobSpecific[];
}

export interface SourceWhiskyHunterResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceWhiskyHunterResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceWhiskyHunterResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceWhiskyHunterResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceWikipediaPageviewsConfiguration {
    /**
     * If you want to filter by access method, use one of desktop, mobile-app or mobile-web. If you are interested in pageviews regardless of access method, use all-access.
     */
    access: string;
    /**
     * If you want to filter by agent type, use one of user, automated or spider. If you are interested in pageviews regardless of agent type, use all-agents.
     */
    agent: string;
    /**
     * The title of any article in the specified project. Any spaces should be replaced with underscores. It also should be URI-encoded, so that non-URI-safe characters like %, / or ? are accepted.
     */
    article: string;
    /**
     * The ISO 3166-1 alpha-2 code of a country for which to retrieve top articles.
     */
    country: string;
    /**
     * The date of the last day to include, in YYYYMMDD or YYYYMMDDHH format.
     */
    end: string;
    /**
     * If you want to filter by project, use the domain of any Wikimedia project.
     */
    project: string;
    /**
     * The date of the first day to include, in YYYYMMDD or YYYYMMDDHH format. Also serves as the date to retrieve data for the top articles.
     */
    start: string;
}

export interface SourceWikipediaPageviewsResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceWikipediaPageviewsResourceAllocationDefault;
    jobSpecifics: outputs.SourceWikipediaPageviewsResourceAllocationJobSpecific[];
}

export interface SourceWikipediaPageviewsResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceWikipediaPageviewsResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceWikipediaPageviewsResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceWikipediaPageviewsResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceWoocommerceConfiguration {
    /**
     * Customer Key for API in WooCommerce shop
     */
    apiKey: string;
    /**
     * Customer Secret for API in WooCommerce shop
     */
    apiSecret: string;
    /**
     * The name of the store. For https://EXAMPLE.com, the shop name is 'EXAMPLE.com'.
     */
    shop: string;
    /**
     * The date you would like to replicate data from. Format: YYYY-MM-DD
     */
    startDate: string;
}

export interface SourceWoocommerceResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceWoocommerceResourceAllocationDefault;
    jobSpecifics: outputs.SourceWoocommerceResourceAllocationJobSpecific[];
}

export interface SourceWoocommerceResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceWoocommerceResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceWoocommerceResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceWoocommerceResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceWordpressConfiguration {
    /**
     * The domain of the WordPress site. Example: my-wordpress-website.host.com
     */
    domain: string;
    /**
     * Placeholder for basic HTTP auth password - should be set to empty string. Default: "x"
     */
    password: string;
    /**
     * Minimal Date to Retrieve Records when stream allow incremental.
     */
    startDate: string;
    /**
     * Placeholder for basic HTTP auth username - should be set to empty string. Default: "x"
     */
    username: string;
}

export interface SourceWordpressResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceWordpressResourceAllocationDefault;
    jobSpecifics: outputs.SourceWordpressResourceAllocationJobSpecific[];
}

export interface SourceWordpressResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceWordpressResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceWordpressResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceWordpressResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceWorkableConfiguration {
    /**
     * Your Workable account subdomain, e.g. https://your_account_subdomain.workable.com.
     */
    accountSubdomain: string;
    /**
     * Your Workable API Key. See <a href="https://workable.readme.io/reference/generate-an-access-token">here</a>.
     */
    apiKey: string;
    /**
     * Get data that was created since this date (format: YYYYMMDDTHHMMSSZ).
     */
    startDate: string;
}

export interface SourceWorkableResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceWorkableResourceAllocationDefault;
    jobSpecifics: outputs.SourceWorkableResourceAllocationJobSpecific[];
}

export interface SourceWorkableResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceWorkableResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceWorkableResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceWorkableResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceWorkdayConfiguration {
    /**
     * Report Based Streams and REST API Streams use different methods of Authentication. Choose streams type you want to sync and provide needed credentials for them.
     */
    credentials: outputs.SourceWorkdayConfigurationCredentials;
    host: string;
    tenantId: string;
}

export interface SourceWorkdayConfigurationCredentials {
    reportBasedStreams?: outputs.SourceWorkdayConfigurationCredentialsReportBasedStreams;
    restapiStreams?: outputs.SourceWorkdayConfigurationCredentialsRestapiStreams;
}

export interface SourceWorkdayConfigurationCredentialsReportBasedStreams {
    password: string;
    /**
     * Report IDs can be found by clicking the three dots on the right side of the report > Web Service > View URLs > in JSON url copy everything between Workday tenant/ and ?format=json.
     */
    reportIds: string[];
    username: string;
}

export interface SourceWorkdayConfigurationCredentialsRestapiStreams {
    /**
     * Follow the instructions in the "OAuth 2.0 in Postman - API Client for Integrations" article in the Workday community docs to obtain access token.
     */
    accessToken: string;
    /**
     * Rows after this date will be synced, default 2 years ago.
     */
    startDate?: string;
}

export interface SourceWorkdayResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceWorkdayResourceAllocationDefault;
    jobSpecifics: outputs.SourceWorkdayResourceAllocationJobSpecific[];
}

export interface SourceWorkdayResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceWorkdayResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceWorkdayResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceWorkdayResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceWorkflowmaxConfiguration {
    /**
     * The account id for workflowmax
     */
    accountId: string;
    apiKey2: string;
    startDate: string;
}

export interface SourceWorkflowmaxResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceWorkflowmaxResourceAllocationDefault;
    jobSpecifics: outputs.SourceWorkflowmaxResourceAllocationJobSpecific[];
}

export interface SourceWorkflowmaxResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceWorkflowmaxResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceWorkflowmaxResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceWorkflowmaxResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceWorkrampConfiguration {
    /**
     * The id of the Academy
     */
    academyId: string;
    /**
     * The API Token for Workramp
     */
    apiKey: string;
}

export interface SourceWorkrampResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceWorkrampResourceAllocationDefault;
    jobSpecifics: outputs.SourceWorkrampResourceAllocationJobSpecific[];
}

export interface SourceWorkrampResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceWorkrampResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceWorkrampResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceWorkrampResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceWrikeConfiguration {
    /**
     * Permanent access token. You can find documentation on how to acquire a permanent access token  <a href="https://developers.wrike.com/oauth-20-authorization/">here</a>
     */
    accessToken: string;
    /**
     * UTC date and time in the format 2017-01-25T00:00:00Z. Only comments after this date will be replicated.
     */
    startDate?: string;
    /**
     * Wrike's instance such as `app-us2.wrike.com`. Default: "app-us2.wrike.com"
     */
    wrikeInstance: string;
}

export interface SourceWrikeResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceWrikeResourceAllocationDefault;
    jobSpecifics: outputs.SourceWrikeResourceAllocationJobSpecific[];
}

export interface SourceWrikeResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceWrikeResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceWrikeResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceWrikeResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceWufooConfiguration {
    /**
     * Your Wufoo API Key. You can find it by logging into your Wufoo account, selecting 'API Information' from the 'More' dropdown on any form, and locating the 16-digit code.
     */
    apiKey: string;
    /**
     * Your account subdomain/username for Wufoo.
     */
    subdomain: string;
}

export interface SourceWufooResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceWufooResourceAllocationDefault;
    jobSpecifics: outputs.SourceWufooResourceAllocationJobSpecific[];
}

export interface SourceWufooResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceWufooResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceWufooResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceWufooResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceXkcdConfiguration {
    /**
     * Specifies the comic number in which details are to be extracted, pagination will begin with that number to end of available comics. Default: "2960"
     */
    comicNumber: string;
}

export interface SourceXkcdResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceXkcdResourceAllocationDefault;
    jobSpecifics: outputs.SourceXkcdResourceAllocationJobSpecific[];
}

export interface SourceXkcdResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceXkcdResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceXkcdResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceXkcdResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceXsollaConfiguration {
    /**
     * Go to Xsolla Dashboard and from company setting get the api_key
     */
    apiKey: string;
    /**
     * You can find this parameter in your Publisher Account next to the name of the project . Example: 44056
     */
    projectId: number;
}

export interface SourceXsollaResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceXsollaResourceAllocationDefault;
    jobSpecifics: outputs.SourceXsollaResourceAllocationJobSpecific[];
}

export interface SourceXsollaResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceXsollaResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceXsollaResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceXsollaResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceYahooFinancePriceConfiguration {
    /**
     * The interval of between prices queried. must be one of ["1m", "5m", "15m", "30m", "90m", "1h", "1d", "5d", "1wk", "1mo", "3mo"]
     */
    interval?: string;
    /**
     * The range of prices to be queried. must be one of ["1d", "5d", "7d", "1mo", "3mo", "6mo", "1y", "2y", "5y", "ytd", "max"]
     */
    range?: string;
    /**
     * Comma-separated identifiers for the stocks to be queried. Whitespaces are allowed.
     */
    tickers: string;
}

export interface SourceYahooFinancePriceResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceYahooFinancePriceResourceAllocationDefault;
    jobSpecifics: outputs.SourceYahooFinancePriceResourceAllocationJobSpecific[];
}

export interface SourceYahooFinancePriceResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceYahooFinancePriceResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceYahooFinancePriceResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceYahooFinancePriceResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceYandexMetricaConfiguration {
    /**
     * Your Yandex Metrica API access token
     */
    authToken: string;
    /**
     * Counter ID
     */
    counterId: string;
    /**
     * Starting point for your data replication, in format of "YYYY-MM-DD". If not provided will sync till most recent date.
     */
    endDate?: string;
    /**
     * Starting point for your data replication, in format of "YYYY-MM-DD".
     */
    startDate: string;
}

export interface SourceYandexMetricaResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceYandexMetricaResourceAllocationDefault;
    jobSpecifics: outputs.SourceYandexMetricaResourceAllocationJobSpecific[];
}

export interface SourceYandexMetricaResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceYandexMetricaResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceYandexMetricaResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceYandexMetricaResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceYotpoConfiguration {
    /**
     * Access token recieved as a result of API call to https://api.yotpo.com/oauth/token (Ref- https://apidocs.yotpo.com/reference/yotpo-authentication)
     */
    accessToken: string;
    /**
     * App key found at settings (Ref- https://settings.yotpo.com/#/general_settings)
     */
    appKey: string;
    /**
     * Email address registered with yotpo. Default: "example@gmail.com"
     */
    email: string;
    /**
     * Date time filter for incremental filter, Specify which date to extract from.
     */
    startDate: string;
}

export interface SourceYotpoResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceYotpoResourceAllocationDefault;
    jobSpecifics: outputs.SourceYotpoResourceAllocationJobSpecific[];
}

export interface SourceYotpoResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceYotpoResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceYotpoResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceYotpoResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceYouNeedABudgetYnabConfiguration {
    apiKey: string;
}

export interface SourceYouNeedABudgetYnabResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceYouNeedABudgetYnabResourceAllocationDefault;
    jobSpecifics: outputs.SourceYouNeedABudgetYnabResourceAllocationJobSpecific[];
}

export interface SourceYouNeedABudgetYnabResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceYouNeedABudgetYnabResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceYouNeedABudgetYnabResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceYouNeedABudgetYnabResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceYouniumConfiguration {
    /**
     * Legal Entity that data should be pulled from
     */
    legalEntity: string;
    /**
     * Account password for younium account API key
     */
    password: string;
    /**
     * Property defining if connector is used against playground or production environment. Default: false
     */
    playground: boolean;
    /**
     * Username for Younium account
     */
    username: string;
}

export interface SourceYouniumResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceYouniumResourceAllocationDefault;
    jobSpecifics: outputs.SourceYouniumResourceAllocationJobSpecific[];
}

export interface SourceYouniumResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceYouniumResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceYouniumResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceYouniumResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceYousignConfiguration {
    /**
     * API key or access token
     */
    apiKey: string;
    /**
     * Limit for each response objects. Default: "10"
     */
    limit: string;
    startDate: string;
    /**
     * The subdomain for the Yousign API environment, such as 'sandbox' or 'api'. Default: "api"; must be one of ["api-sandbox", "api"]
     */
    subdomain: string;
}

export interface SourceYousignResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceYousignResourceAllocationDefault;
    jobSpecifics: outputs.SourceYousignResourceAllocationJobSpecific[];
}

export interface SourceYousignResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceYousignResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceYousignResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceYousignResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceYoutubeAnalyticsConfiguration {
    credentials: outputs.SourceYoutubeAnalyticsConfigurationCredentials;
}

export interface SourceYoutubeAnalyticsConfigurationCredentials {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * The Client ID of your developer application
     */
    clientId: string;
    /**
     * The client secret of your developer application
     */
    clientSecret: string;
    /**
     * A refresh token generated using the above client ID and secret
     */
    refreshToken: string;
}

export interface SourceYoutubeAnalyticsResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceYoutubeAnalyticsResourceAllocationDefault;
    jobSpecifics: outputs.SourceYoutubeAnalyticsResourceAllocationJobSpecific[];
}

export interface SourceYoutubeAnalyticsResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceYoutubeAnalyticsResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceYoutubeAnalyticsResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceYoutubeAnalyticsResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceYoutubeDataConfiguration {
    apiKey: string;
    channelIds: string[];
}

export interface SourceYoutubeDataResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceYoutubeDataResourceAllocationDefault;
    jobSpecifics: outputs.SourceYoutubeDataResourceAllocationJobSpecific[];
}

export interface SourceYoutubeDataResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceYoutubeDataResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceYoutubeDataResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceYoutubeDataResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceZapierSupportedStorageConfiguration {
    /**
     * Secret key supplied by zapier
     */
    secret: string;
}

export interface SourceZapierSupportedStorageResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceZapierSupportedStorageResourceAllocationDefault;
    jobSpecifics: outputs.SourceZapierSupportedStorageResourceAllocationJobSpecific[];
}

export interface SourceZapierSupportedStorageResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceZapierSupportedStorageResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceZapierSupportedStorageResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceZapierSupportedStorageResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceZapsignConfiguration {
    /**
     * Your static API token for authentication. You can find it in your ZapSign account under the 'Settings' or 'API' section. For more details, refer to the [Getting Started](https://docs.zapsign.com.br/english/getting-started#how-do-i-get-my-api-token) guide.
     */
    apiToken: string;
    /**
     * The signer ids for signer stream
     */
    signerIds?: string[];
    startDate: string;
}

export interface SourceZapsignResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceZapsignResourceAllocationDefault;
    jobSpecifics: outputs.SourceZapsignResourceAllocationJobSpecific[];
}

export interface SourceZapsignResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceZapsignResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceZapsignResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceZapsignResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceZendeskChatConfiguration {
    credentials?: outputs.SourceZendeskChatConfigurationCredentials;
    /**
     * The date from which you'd like to replicate data for Zendesk Chat API, in the format YYYY-MM-DDT00:00:00Z.
     */
    startDate: string;
    /**
     * The unique subdomain of your Zendesk account (without https://). <a href=\"https://support.zendesk.com/hc/en-us/articles/4409381383578-Where-can-I-find-my-Zendesk-subdomain\">See the Zendesk docs to find your subdomain</a>.
     */
    subdomain: string;
}

export interface SourceZendeskChatConfigurationCredentials {
    accessToken?: outputs.SourceZendeskChatConfigurationCredentialsAccessToken;
    oAuth20?: outputs.SourceZendeskChatConfigurationCredentialsOAuth20;
}

export interface SourceZendeskChatConfigurationCredentialsAccessToken {
    /**
     * The Access Token to make authenticated requests.
     */
    accessToken: string;
}

export interface SourceZendeskChatConfigurationCredentialsOAuth20 {
    /**
     * Access Token for making authenticated requests.
     */
    accessToken?: string;
    /**
     * The Client ID of your OAuth application
     */
    clientId?: string;
    /**
     * The Client Secret of your OAuth application.
     */
    clientSecret?: string;
    /**
     * Refresh Token to obtain new Access Token, when it's expired.
     */
    refreshToken?: string;
}

export interface SourceZendeskChatResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceZendeskChatResourceAllocationDefault;
    jobSpecifics: outputs.SourceZendeskChatResourceAllocationJobSpecific[];
}

export interface SourceZendeskChatResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceZendeskChatResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceZendeskChatResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceZendeskChatResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceZendeskSunshineConfiguration {
    credentials?: outputs.SourceZendeskSunshineConfigurationCredentials;
    /**
     * The date from which you'd like to replicate data for Zendesk Sunshine API, in the format YYYY-MM-DDT00:00:00Z.
     */
    startDate: string;
    /**
     * The subdomain for your Zendesk Account.
     */
    subdomain: string;
}

export interface SourceZendeskSunshineConfigurationCredentials {
    apiToken?: outputs.SourceZendeskSunshineConfigurationCredentialsApiToken;
    oAuth20?: outputs.SourceZendeskSunshineConfigurationCredentialsOAuth20;
}

export interface SourceZendeskSunshineConfigurationCredentialsApiToken {
    /**
     * API Token. See the <a href="https://docs.airbyte.com/integrations/sources/zendesk_sunshine">docs</a> for information on how to generate this key.
     */
    apiToken: string;
    /**
     * The user email for your Zendesk account
     */
    email: string;
}

export interface SourceZendeskSunshineConfigurationCredentialsOAuth20 {
    /**
     * Long-term access Token for making authenticated requests.
     */
    accessToken: string;
    /**
     * The Client ID of your OAuth application.
     */
    clientId: string;
    /**
     * The Client Secret of your OAuth application.
     */
    clientSecret: string;
}

export interface SourceZendeskSunshineResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceZendeskSunshineResourceAllocationDefault;
    jobSpecifics: outputs.SourceZendeskSunshineResourceAllocationJobSpecific[];
}

export interface SourceZendeskSunshineResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceZendeskSunshineResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceZendeskSunshineResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceZendeskSunshineResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceZendeskSupportConfiguration {
    /**
     * Zendesk allows two authentication methods. We recommend using `OAuth2.0` for Airbyte Cloud users and `API token` for Airbyte Open Source users.
     */
    credentials?: outputs.SourceZendeskSupportConfigurationCredentials;
    /**
     * The number of worker threads to use for the sync. The performance upper boundary is based on the limit of your Zendesk Support plan. More info about the rate limit plan tiers can be found on Zendesk's API <a href="https://developer.zendesk.com/api-reference/introduction/rate-limits/#zendesk-support-plan-limits">docs</a>. Default: 3
     */
    numWorkers: number;
    /**
     * The UTC date and time from which you'd like to replicate data, in the format YYYY-MM-DDT00:00:00Z. All data generated after this date will be replicated.
     */
    startDate?: string;
    /**
     * This is your unique Zendesk subdomain that can be found in your account URL. For example, in https://MY_SUBDOMAIN.zendesk.com/, MY_SUBDOMAIN is the value of your subdomain.
     */
    subdomain: string;
}

export interface SourceZendeskSupportConfigurationCredentials {
    apiToken?: outputs.SourceZendeskSupportConfigurationCredentialsApiToken;
    oAuth20?: outputs.SourceZendeskSupportConfigurationCredentialsOAuth20;
}

export interface SourceZendeskSupportConfigurationCredentialsApiToken {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * The value of the API token generated. See our <a href="https://docs.airbyte.com/integrations/sources/zendesk-support#setup-guide">full documentation</a> for more information on generating this token.
     */
    apiToken: string;
    /**
     * The user email for your Zendesk account.
     */
    email: string;
}

export interface SourceZendeskSupportConfigurationCredentialsOAuth20 {
    /**
     * The OAuth access token. See the <a href="https://developer.zendesk.com/documentation/ticketing/working-with-oauth/creating-and-using-oauth-tokens-with-the-api/">Zendesk docs</a> for more information on generating this token.
     */
    accessToken: string;
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * The OAuth client's ID. See <a href="https://docs.searchunify.com/Content/Content-Sources/Zendesk-Authentication-OAuth-Client-ID-Secret.htm#:~:text=Get%20Client%20ID%20and%20Client%20Secret&text=Go%20to%20OAuth%20Clients%20and,will%20be%20displayed%20only%20once.">this guide</a> for more information.
     */
    clientId?: string;
    /**
     * The OAuth client secret. See <a href="https://docs.searchunify.com/Content/Content-Sources/Zendesk-Authentication-OAuth-Client-ID-Secret.htm#:~:text=Get%20Client%20ID%20and%20Client%20Secret&text=Go%20to%20OAuth%20Clients%20and,will%20be%20displayed%20only%20once.">this guide</a> for more information.
     */
    clientSecret?: string;
}

export interface SourceZendeskSupportResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceZendeskSupportResourceAllocationDefault;
    jobSpecifics: outputs.SourceZendeskSupportResourceAllocationJobSpecific[];
}

export interface SourceZendeskSupportResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceZendeskSupportResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceZendeskSupportResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceZendeskSupportResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceZendeskTalkConfiguration {
    /**
     * Zendesk service provides two authentication methods. Choose between: `OAuth2.0` or `API token`.
     */
    credentials?: outputs.SourceZendeskTalkConfigurationCredentials;
    /**
     * The date from which you'd like to replicate data for Zendesk Talk API, in the format YYYY-MM-DDT00:00:00Z. All data generated after this date will be replicated.
     */
    startDate: string;
    /**
     * This is your Zendesk subdomain that can be found in your account URL. For example, in https://{MY_SUBDOMAIN}.zendesk.com/, where MY_SUBDOMAIN is the value of your subdomain.
     */
    subdomain: string;
}

export interface SourceZendeskTalkConfigurationCredentials {
    apiToken?: outputs.SourceZendeskTalkConfigurationCredentialsApiToken;
    oAuth20?: outputs.SourceZendeskTalkConfigurationCredentialsOAuth20;
}

export interface SourceZendeskTalkConfigurationCredentialsApiToken {
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * The value of the API token generated. See the <a href="https://docs.airbyte.com/integrations/sources/zendesk-talk">docs</a> for more information.
     */
    apiToken: string;
    /**
     * The user email for your Zendesk account.
     */
    email: string;
}

export interface SourceZendeskTalkConfigurationCredentialsOAuth20 {
    /**
     * The value of the API token generated. See the <a href="https://docs.airbyte.com/integrations/sources/zendesk-talk">docs</a> for more information.
     */
    accessToken: string;
    /**
     * Parsed as JSON.
     */
    additionalProperties?: string;
    /**
     * Client ID
     */
    clientId?: string;
    /**
     * Client Secret
     */
    clientSecret?: string;
}

export interface SourceZendeskTalkResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceZendeskTalkResourceAllocationDefault;
    jobSpecifics: outputs.SourceZendeskTalkResourceAllocationJobSpecific[];
}

export interface SourceZendeskTalkResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceZendeskTalkResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceZendeskTalkResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceZendeskTalkResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceZenefitsConfiguration {
    /**
     * Use Sync with Zenefits button on the link given on the readme file, and get the token to access the api
     */
    token: string;
}

export interface SourceZenefitsResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceZenefitsResourceAllocationDefault;
    jobSpecifics: outputs.SourceZenefitsResourceAllocationJobSpecific[];
}

export interface SourceZenefitsResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceZenefitsResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceZenefitsResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceZenefitsResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceZenloopConfiguration {
    /**
     * Zenloop API Token. You can get the API token in settings page <a href="https://app.zenloop.com/settings/api">here</a>
     */
    apiToken: string;
    /**
     * Zenloop date_from. Format: 2021-10-24T03:30:30Z or 2021-10-24. Leave empty if only data from current data should be synced
     */
    dateFrom?: string;
    /**
     * Zenloop Survey Group ID. Can be found by pulling All Survey Groups via SurveyGroups stream. Leave empty to pull answers from all survey groups
     */
    surveyGroupId?: string;
    /**
     * Zenloop Survey ID. Can be found <a href="https://app.zenloop.com/settings/api">here</a>. Leave empty to pull answers from all surveys
     */
    surveyId?: string;
}

export interface SourceZenloopResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceZenloopResourceAllocationDefault;
    jobSpecifics: outputs.SourceZenloopResourceAllocationJobSpecific[];
}

export interface SourceZenloopResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceZenloopResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceZenloopResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceZenloopResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceZohoAnalyticsMetadataApiConfiguration {
    clientId: string;
    clientSecret: string;
    /**
     * Default: "com"; must be one of ["com", "eu", "in", "com.au", "com.cn", "jp"]
     */
    dataCenter: string;
    orgId: number;
    refreshToken: string;
}

export interface SourceZohoAnalyticsMetadataApiResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceZohoAnalyticsMetadataApiResourceAllocationDefault;
    jobSpecifics: outputs.SourceZohoAnalyticsMetadataApiResourceAllocationJobSpecific[];
}

export interface SourceZohoAnalyticsMetadataApiResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceZohoAnalyticsMetadataApiResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceZohoAnalyticsMetadataApiResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceZohoAnalyticsMetadataApiResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceZohoBiginConfiguration {
    clientId: string;
    clientRefreshToken: string;
    clientSecret: string;
    /**
     * The data center where the Bigin account's resources are hosted. Default: "com"; must be one of ["com", "com.au", "eu", "in", "com.cn", "jp"]
     */
    dataCenter: string;
    moduleName: string;
}

export interface SourceZohoBiginResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceZohoBiginResourceAllocationDefault;
    jobSpecifics: outputs.SourceZohoBiginResourceAllocationJobSpecific[];
}

export interface SourceZohoBiginResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceZohoBiginResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceZohoBiginResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceZohoBiginResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceZohoBillingConfiguration {
    clientId: string;
    clientSecret: string;
    refreshToken: string;
    /**
     * must be one of ["com", "eu", "in", "com.cn", "com.au", "jp", "sa", "ca"]
     */
    region: string;
}

export interface SourceZohoBillingResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceZohoBillingResourceAllocationDefault;
    jobSpecifics: outputs.SourceZohoBillingResourceAllocationJobSpecific[];
}

export interface SourceZohoBillingResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceZohoBillingResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceZohoBillingResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceZohoBillingResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceZohoBooksConfiguration {
    clientId: string;
    clientSecret: string;
    refreshToken: string;
    /**
     * The region code for the Zoho Books API, such as 'com', 'eu', 'in', etc. must be one of ["com", "eu", "in", "com.cn", "com.au", "jp", "sa", "ca"]
     */
    region: string;
    startDate: string;
}

export interface SourceZohoBooksResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceZohoBooksResourceAllocationDefault;
    jobSpecifics: outputs.SourceZohoBooksResourceAllocationJobSpecific[];
}

export interface SourceZohoBooksResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceZohoBooksResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceZohoBooksResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceZohoBooksResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceZohoCampaignConfiguration {
    clientId2: string;
    clientRefreshToken: string;
    clientSecret2: string;
    /**
     * must be one of ["com", "eu", "in", "com.au", ".jp", ".com.cn"]
     */
    dataCenter: string;
}

export interface SourceZohoCampaignResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceZohoCampaignResourceAllocationDefault;
    jobSpecifics: outputs.SourceZohoCampaignResourceAllocationJobSpecific[];
}

export interface SourceZohoCampaignResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceZohoCampaignResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceZohoCampaignResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceZohoCampaignResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceZohoCrmConfiguration {
    /**
     * OAuth2.0 Client ID
     */
    clientId: string;
    /**
     * OAuth2.0 Client Secret
     */
    clientSecret: string;
    /**
     * Please choose the region of your Data Center location. More info by this <a href="https://www.zoho.com/crm/developer/docs/api/v2/multi-dc.html">Link</a>. must be one of ["US", "AU", "EU", "IN", "CN", "JP"]
     */
    dcRegion: string;
    /**
     * Choose your Edition of Zoho CRM to determine API Concurrency Limits. Default: "Free"; must be one of ["Free", "Standard", "Professional", "Enterprise", "Ultimate"]
     */
    edition: string;
    /**
     * Please choose the environment. must be one of ["Production", "Developer", "Sandbox"]
     */
    environment: string;
    /**
     * OAuth2.0 Refresh Token
     */
    refreshToken: string;
    /**
     * ISO 8601, for instance: `YYYY-MM-DD`, `YYYY-MM-DD HH:MM:SS+HH:MM`
     */
    startDatetime?: string;
}

export interface SourceZohoCrmResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceZohoCrmResourceAllocationDefault;
    jobSpecifics: outputs.SourceZohoCrmResourceAllocationJobSpecific[];
}

export interface SourceZohoCrmResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceZohoCrmResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceZohoCrmResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceZohoCrmResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceZohoDeskConfiguration {
    clientId: string;
    clientSecret: string;
    includeCustomDomain?: boolean;
    refreshToken: string;
    tokenRefreshEndpoint: string;
}

export interface SourceZohoDeskResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceZohoDeskResourceAllocationDefault;
    jobSpecifics: outputs.SourceZohoDeskResourceAllocationJobSpecific[];
}

export interface SourceZohoDeskResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceZohoDeskResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceZohoDeskResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceZohoDeskResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceZohoExpenseConfiguration {
    clientId: string;
    clientSecret: string;
    /**
     * The domain suffix for the Zoho Expense API based on your data center location (e.g., 'com', 'eu', 'in', etc.). Default: "com"; must be one of ["com", "in", "jp", "ca", "com.cn", "sa", "com.au", "eu"]
     */
    dataCenter: string;
    refreshToken: string;
}

export interface SourceZohoExpenseResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceZohoExpenseResourceAllocationDefault;
    jobSpecifics: outputs.SourceZohoExpenseResourceAllocationJobSpecific[];
}

export interface SourceZohoExpenseResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceZohoExpenseResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceZohoExpenseResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceZohoExpenseResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceZohoInventoryConfiguration {
    clientId: string;
    clientSecret: string;
    /**
     * The domain suffix for the Zoho Inventory API based on your data center location (e.g., 'com', 'eu', 'in', etc.). Default: "com"; must be one of ["com", "in", "jp", "eu", "com.au", "ca", "com.cn", "sa"]
     */
    domain: string;
    refreshToken: string;
    startDate: string;
}

export interface SourceZohoInventoryResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceZohoInventoryResourceAllocationDefault;
    jobSpecifics: outputs.SourceZohoInventoryResourceAllocationJobSpecific[];
}

export interface SourceZohoInventoryResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceZohoInventoryResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceZohoInventoryResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceZohoInventoryResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceZohoInvoiceConfiguration {
    clientId: string;
    clientRefreshToken: string;
    clientSecret: string;
    /**
     * To be provided if a user belongs to multiple organizations
     */
    organizationId?: string;
    /**
     * must be one of ["com", "eu", "in", "com.cn", "com.au", "jp", "sa", "ca"]
     */
    region: string;
}

export interface SourceZohoInvoiceResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceZohoInvoiceResourceAllocationDefault;
    jobSpecifics: outputs.SourceZohoInvoiceResourceAllocationJobSpecific[];
}

export interface SourceZohoInvoiceResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceZohoInvoiceResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceZohoInvoiceResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceZohoInvoiceResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceZonkaFeedbackConfiguration {
    /**
     * Auth token to use. Generate it by navigating to Company Settings > Developers > API in your Zonka Feedback account.
     */
    authToken: string;
    /**
     * The identifier for the data center, such as 'us1' or 'e' for EU. must be one of ["us1", "e"]
     */
    datacenter: string;
}

export interface SourceZonkaFeedbackResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceZonkaFeedbackResourceAllocationDefault;
    jobSpecifics: outputs.SourceZonkaFeedbackResourceAllocationJobSpecific[];
}

export interface SourceZonkaFeedbackResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceZonkaFeedbackResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceZonkaFeedbackResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceZonkaFeedbackResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceZoomConfiguration {
    /**
     * The account ID for your Zoom account. You can find this in the Zoom Marketplace under the "Manage" tab for your app.
     */
    accountId: string;
    /**
     * Default: "https://zoom.us/oauth/token"
     */
    authorizationEndpoint: string;
    /**
     * The client ID for your Zoom app. You can find this in the Zoom Marketplace under the "Manage" tab for your app.
     */
    clientId: string;
    /**
     * The client secret for your Zoom app. You can find this in the Zoom Marketplace under the "Manage" tab for your app.
     */
    clientSecret: string;
}

export interface SourceZoomResourceAllocation {
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    default: outputs.SourceZoomResourceAllocationDefault;
    jobSpecifics: outputs.SourceZoomResourceAllocationJobSpecific[];
}

export interface SourceZoomResourceAllocationDefault {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface SourceZoomResourceAllocationJobSpecific {
    /**
     * enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]
     */
    jobType: string;
    /**
     * optional resource requirements to run workers (blank for unbounded allocations)
     */
    resourceRequirements: outputs.SourceZoomResourceAllocationJobSpecificResourceRequirements;
}

export interface SourceZoomResourceAllocationJobSpecificResourceRequirements {
    cpuLimit: string;
    cpuRequest: string;
    ephemeralStorageLimit: string;
    ephemeralStorageRequest: string;
    memoryLimit: string;
    memoryRequest: string;
}

export interface WorkspaceNotifications {
    /**
     * Configures a notification.
     */
    connectionUpdate: outputs.WorkspaceNotificationsConnectionUpdate;
    /**
     * Configures a notification.
     */
    connectionUpdateActionRequired: outputs.WorkspaceNotificationsConnectionUpdateActionRequired;
    /**
     * Configures a notification.
     */
    failure: outputs.WorkspaceNotificationsFailure;
    /**
     * Configures a notification.
     */
    success: outputs.WorkspaceNotificationsSuccess;
    /**
     * Configures a notification.
     */
    syncDisabled: outputs.WorkspaceNotificationsSyncDisabled;
    /**
     * Configures a notification.
     */
    syncDisabledWarning: outputs.WorkspaceNotificationsSyncDisabledWarning;
}

export interface WorkspaceNotificationsConnectionUpdate {
    /**
     * Configures an email notification.
     */
    email: outputs.WorkspaceNotificationsConnectionUpdateEmail;
    /**
     * Configures a webhook notification.
     */
    webhook: outputs.WorkspaceNotificationsConnectionUpdateWebhook;
}

export interface WorkspaceNotificationsConnectionUpdateActionRequired {
    /**
     * Configures an email notification.
     */
    email: outputs.WorkspaceNotificationsConnectionUpdateActionRequiredEmail;
    /**
     * Configures a webhook notification.
     */
    webhook: outputs.WorkspaceNotificationsConnectionUpdateActionRequiredWebhook;
}

export interface WorkspaceNotificationsConnectionUpdateActionRequiredEmail {
    enabled: boolean;
}

export interface WorkspaceNotificationsConnectionUpdateActionRequiredWebhook {
    enabled: boolean;
    url: string;
}

export interface WorkspaceNotificationsConnectionUpdateEmail {
    enabled: boolean;
}

export interface WorkspaceNotificationsConnectionUpdateWebhook {
    enabled: boolean;
    url: string;
}

export interface WorkspaceNotificationsFailure {
    /**
     * Configures an email notification.
     */
    email: outputs.WorkspaceNotificationsFailureEmail;
    /**
     * Configures a webhook notification.
     */
    webhook: outputs.WorkspaceNotificationsFailureWebhook;
}

export interface WorkspaceNotificationsFailureEmail {
    enabled: boolean;
}

export interface WorkspaceNotificationsFailureWebhook {
    enabled: boolean;
    url: string;
}

export interface WorkspaceNotificationsSuccess {
    /**
     * Configures an email notification.
     */
    email: outputs.WorkspaceNotificationsSuccessEmail;
    /**
     * Configures a webhook notification.
     */
    webhook: outputs.WorkspaceNotificationsSuccessWebhook;
}

export interface WorkspaceNotificationsSuccessEmail {
    enabled: boolean;
}

export interface WorkspaceNotificationsSuccessWebhook {
    enabled: boolean;
    url: string;
}

export interface WorkspaceNotificationsSyncDisabled {
    /**
     * Configures an email notification.
     */
    email: outputs.WorkspaceNotificationsSyncDisabledEmail;
    /**
     * Configures a webhook notification.
     */
    webhook: outputs.WorkspaceNotificationsSyncDisabledWebhook;
}

export interface WorkspaceNotificationsSyncDisabledEmail {
    enabled: boolean;
}

export interface WorkspaceNotificationsSyncDisabledWarning {
    /**
     * Configures an email notification.
     */
    email: outputs.WorkspaceNotificationsSyncDisabledWarningEmail;
    /**
     * Configures a webhook notification.
     */
    webhook: outputs.WorkspaceNotificationsSyncDisabledWarningWebhook;
}

export interface WorkspaceNotificationsSyncDisabledWarningEmail {
    enabled: boolean;
}

export interface WorkspaceNotificationsSyncDisabledWarningWebhook {
    enabled: boolean;
    url: string;
}

export interface WorkspaceNotificationsSyncDisabledWebhook {
    enabled: boolean;
    url: string;
}

